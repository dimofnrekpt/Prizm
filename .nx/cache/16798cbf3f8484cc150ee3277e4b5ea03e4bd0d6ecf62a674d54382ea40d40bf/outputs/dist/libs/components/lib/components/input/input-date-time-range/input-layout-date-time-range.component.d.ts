import { AfterViewInit, ChangeDetectorRef, Injector, OnInit, TemplateRef } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmDayRange } from '../../../@core/date-time/day-range';
import { PrizmDay } from '../../../@core/date-time/day';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmMarkerHandler } from '../../../types/marker-handler';
import { PrizmMonth } from '../../../@core/date-time/month';
import { PrizmDayRangePeriod } from '../../../@core/classes/day-range-period';
import { PrizmDayLike } from '../../../types/day-like';
import { PrizmDialogService } from '../../dialogs/dialog/dialog.service';
import { PrizmDateMode } from '../../../types/date-mode';
import { PrizmControlValueTransformer } from '../../../types/control-value-transformer';
import { PrizmInputNgControl } from '../common/base/input-ng-control.class';
import { PrizmDateTimeRange, PrizmTime } from '../../../@core';
import { PrizmInputZoneDirective } from '../../../directives/input-zone';
import { PrizmDateButton, PrizmTimeMode } from '../../../types';
import { PrizmDateTimeMinMax } from './model';
import * as i0 from "@angular/core";
export declare class PrizmInputLayoutDateTimeRangeComponent extends PrizmInputNgControl<PrizmDateTimeRange | null> implements OnInit, AfterViewInit {
    private readonly dialogService;
    readonly dateFormat: PrizmDateMode;
    readonly dateSeparator: string;
    readonly dateTexts$: Observable<Record<PrizmDateMode, string>>;
    readonly valueTransformer: PrizmControlValueTransformer<PrizmDateTimeRange | null> | null;
    hasClearButton: boolean;
    nativeElementType: string;
    readonly focusableElement?: PrizmInputZoneDirective;
    readonly footerFromTemplate?: TemplateRef<HTMLInputElement>;
    readonly footerToTemplate?: TemplateRef<HTMLInputElement>;
    disabledItemHandler: PrizmBooleanHandler<PrizmDay>;
    markerHandler: PrizmMarkerHandler;
    defaultViewedMonth: PrizmMonth;
    items: readonly PrizmDayRangePeriod[];
    placeholder: string;
    min: PrizmDateTimeMinMax;
    max: PrizmDateTimeMinMax;
    timeStrict: boolean;
    minLength: PrizmDayLike | null;
    maxLength: PrizmDayLike | null;
    open: boolean;
    timeMode: PrizmTimeMode;
    timeItems: readonly PrizmTime[];
    extraButtonInjector: Injector;
    readonly testId_ = "ui_input_date_time_range";
    testRange: PrizmDayRange;
    get interactive(): boolean;
    rightButtons$: BehaviorSubject<PrizmDateButton[]>;
    get calendarMinDay(): PrizmDay;
    get calendarMaxDay(): PrizmDay;
    readonly nativeValueTimeFrom$$: BehaviorSubject<string>;
    readonly nativeValueTimeTo$$: BehaviorSubject<string>;
    readonly nativeValueFrom$$: BehaviorSubject<string>;
    readonly nativeValueTo$$: BehaviorSubject<string>;
    readonly nativeValue$$: Observable<{
        timeRange: string[];
        dayRange: string[];
    }>;
    readonly hasNativeValue$: Observable<boolean>;
    readonly empty$: Observable<boolean>;
    get empty(): Observable<boolean>;
    constructor(changeDetectorRef: ChangeDetectorRef, injector: Injector, dialogService: PrizmDialogService, dateFormat: PrizmDateMode, dateSeparator: string, dateTexts$: Observable<Record<PrizmDateMode, string>>, valueTransformer: PrizmControlValueTransformer<PrizmDateTimeRange | null> | null);
    get focused(): Observable<boolean>;
    get canOpen(): boolean;
    closeOnOutsideClick: boolean;
    get computedTimeMask(): string;
    get computedDateMask(): string;
    get fromValue(): string;
    get fromTimeValue(): string;
    get toValue(): string;
    get toTimeValue(): string;
    onOpenChange(open: boolean): void;
    private completeDateIfAreNotPending;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    private timeToString;
    onDateValueChange(value: string, isFormValue: boolean): void;
    onTimeValueChange(value: string, isFormValue: boolean): void;
    onRangeChange(range: PrizmDayRange | null): void;
    private updateWithCorrectDateAndTime;
    private timeLimit;
    private getDayFromMinMax;
    private getTimeFromMinMax;
    private dayLimit;
    writeValue(value: PrizmDateTimeRange | null): void;
    private toggle;
    private focusInput;
    clear(ev: MouseEvent): void;
    updateTimeTo(value: PrizmTime): void;
    updateTimeFrom(value: PrizmTime): void;
    referFocusToMain(referFocus?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputLayoutDateTimeRangeComponent, [null, null, null, { optional: true; }, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputLayoutDateTimeRangeComponent, "prizm-input-layout-date-time-range", never, { "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "defaultViewedMonth": "defaultViewedMonth"; "items": "items"; "placeholder": "placeholder"; "min": "min"; "max": "max"; "timeStrict": "timeStrict"; "minLength": "minLength"; "maxLength": "maxLength"; "timeMode": "timeMode"; "timeItems": "timeItems"; "extraButtonInjector": "extraButtonInjector"; }, {}, ["footerFromTemplate", "footerToTemplate"], never, true, never>;
}
