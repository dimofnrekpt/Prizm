import { EventEmitter, QueryList, TemplateRef } from '@angular/core';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { PrizmHandler } from '../../../../types';
import { PrizmNavigationMenuGroupComponent } from '../prizm-navigation-menu-group/prizm-navigation-menu-group.component';
import { PrizmNavigationMenuService } from '../../services/prizm-navigation-menu.service';
import { Observable } from 'rxjs';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { GroupExpandedChangedEvent, ItemExpandedChangedEvent, PrizmNavigationMenuEmptyMessageConfig, PrizmNavigationMenuHeaderConfig, PrizmNavigationMenuItem, PrizmNavigationMenuSearchConfig, PrizmNavigationMenuSettingsConfig, PrizmNavigationMenuToolbarConfig } from '../../interfaces';
import { prizmIsTextOverflow } from '../../../../util';
import * as i0 from "@angular/core";
export declare class PrizmNavigationMenuComponent<UserItem extends Omit<PrizmNavigationMenuItem, 'children'> & {
    children?: UserItem[];
}> extends PrizmAbstractTestId {
    private menuService;
    private destroy$;
    menuGroups: QueryList<PrizmNavigationMenuGroupComponent<UserItem>>;
    homeClicked: EventEmitter<void>;
    activeItemChanged: EventEmitter<UserItem>;
    breadcrumbsChanged: EventEmitter<UserItem[]>;
    expandedItemsMapChanged: EventEmitter<Map<UserItem, boolean>>;
    expandedGroupsMapChangedEvent: EventEmitter<Map<string, boolean>>;
    itemExpandedChanged: EventEmitter<ItemExpandedChangedEvent<UserItem>>;
    groupExpandedChanged: EventEmitter<GroupExpandedChangedEvent>;
    title: string;
    items: UserItem[];
    toolbarExtraTemplate: TemplateRef<unknown>;
    itemExtraTemplate: TemplateRef<unknown>;
    headerExtraTemplate: TemplateRef<unknown>;
    set activeItem(activeItem: UserItem | null);
    set itemKeyName(keyName: string);
    set expandedItemsMap(expandedItemsMap: Map<UserItem, boolean>);
    set expandedGroupsMap(expandedGroupsMap: Map<string, boolean>);
    set settingsConfig(settings: PrizmNavigationMenuSettingsConfig);
    set emptySearchResultMessageConfig(config: PrizmNavigationMenuEmptyMessageConfig);
    set emptyDataMessageConfig(config: PrizmNavigationMenuEmptyMessageConfig);
    set headerConfig(config: PrizmNavigationMenuHeaderConfig);
    set searchConfig(config: PrizmNavigationMenuSearchConfig);
    set toolbarConfig(config: PrizmNavigationMenuToolbarConfig);
    testId_: string;
    menuToolbarConfig$: Observable<PrizmNavigationMenuToolbarConfig>;
    menuSearchConfig$: Observable<PrizmNavigationMenuSearchConfig>;
    emptySearchResultMessageConfig$: Observable<PrizmNavigationMenuEmptyMessageConfig>;
    emptyDataMessageConfig$: Observable<PrizmNavigationMenuEmptyMessageConfig>;
    settingsConfiguration: PrizmNavigationMenuSettingsConfig;
    headerConfiguration: PrizmNavigationMenuHeaderConfig;
    headerIsHovered: boolean;
    readonly prizmIsTextOverflow: typeof prizmIsTextOverflow;
    constructor(menuService: PrizmNavigationMenuService<UserItem>, destroy$: PrizmDestroyService);
    handleHomeClicked(): void;
    readonly handler: PrizmHandler<PrizmNavigationMenuItem, readonly PrizmNavigationMenuItem[]>;
    private forwardEvents;
    handleSettingsClicked(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmNavigationMenuComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmNavigationMenuComponent<any>, "prizm-navigation-menu", never, { "title": "title"; "items": "items"; "toolbarExtraTemplate": "toolbarExtraTemplate"; "itemExtraTemplate": "itemExtraTemplate"; "headerExtraTemplate": "headerExtraTemplate"; "activeItem": "activeItem"; "itemKeyName": "itemKeyName"; "expandedItemsMap": "expandedItemsMap"; "expandedGroupsMap": "expandedGroupsMap"; "settingsConfig": "settingsConfig"; "emptySearchResultMessageConfig": "emptySearchResultMessageConfig"; "emptyDataMessageConfig": "emptyDataMessageConfig"; "headerConfig": "headerConfig"; "searchConfig": "searchConfig"; "toolbarConfig": "toolbarConfig"; }, { "homeClicked": "homeClicked"; "activeItemChanged": "activeItemChanged"; "breadcrumbsChanged": "breadcrumbsChanged"; "expandedItemsMapChanged": "expandedItemsMapChanged"; "expandedGroupsMapChangedEvent": "expandedGroupsMapChangedEvent"; "itemExpandedChanged": "itemExpandedChanged"; "groupExpandedChanged": "groupExpandedChanged"; }, ["menuGroups"], ["*", "[top]", "[bottom]"], true, never>;
}
