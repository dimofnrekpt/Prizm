import { OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { PrizmTabComponent } from './components/tab.component';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmTabCanOpen } from './tabs.model';
import * as i0 from "@angular/core";
export declare class PrizmTabsService implements OnDestroy {
    private readonly destroy;
    readonly tabs: Map<number, PrizmTabComponent>;
    readonly changes$$: Subject<Map<number, PrizmTabComponent>>;
    readonly removed$$: Subject<PrizmTabComponent>;
    private changeParent$_;
    get changeParent$(): Observable<any>;
    readonly closeTab$$: Subject<Map<number, PrizmTabComponent>>;
    private readonly activeTabIdx$$;
    readonly activeTabIdx$: Observable<number>;
    get activeTabIdx(): number;
    get tabs$(): Observable<Map<number, PrizmTabComponent>>;
    canOpenTab: PrizmTabCanOpen | null;
    constructor(destroy: PrizmDestroyService);
    initObservingTabsParent(el: HTMLElement): void;
    isActiveTab(tab: PrizmTabComponent): Observable<boolean>;
    getTabByIdx(idx: number): PrizmTabComponent;
    moveTab(idx: number, toIndex: number, tab: PrizmTabComponent): void;
    updateTab(tab: PrizmTabComponent, idx?: number): void;
    removeTab(tab: PrizmTabComponent): void;
    private correctActiveTabIdx;
    findTabIdx(tab: PrizmTabComponent): number;
    selectTab(tab: PrizmTabComponent): void;
    private selectTabIfCanOpen;
    ngOnDestroy(): void;
    updateActiveTab(idx: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmTabsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PrizmTabsService>;
}
