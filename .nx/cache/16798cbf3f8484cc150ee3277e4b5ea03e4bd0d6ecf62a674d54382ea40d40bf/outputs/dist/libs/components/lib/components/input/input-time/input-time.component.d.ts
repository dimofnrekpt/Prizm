import { ChangeDetectorRef, ElementRef, Injector } from '@angular/core';
import { NgControl } from '@angular/forms';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmTime } from '../../../@core/date-time/time';
import { AbstractPrizmNullableControl } from '../../../abstract/nullable-control';
import { PrizmFocusableElementAccessor } from '../../../types/focusable-element-accessor';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmInputTimeOptions } from './input-time-options';
import { PrizmTimeMode } from '../../../types/time-mode';
import { PrizmInputSize } from '../common/models/prizm-input.models';
import { PrizmDateButton } from '../../../types/date-button';
import * as i0 from "@angular/core";
export declare class PrizmInputTimeComponent extends AbstractPrizmNullableControl<PrizmTime> implements PrizmFocusableElementAccessor {
    private readonly cdr;
    private readonly timeTexts$;
    private readonly injector;
    private readonly options;
    readonly focusableElement?: ElementRef<HTMLInputElement>;
    placeholder: string;
    forceClear: boolean | null;
    label: string;
    size: PrizmInputSize;
    outer: boolean;
    disabledItemHandler: PrizmBooleanHandler<PrizmTime>;
    items: readonly PrizmTime[];
    itemSize: PrizmInputTimeOptions['itemSize'];
    strict: boolean;
    mode: PrizmInputTimeOptions['mode'];
    extraButtonInjector: Injector;
    readonly testId_ = "ui_input_time";
    open: boolean;
    rightButtons$: BehaviorSubject<PrizmDateButton[]>;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, changeDetectorRef: ChangeDetectorRef, timeTexts$: Observable<Record<PrizmTimeMode, string>>, injector: Injector, options: PrizmInputTimeOptions);
    ngOnInit(): void;
    get filtered(): readonly PrizmTime[];
    get textMaskOptions(): string;
    get computedValue(): string;
    get computedSearch(): string;
    get innerPseudoFocused(): boolean | null;
    get nativeValue(): string;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    set nativeValue(value: string);
    getFiller$(mode: PrizmTimeMode): Observable<string>;
    onValueChange(value: string): void;
    onFocused(focused: boolean): void;
    onHovered(hovered: boolean): void;
    onArrowUp(event: Event): void;
    onArrowDown(event: Event): void;
    onMenuClick(item: PrizmTime): void;
    onOpen(open: boolean): void;
    writeValue(value: PrizmTime | null): void;
    private calculateMask;
    get stringValue(): string;
    private filter;
    private findNearestTimeFromItems;
    private getMatch;
    private close;
    private processArrow;
    private calculateShift;
    private shiftTime;
    private focusInput;
    safeOpenModal(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputTimeComponent, [{ optional: true; self: true; }, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputTimeComponent, "prizm-input-time", never, { "placeholder": "placeholder"; "forceClear": "forceClear"; "label": "label"; "size": "size"; "outer": "outer"; "disabledItemHandler": "disabledItemHandler"; "items": "items"; "itemSize": "itemSize"; "strict": "strict"; "mode": "mode"; "extraButtonInjector": "extraButtonInjector"; }, {}, never, never, false, never>;
}
