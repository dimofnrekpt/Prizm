import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { PrizmTabSize } from './tabs.interface';
import { PrizmTabsService } from './tabs.service';
import { PrizmTabComponent } from './components/tab.component';
import { PrizmDropdownHostComponent } from '../dropdowns/dropdown-host';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmTabCanOpen } from './tabs.model';
import { PrizmAbstractTestId } from '../../abstract/interactive';
import { prizmIsTextOverflow$ } from '../../util';
import * as i0 from "@angular/core";
export declare class PrizmTabsComponent extends PrizmAbstractTestId implements OnInit, OnDestroy {
    private readonly cdRef;
    private readonly elRef;
    private readonly destroy$;
    private readonly tabsService;
    size: PrizmTabSize;
    set activeTabIndex(idx: number);
    get activeTabIndex(): number;
    canShowMenu: boolean;
    set canOpen(func: PrizmTabCanOpen | null);
    get canOpen(): PrizmTabCanOpen | null;
    readonly activeTabIndexChange: EventEmitter<number>;
    tabsContainer: ElementRef;
    tabsDropdown: PrizmDropdownHostComponent;
    tabsMoreDropdown: PrizmDropdownHostComponent;
    tabElements: QueryList<PrizmTabComponent>;
    menuElements: QueryList<TemplateRef<PrizmTabComponent>>;
    readonly testId_ = "ui_tabs";
    openLeft: boolean;
    openRight: boolean;
    isLeftBtnActive: boolean;
    isRightBtnActive: boolean;
    readonly prizmIsTextOverflow$: typeof prizmIsTextOverflow$;
    private mutationObserver;
    private resizeObserver;
    private mutationDetector$;
    private subscription;
    constructor(cdRef: ChangeDetectorRef, elRef: ElementRef, destroy$: PrizmDestroyService, tabsService: PrizmTabsService);
    ngOnInit(): void;
    private initTabClickListener;
    ngOnDestroy(): void;
    tabClickHandler(idx: number): void;
    increase(): void;
    decrease(): void;
    private calculateControlsState;
    private overflowChecker;
    private focusTabByIdx;
    reCalculatePositions(): void;
    closeTab(idx: number): void;
    clickTab(index: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmTabsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmTabsComponent, "prizm-tabs", never, { "size": "size"; "activeTabIndex": "activeTabIndex"; "canShowMenu": "canShowMenu"; "canOpen": "canOpen"; }, { "activeTabIndexChange": "activeTabIndexChange"; }, ["tabElements", "menuElements"], ["*"], true, never>;
}
