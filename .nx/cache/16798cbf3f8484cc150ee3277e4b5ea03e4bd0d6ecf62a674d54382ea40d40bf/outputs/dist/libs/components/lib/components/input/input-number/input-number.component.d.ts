import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { PrizmInputControl } from '../common';
import { NgControl } from '@angular/forms';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmDecimal } from '@prizm-ui/core';
import { PrizmHintDirective } from '../../../directives';
import * as i0 from "@angular/core";
export declare class PrizmInputNumberComponent extends PrizmInputControl<number> implements OnInit {
    readonly ngControl: NgControl;
    private readonly el;
    private hasSymbol;
    destroy$: PrizmDestroyService;
    get empty(): boolean;
    get required(): boolean;
    readonly prizmHint_: PrizmHintDirective<import("../../../directives").PrizmHintOptions, import("../../../directives").PrizmHintContext>;
    private readonly inputHint;
    focused: import("rxjs").Observable<boolean>;
    get invalid(): boolean;
    get valid(): boolean;
    get touched(): boolean;
    nativeElementType: string;
    hasClearButton: boolean;
    placeholder?: string;
    min: number | null;
    max: number | null;
    decimal: PrizmDecimal;
    precision: number;
    step: number;
    get value(): number;
    onClear: EventEmitter<MouseEvent>;
    readonly testId_ = "ui_input_number";
    private readonly input$$;
    get disabled(): boolean;
    stopValue(ev: KeyboardEvent): boolean;
    onInput(data: string): void;
    constructor(ngControl: NgControl, el: ElementRef<HTMLInputElement>);
    private detectSymbols;
    private validateMinMax;
    clear(ev: MouseEvent): void;
    private markAsTouched;
    increment(): void;
    decrement(): void;
    onArrowDown(event: KeyboardEvent): void;
    onArrowUp(event: KeyboardEvent): void;
    private get hostValue();
    private set hostValue(value);
    private safeNgControlData;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputNumberComponent, [{ self: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputNumberComponent, "input[prizmInputNumber], input[type=number][prizmInput]", ["prizmInputNumber"], { "placeholder": "placeholder"; "min": "min"; "max": "max"; "precision": "precision"; "step": "step"; }, { "onClear": "onClear"; }, never, never, true, never>;
}
