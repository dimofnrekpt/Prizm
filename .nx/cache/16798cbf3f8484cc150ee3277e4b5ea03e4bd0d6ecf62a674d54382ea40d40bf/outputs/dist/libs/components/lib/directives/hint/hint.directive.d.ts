import { ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Type } from '@angular/core';
import { PolymorphContent } from '../polymorph';
import { PrizmHintContext, PrizmHintOptions } from './hint-options';
import { PrizmOverlayControl } from '../../modules/overlay';
import { Subject } from 'rxjs';
import { PrizmTheme } from '@prizm-ui/theme';
import * as i0 from "@angular/core";
export declare const HINT_HOVERED_CLASS = "_hint_hovered";
export declare class PrizmHintDirective<OPTIONS extends PrizmHintOptions = PrizmHintOptions, CONTEXT extends PrizmHintContext = PrizmHintContext> implements OnChanges, OnInit, OnDestroy {
    protected readonly options: OPTIONS;
    protected readonly injector: Injector;
    prizmAutoReposition: PrizmHintOptions['autoReposition'];
    prizmHintDirection: PrizmHintOptions['direction'];
    prizmHintId: string;
    prizmHintTheme: PrizmTheme | null;
    prizmHintShowDelay: PrizmHintOptions['showDelay'];
    prizmHintHideDelay: PrizmHintOptions['hideDelay'];
    prizmHintHost: HTMLElement | null;
    prizmHintContext: Record<string, unknown>;
    prizmHintCanShow: boolean;
    set show(show: boolean);
    get show(): boolean;
    protected show_: boolean;
    set prizmHint(value: PolymorphContent | null);
    readonly prizmHoveredChange$$: Subject<boolean>;
    readonly prizmHintShowed: EventEmitter<boolean>;
    protected readonly onHoverActive: boolean;
    content: PolymorphContent;
    overlay: PrizmOverlayControl;
    protected readonly containerComponent: Type<unknown>;
    protected readonly show$: Subject<boolean>;
    protected readonly destroyListeners$: Subject<void>;
    private readonly prizmOverlayService;
    private readonly renderer;
    protected readonly elementRef: ElementRef<HTMLElement>;
    private readonly destroy$;
    private readonly hoveredService;
    private readonly hintService;
    get id(): string | null;
    get host(): HTMLElement;
    ngOnChanges(): void;
    ngOnInit(): void;
    protected initShowedChangeListener(): void;
    ngOnDestroy(): void;
    toggle(open: boolean): void;
    protected open(): void;
    protected close(): void;
    private initVisibleController;
    private initOverlayController;
    protected getContext(): CONTEXT;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmHintDirective<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PrizmHintDirective<any, any>, "[prizmHint]:not(ng-container)", ["prizmHint"], { "prizmAutoReposition": "prizmAutoReposition"; "prizmHintDirection": "prizmHintDirection"; "prizmHintId": "prizmHintId"; "prizmHintTheme": "prizmHintTheme"; "prizmHintShowDelay": "prizmHintShowDelay"; "prizmHintHideDelay": "prizmHintHideDelay"; "prizmHintHost": "prizmHintHost"; "prizmHintContext": "prizmHintContext"; "prizmHintCanShow": "prizmHintCanShow"; "prizmHint": "prizmHint"; }, { "prizmHintShowed": "prizmHintShowed"; }, never, never, true, never>;
}
