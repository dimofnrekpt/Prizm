import { ChangeDetectorRef, Injector, TemplateRef } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmDayRange } from '../../../@core/date-time/day-range';
import { PrizmDay } from '../../../@core/date-time/day';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmMarkerHandler } from '../../../types/marker-handler';
import { PrizmMonth } from '../../../@core/date-time/month';
import { PrizmDayRangePeriod } from '../../../@core/classes/day-range-period';
import { PrizmDayLike } from '../../../types/day-like';
import { PrizmDialogService } from '../../dialogs/dialog/dialog.service';
import { PrizmDateMode } from '../../../types/date-mode';
import { PrizmControlValueTransformer } from '../../../types/control-value-transformer';
import { PrizmInputNgControl } from '../common/base/input-ng-control.class';
import { PrizmInputZoneDirective } from '../../../directives/input-zone';
import * as i0 from "@angular/core";
export declare class PrizmInputLayoutDateRangeComponent extends PrizmInputNgControl<PrizmDayRange | null> {
    private readonly dialogService;
    readonly dateFormat: PrizmDateMode;
    readonly dateSeparator: string;
    readonly dateTexts$: Observable<Record<PrizmDateMode, string>>;
    readonly valueTransformer: PrizmControlValueTransformer<PrizmDayRange | null> | null;
    hasClearButton: boolean;
    nativeElementType: string;
    readonly focusableElement?: PrizmInputZoneDirective;
    readonly footerFromTemplate?: TemplateRef<HTMLInputElement>;
    readonly footerToTemplate?: TemplateRef<HTMLInputElement>;
    disabledItemHandler: PrizmBooleanHandler<PrizmDay>;
    markerHandler: PrizmMarkerHandler;
    defaultViewedMonth: PrizmMonth;
    items: readonly PrizmDayRangePeriod[];
    placeholder: string;
    min: PrizmDay;
    max: PrizmDay;
    minLength: PrizmDayLike | null;
    maxLength: PrizmDayLike | null;
    open: boolean;
    readonly testId_ = "ui_input_date_range";
    get interactive(): boolean;
    readonly nativeValue$$: BehaviorSubject<[string, string]>;
    get empty(): Observable<boolean>;
    constructor(changeDetectorRef: ChangeDetectorRef, injector: Injector, dialogService: PrizmDialogService, dateFormat: PrizmDateMode, dateSeparator: string, dateTexts$: Observable<Record<PrizmDateMode, string>>, valueTransformer: PrizmControlValueTransformer<PrizmDayRange | null> | null);
    get focused(): Observable<boolean>;
    get canOpen(): boolean;
    closeOnOutsideClick: boolean;
    get computedMask(): string;
    get computedSingleMask(): string;
    get stringValue(): string;
    get fromValue(): string;
    get toValue(): string;
    get activePeriod(): PrizmDayRangePeriod | null;
    onOpenChange(open: boolean): void;
    onValueFromChange(value: string, isFromValue: boolean): void;
    onRangeChange(range: PrizmDayRange | null): void;
    onItemSelect(item: string | PrizmDayRangePeriod): void;
    private updateWithCorrectDateAndTime;
    private dayLimit;
    writeValue(value: PrizmDayRange | null): void;
    private toggle;
    private focusInput;
    private clampValue;
    clear(ev: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputLayoutDateRangeComponent, [null, null, null, { optional: true; }, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputLayoutDateRangeComponent, "prizm-input-layout-date-range", never, { "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "defaultViewedMonth": "defaultViewedMonth"; "items": "items"; "placeholder": "placeholder"; "min": "min"; "max": "max"; "minLength": "minLength"; "maxLength": "maxLength"; }, {}, ["footerFromTemplate", "footerToTemplate"], never, true, never>;
}
