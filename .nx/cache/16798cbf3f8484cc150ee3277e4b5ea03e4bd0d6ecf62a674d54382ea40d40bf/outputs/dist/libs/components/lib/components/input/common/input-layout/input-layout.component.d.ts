import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { PrizmInputControl } from '../base/input-control.class';
import { PrizmInputStatusTextDirective } from '../input-status-text/input-status-text.directive';
import { PrizmInputPosition, PrizmInputSize, PrizmInputStatus } from '../models/prizm-input.models';
import { PolymorphContent } from '../../../../directives/polymorph';
import { PrizmLetDirective } from '@prizm-ui/helpers';
import { PrizmAbstractTestId } from '../../../../abstract/interactive';
import * as i0 from "@angular/core";
export type PrizmInputLayoutClearButtonContext = {
    clear: (event: MouseEvent) => void;
    disabled: boolean;
    showStatusButton: boolean;
};
export declare class PrizmInputLayoutComponent extends PrizmAbstractTestId implements OnInit, OnChanges, AfterViewInit {
    private readonly injector;
    readonly el: ElementRef<HTMLElement>;
    set label(val: string | null);
    get label(): string;
    size: PrizmInputSize;
    status: PrizmInputStatus;
    outer: boolean;
    clearButton: PolymorphContent<PrizmInputLayoutClearButtonContext>;
    border: boolean;
    position: PrizmInputPosition;
    forceClear: boolean | null;
    clear: EventEmitter<MouseEvent>;
    letDirective: PrizmLetDirective<{
        focused: boolean;
        disabled: boolean;
        empty: boolean;
        touched: boolean;
        invalid: boolean;
        required: boolean;
    }>;
    get hasHiddenControl(): boolean;
    get hasTextarea(): boolean;
    testId_: string;
    protected readonly isPolymorphPrimitive: <T = any>(content: PolymorphContent<T>) => boolean;
    readonly label$: BehaviorSubject<string | null>;
    get showClearButton(): boolean;
    control: PrizmInputControl<any>;
    inputStatusText: PrizmInputStatusTextDirective;
    statusIcon: string;
    statusMessage: PolymorphContent | null;
    get disabled(): boolean | undefined;
    get enabled(): boolean;
    private readonly innerClick$$;
    readonly innerClick$: import("rxjs").Observable<MouseEvent>;
    readonly cdr: ChangeDetectorRef;
    private readonly destroy$;
    private foundStatusDirective;
    readonly changes$: Subject<void>;
    get correctedStatus(): PrizmInputStatus;
    get emptyLabel(): boolean;
    get showStatusButton(): boolean;
    readonly onClearClick: (event: MouseEvent) => void;
    constructor(injector: Injector, el: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private actualizeStatusIcon;
    protected innerClick(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputLayoutComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputLayoutComponent, "prizm-input-layout", never, { "label": "label"; "size": "size"; "status": "status"; "outer": "outer"; "clearButton": "clearButton"; "border": "border"; "position": "position"; "forceClear": "forceClear"; }, { "clear": "clear"; }, ["control", "inputStatusText"], ["[prizm-input-left]", "*", "[prizm-input-in-body]", "[prizm-input-right]", "[prizm-input-bottom]", "[prizm-input-subtext]"], false, never>;
}
