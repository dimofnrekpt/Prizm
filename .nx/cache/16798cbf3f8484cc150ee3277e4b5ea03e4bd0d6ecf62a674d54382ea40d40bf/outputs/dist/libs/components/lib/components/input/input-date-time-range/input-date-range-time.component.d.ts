import { ChangeDetectorRef, ElementRef, Injector, Type } from '@angular/core';
import { AbstractPrizmNullableControl } from '../../../abstract/nullable-control';
import { PrizmWithOptionalMinMax } from '../../../types/with-optional-min-max';
import { PrizmDay } from '../../../@core/date-time/day';
import { PrizmFocusableElementAccessor } from '../../../types/focusable-element-accessor';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmMarkerHandler } from '../../../types/marker-handler';
import { PrizmMonth } from '../../../@core/date-time/month';
import { PrizmDayLike } from '../../../types/day-like';
import { PrizmDateTime } from '../../../@core/date-time/date-time';
import { PrizmDateTimeRange } from '../../../@core/date-time/day-time-range';
import { PrizmDayRangePeriod } from '../../../@core/classes/day-range-period';
import { UntypedFormControl, NgControl } from '@angular/forms';
import { PrizmDialogService } from '../../dialogs/dialog';
import { PrizmTime } from '../../../@core';
import { PrizmControlValueTransformer, PrizmDateMode, PrizmTimeMode } from '../../../types';
import { Observable } from 'rxjs';
import { PrizmInputSize } from '../common/models/prizm-input.models';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
export declare class PrizmInputDateTimeRangeComponent extends AbstractPrizmNullableControl<PrizmDateTimeRange> implements PrizmWithOptionalMinMax<PrizmDateTime>, PrizmFocusableElementAccessor {
    private readonly destroyed$;
    private readonly injector;
    private readonly isMobile;
    private readonly dialogService;
    private readonly mobileCalendar;
    readonly dateFormat: PrizmDateMode;
    readonly dateSeparator: string;
    readonly dateTexts$: Observable<Record<PrizmDateMode, string>>;
    readonly valueTransformer: PrizmControlValueTransformer<PrizmDateTimeRange | null> | null;
    readonly focusableElement?: ElementRef<HTMLInputElement>;
    disabledItemHandler: PrizmBooleanHandler<PrizmDay>;
    markerHandler: PrizmMarkerHandler;
    forceClear: boolean | null;
    label: string;
    size: PrizmInputSize;
    outer: boolean;
    timeItems: readonly PrizmTime[];
    defaultViewedMonth: PrizmMonth;
    items: readonly PrizmDayRangePeriod[];
    placeholder: string;
    timeMode: PrizmTimeMode;
    min: PrizmDateTime;
    max: PrizmDateTime;
    minLength: PrizmDayLike | null;
    maxLength: PrizmDayLike | null;
    timeStrict: boolean;
    readonly testId_ = "ui_input_date_time_range";
    dateControl: UntypedFormControl;
    timeControlFrom: UntypedFormControl;
    timeControlTo: UntypedFormControl;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    constructor(control: NgControl | null, destroyed$: PrizmDestroyService, changeDetectorRef: ChangeDetectorRef, injector: Injector, isMobile: boolean, dialogService: PrizmDialogService, mobileCalendar: Type<any> | null, dateFormat: PrizmDateMode, dateSeparator: string, dateTexts$: Observable<Record<PrizmDateMode, string>>, valueTransformer: PrizmControlValueTransformer<PrizmDateTimeRange | null> | null);
    protected valueChanged(previousValue: PrizmDateTimeRange | null, currentValue: PrizmDateTimeRange | null): boolean;
    ngOnInit(): void;
    private syncStateBetweenControls;
    private syncAllValidators;
    private syncValuesBetweenControls;
    private getDefaultValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputDateTimeRangeComponent, [{ optional: true; self: true; }, null, null, null, null, null, { optional: true; }, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputDateTimeRangeComponent, "prizm-input-date-time-range", never, { "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "forceClear": "forceClear"; "label": "label"; "size": "size"; "outer": "outer"; "timeItems": "timeItems"; "defaultViewedMonth": "defaultViewedMonth"; "items": "items"; "placeholder": "placeholder"; "timeMode": "timeMode"; "min": "min"; "max": "max"; "minLength": "minLength"; "maxLength": "maxLength"; "timeStrict": "timeStrict"; }, {}, never, never, false, never>;
}
