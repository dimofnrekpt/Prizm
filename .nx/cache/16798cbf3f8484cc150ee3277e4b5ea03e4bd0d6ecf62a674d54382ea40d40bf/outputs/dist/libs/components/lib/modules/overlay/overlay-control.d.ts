import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, ViewRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { PrizmOverlayConfig, PrizmOverlayContent, PrizmOverlayContentData, PrizmOverlayContentProps, PrizmOverlayEventName, PrizmOverlayId } from './models';
import { PrizmOverlayAbstractPosition } from './position/position';
import { PrizmOverlayComponent } from './overlay.component';
export declare class PrizmOverlayControl {
    private appRef;
    private compResolver;
    private injector;
    private readonly window;
    position: PrizmOverlayAbstractPosition;
    readonly config: PrizmOverlayConfig;
    content: PrizmOverlayContent;
    zid: PrizmOverlayId;
    zIndex: number;
    comp: PrizmOverlayComponent | null;
    updateTextContent: Subject<string>;
    hostView: ViewRef | null;
    parentContainer: HTMLElement | null;
    compRef: ComponentRef<PrizmOverlayComponent>;
    viewEl: HTMLElement | null;
    isOpen: boolean;
    private compFac;
    private destroy$;
    constructor(appRef: ApplicationRef, compResolver: ComponentFactoryResolver, injector: Injector, window: Window);
    open(): void;
    close(): void;
    toggle(): void;
    onEscClick(): Observable<any>;
    onDocumentClick(): Observable<any>;
    onWindowResize(): Observable<any>;
    changePosition(newPosition: PrizmOverlayAbstractPosition): void;
    updatePosition(positionConfig: PrizmOverlayAbstractPosition): void;
    updateContent(content: PrizmOverlayContentData, props?: PrizmOverlayContentProps): void;
    updateParentContainer(node: HTMLElement): void;
    listen<T = any>(eventName: PrizmOverlayEventName): Observable<T>;
    reCalculatePositions(): void;
    private isNotHostElement;
    private attach;
    private detach;
}
