import { AfterViewInit, ElementRef, Injector } from '@angular/core';
import { UntypedFormControl } from '@angular/forms';
import { PolymorphContent } from '../../../directives';
import { PrizmMultiSelectOptions } from './multi-select.options';
import { PrizmContextWithImplicit, PrizmNativeFocusableElement } from '../../../types';
import { PrizmInputNgControl } from '../../input';
import { prizmIsTextOverflow$ } from '../../../util';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { PrizmDropdownHostClasses, PrizmDropdownHostComponent, PrizmDropdownHostStyles } from '../dropdown-host';
import { PrizmMultiSelectIdentityMatcher, PrizmMultiSelectItemStringifyFunc, PrizmMultiSelectItemWithChecked, PrizmMultiSelectSearchMatcher, PrizmMultiSelectValueTransformer } from './multi-select.model';
import { PrizmOverlayOutsidePlacement } from '../../../modules/overlay/models';
import { PrizmScrollbarVisibility } from '../../scrollbar';
import * as i0 from "@angular/core";
export declare class PrizmInputMultiSelectComponent<T> extends PrizmInputNgControl<T[]> implements AfterViewInit {
    private readonly options;
    readonly nativeElementType = "multiselect";
    readonly hasClearButton = true;
    defaultLabel: string;
    readonly focusableElement?: ElementRef<HTMLElement>;
    readonly dropdownHostElement?: PrizmDropdownHostComponent;
    transformer: PrizmMultiSelectValueTransformer<T>;
    set items(data: T[]);
    get items(): T[];
    dropdownScroll: PrizmScrollbarVisibility;
    dropdownStyles: PrizmDropdownHostStyles;
    dropdownClasses: PrizmDropdownHostClasses;
    icon: PolymorphContent<import("./multi-select.options").PrizmMultiSelectIconContext>;
    selectAllItem: T | null;
    searchable: boolean;
    isChipsDeletable: boolean;
    minDropdownHeight: number;
    dropdownWidth: string;
    maxDropdownHeight: number;
    placeholder: string;
    searchMatcher: PrizmMultiSelectSearchMatcher<T>;
    emptyContent: PolymorphContent;
    /** need only clear function */
    stringify: PrizmMultiSelectItemStringifyFunc<T>;
    identityMatcher: PrizmMultiSelectIdentityMatcher<T>;
    valueTemplate: PolymorphContent<PrizmContextWithImplicit<PrizmMultiSelectItemWithChecked<T>>>;
    hidden: boolean;
    readonly button_layout_width = 64;
    readonly testId_ = "ui-muilti-select";
    get display(): string;
    get inner(): boolean;
    get emptyChips(): boolean;
    get size(): string;
    readonly defaultIcon = "chevrons-dropdown";
    readonly prizmIsTextOverflow$: typeof prizmIsTextOverflow$;
    readonly direction: PrizmOverlayOutsidePlacement;
    readonly items$: BehaviorSubject<never[]>;
    readonly requiredInputControl: UntypedFormControl;
    readonly searchInputControl: UntypedFormControl;
    readonly chipsControl: UntypedFormControl;
    filteredItems$: Observable<PrizmMultiSelectItemWithChecked<T>[]>;
    selectedItems$: Observable<T[]>;
    readonly chipsSet: Map<string, T>;
    selectedItemsChips$: Observable<string[]>;
    fallbackValue: T[];
    filteredItems: PrizmMultiSelectItemWithChecked<T>[];
    private searchValue;
    readonly focused$$: Subject<boolean>;
    readonly focused$: Observable<boolean>;
    readonly opened$$: BehaviorSubject<boolean>;
    readonly opened$: Observable<boolean>;
    get empty(): boolean;
    constructor(options: PrizmMultiSelectOptions<T>, injector: Injector);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    protected initParentClickListener(): void;
    private initSelectedItemsObservables;
    private initFilteredItemsObservables;
    get nativeFocusableElement(): PrizmNativeFocusableElement | null;
    get focused(): boolean;
    clear(ev: MouseEvent): void;
    private isSelectAllItem;
    select(item: PrizmMultiSelectItemWithChecked<T>): void;
    safeOpenModal(): void;
    removeChip(str: string): void;
    trackBy(index: number): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputMultiSelectComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputMultiSelectComponent<any>, "prizm-input-multi-select", never, { "transformer": "transformer"; "items": "items"; "dropdownScroll": "dropdownScroll"; "dropdownStyles": "dropdownStyles"; "dropdownClasses": "dropdownClasses"; "icon": "icon"; "selectAllItem": "selectAllItem"; "searchable": "searchable"; "isChipsDeletable": "isChipsDeletable"; "minDropdownHeight": "minDropdownHeight"; "dropdownWidth": "dropdownWidth"; "maxDropdownHeight": "maxDropdownHeight"; "placeholder": "placeholder"; "searchMatcher": "searchMatcher"; "emptyContent": "emptyContent"; "stringify": "stringify"; "identityMatcher": "identityMatcher"; "valueTemplate": "valueTemplate"; }, {}, never, never, true, never>;
}
