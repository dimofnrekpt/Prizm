import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, TemplateRef } from '@angular/core';
import { PrizmOverlayService } from '../../../modules/overlay';
import { PolymorphContent } from '../../../directives';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmDropdownHostOptions } from './dropdown-host.options';
import { PrizmDropdownHostClasses, PrizmDropdownHostContext, PrizmDropdownHostCustomContext, PrizmDropdownHostStyles, PrizmDropdownHostWidth } from './models';
import { PrizmOverlayOutsidePlacement } from '../../../modules/overlay/models';
import { PrizmAbstractTestId } from '../../../abstract/interactive';
import { PrizmDropdownHostControlDirective } from './dropdown-host-control.directive';
import { PrizmZoneEventService } from '../../../directives/zone-event/zone-event.service';
import * as i0 from "@angular/core";
export declare class PrizmDropdownHostComponent extends PrizmAbstractTestId implements AfterViewInit {
    readonly prizmOverlayService: PrizmOverlayService;
    readonly zoneEventService: PrizmZoneEventService;
    readonly dropdownHostControlDirective: PrizmDropdownHostControlDirective | null;
    private readonly document;
    private readonly options;
    readonly el: ElementRef<HTMLElement>;
    private readonly cdRef;
    readonly injector: Injector;
    private readonly destroy$;
    content: PolymorphContent<PrizmDropdownHostContext>;
    prizmDropdownHostId: string;
    prizmDropdownCustomContext: PrizmDropdownHostCustomContext;
    delay: number;
    canOpen: boolean;
    closeByEsc: boolean;
    closeOnOutsideClick: boolean;
    prizmDropdownHost?: HTMLElement | null;
    set prizmDropdownHostWidth(width: PrizmDropdownHostWidth);
    get prizmDropdownHostWidth(): PrizmDropdownHostWidth;
    private _prizmDropdownHostWidth;
    readonly testId_ = "ui_dropdown_host";
    readonly itemForListener: Set<HTMLElement>;
    private destroyReCalc$;
    private _autoReposition;
    set autoReposition(state: boolean);
    get autoReposition(): boolean;
    private _placement;
    set placement(place: PrizmOverlayOutsidePlacement);
    get placement(): PrizmOverlayOutsidePlacement;
    set isOpen(state: boolean);
    get isOpen(): boolean;
    private lastEmittedState;
    dropdownStyles: PrizmDropdownHostStyles;
    dropdownClasses: PrizmDropdownHostClasses;
    temp: TemplateRef<HTMLDivElement>;
    readonly isOpenChange: EventEmitter<boolean>;
    private overlay;
    protected isOpen$: BehaviorSubject<boolean>;
    private readonly positionSource$;
    readonly position$: Observable<string>;
    private position;
    readonly wrapper_class = "prizm-overlay-dropdown-host no-overflow";
    contentBlockRef: ElementRef;
    constructor(prizmOverlayService: PrizmOverlayService, zoneEventService: PrizmZoneEventService, dropdownHostControlDirective: PrizmDropdownHostControlDirective | null, document: Document, options: PrizmDropdownHostOptions, el: ElementRef<HTMLElement>, cdRef: ChangeDetectorRef, injector: Injector, destroy$: PrizmDestroyService);
    closeIfNeed(): void;
    ngAfterViewInit(): void;
    updateWidth(): void;
    private initClickListener;
    private closeOverlay;
    private openOverlay;
    open(): void;
    close(): void;
    toggle(): void;
    private initOverlay;
    reCalculatePositions(timeout?: number): void;
    private initPositionListener;
    addListenerItems(el: HTMLElement): void;
    removeListenerItems(el: HTMLElement): void;
    outsideClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmDropdownHostComponent, [null, null, { optional: true; host: true; }, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmDropdownHostComponent, "prizm-dropdown-host", ["prizm-dropdown-host"], { "content": "content"; "prizmDropdownHostId": "prizmDropdownHostId"; "prizmDropdownCustomContext": "prizmDropdownCustomContext"; "delay": "delay"; "canOpen": "canOpen"; "closeByEsc": "closeByEsc"; "closeOnOutsideClick": "closeOnOutsideClick"; "prizmDropdownHost": "prizmDropdownHost"; "prizmDropdownHostWidth": "prizmDropdownHostWidth"; "autoReposition": "autoReposition"; "placement": "placement"; "isOpen": "isOpen"; "dropdownStyles": "dropdownStyles"; "dropdownClasses": "dropdownClasses"; }, { "isOpenChange": "isOpenChange"; }, never, ["*"], true, never>;
}
