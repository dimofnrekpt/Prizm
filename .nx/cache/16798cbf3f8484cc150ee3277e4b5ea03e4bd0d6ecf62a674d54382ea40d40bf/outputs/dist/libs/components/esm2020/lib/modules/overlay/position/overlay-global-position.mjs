import { PrizmOverlayInsidePlacement } from '../models';
import { setWidthHeight } from '../utils';
import { PrizmOverlayAbstractPosition } from './position';
export class PrizmOverlayGlobalPosition extends PrizmOverlayAbstractPosition {
    constructor(config) {
        super();
        this.updateConfig({
            ...{ placement: PrizmOverlayInsidePlacement.CENTER, width: 100, height: 100, offset: 0 },
            ...config,
        });
    }
    getPositions(hostEl, parent) {
        const host = hostEl?.getBoundingClientRect();
        const src = {
            width: parent?.offsetWidth ?? window['innerWidth'],
            height: parent?.offsetHeight ?? window['innerHeight'],
        };
        let { width: w, height: h } = this.config;
        w = setWidthHeight(src, host, 'width', w);
        h = setWidthHeight(src, host, 'height', h);
        const props = this.calc(this.config.placement, src, host);
        return {
            ...props,
            width: w,
            height: h,
            position: parent ? 'absolute' : 'fixed',
            extra: this.config.placement,
        };
    }
    calc(placement, src, host) {
        const [main, sub] = placement.split('');
        const result = {};
        if (main === 't') {
            result.top = this.config.offset;
        }
        if (main === 'b') {
            result.bottom = this.config.offset;
        }
        if ((main === 'l' || main === 'r' || main === 'c') && !sub) {
            result.top = (src.height - host.height) / 2;
        }
        if ((main === 't' || main === 'b' || main === 'c') && !sub) {
            result.left = (src.width - host.width) / 2;
        }
        if ((main === 'l' && !sub) || sub === 'l') {
            result.left = this.config.offset;
        }
        if ((main === 'r' && !sub) || sub === 'r') {
            result.right = this.config.offset;
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS1nbG9iYWwtcG9zaXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9tb2R1bGVzL292ZXJsYXkvcG9zaXRpb24vb3ZlcmxheS1nbG9iYWwtcG9zaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDMUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBaUIxRCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsNEJBQThEO0lBQzVHLFlBQVksTUFBd0M7UUFDbEQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxTQUFTLEVBQUUsMkJBQTJCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO1lBQ3hGLEdBQUcsTUFBTTtTQUNWLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsTUFBb0IsRUFBRSxNQUFvQjtRQUM1RCxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUscUJBQXFCLEVBQVMsQ0FBQztRQUNwRCxNQUFNLEdBQUcsR0FBRztZQUNWLEtBQUssRUFBRSxNQUFNLEVBQUUsV0FBVyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDbEQsTUFBTSxFQUFFLE1BQU0sRUFBRSxZQUFZLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQztTQUN0RCxDQUFDO1FBQ0YsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFMUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFRLENBQUMsQ0FBQztRQUNqRCxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQVEsQ0FBQyxDQUFDO1FBRWxELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFnQixFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNqRSxPQUFPO1lBQ0wsR0FBRyxLQUFLO1lBQ1IsS0FBSyxFQUFFLENBQUM7WUFDUixNQUFNLEVBQUUsQ0FBQztZQUNULFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTztZQUN2QyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTO1NBQzdCLENBQUM7SUFDSixDQUFDO0lBRU8sSUFBSSxDQUFDLFNBQXNDLEVBQUUsR0FBUSxFQUFFLElBQVM7UUFDdEUsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sTUFBTSxHQUFtQyxFQUFFLENBQUM7UUFFbEQsSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDakM7UUFDRCxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7WUFDaEIsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNwQztRQUNELElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzFELE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDN0M7UUFFRCxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMxRCxNQUFNLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDbEM7UUFDRCxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxHQUFHLEVBQUU7WUFDekMsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNuQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXptT3ZlcmxheUluc2lkZVBsYWNlbWVudCB9IGZyb20gJy4uL21vZGVscyc7XG5pbXBvcnQgeyBzZXRXaWR0aEhlaWdodCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IFByaXptT3ZlcmxheUFic3RyYWN0UG9zaXRpb24gfSBmcm9tICcuL3Bvc2l0aW9uJztcblxuaW50ZXJmYWNlIFByaXptT3ZlcmxheUdsb2JhbFBvc2l0aW9uQ29uZmlnIHtcbiAgcGxhY2VtZW50PzogUHJpem1PdmVybGF5SW5zaWRlUGxhY2VtZW50O1xuICBvZmZzZXQ/OiBudW1iZXI7XG4gIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyO1xuICBoZWlnaHQ/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbn1cblxuaW50ZXJmYWNlIE92ZXJsYXlPZmZzZXRQb3NpdGlvbiB7XG4gIHRvcDogbnVtYmVyO1xuICBib3R0b206IG51bWJlcjtcbiAgbGVmdDogbnVtYmVyO1xuICByaWdodDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUHJpem1PdmVybGF5R2xvYmFsUG9zaXRpb24gZXh0ZW5kcyBQcml6bU92ZXJsYXlBYnN0cmFjdFBvc2l0aW9uPFByaXptT3ZlcmxheUdsb2JhbFBvc2l0aW9uQ29uZmlnPiB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUHJpem1PdmVybGF5R2xvYmFsUG9zaXRpb25Db25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudXBkYXRlQ29uZmlnKHtcbiAgICAgIC4uLnsgcGxhY2VtZW50OiBQcml6bU92ZXJsYXlJbnNpZGVQbGFjZW1lbnQuQ0VOVEVSLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCwgb2Zmc2V0OiAwIH0sXG4gICAgICAuLi5jb25maWcsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UG9zaXRpb25zKGhvc3RFbD86IEhUTUxFbGVtZW50LCBwYXJlbnQ/OiBIVE1MRWxlbWVudCk6IGFueSB7XG4gICAgY29uc3QgaG9zdCA9IGhvc3RFbD8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYXMgYW55O1xuICAgIGNvbnN0IHNyYyA9IHtcbiAgICAgIHdpZHRoOiBwYXJlbnQ/Lm9mZnNldFdpZHRoID8/IHdpbmRvd1snaW5uZXJXaWR0aCddLFxuICAgICAgaGVpZ2h0OiBwYXJlbnQ/Lm9mZnNldEhlaWdodCA/PyB3aW5kb3dbJ2lubmVySGVpZ2h0J10sXG4gICAgfTtcbiAgICBsZXQgeyB3aWR0aDogdywgaGVpZ2h0OiBoIH0gPSB0aGlzLmNvbmZpZztcblxuICAgIHcgPSBzZXRXaWR0aEhlaWdodChzcmMsIGhvc3QsICd3aWR0aCcsIHcgYXMgYW55KTtcbiAgICBoID0gc2V0V2lkdGhIZWlnaHQoc3JjLCBob3N0LCAnaGVpZ2h0JywgaCBhcyBhbnkpO1xuXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLmNhbGModGhpcy5jb25maWcucGxhY2VtZW50IGFzIGFueSwgc3JjLCBob3N0KTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICB3aWR0aDogdyxcbiAgICAgIGhlaWdodDogaCxcbiAgICAgIHBvc2l0aW9uOiBwYXJlbnQgPyAnYWJzb2x1dGUnIDogJ2ZpeGVkJyxcbiAgICAgIGV4dHJhOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQsXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsYyhwbGFjZW1lbnQ6IFByaXptT3ZlcmxheUluc2lkZVBsYWNlbWVudCwgc3JjOiBhbnksIGhvc3Q6IGFueSk6IFBhcnRpYWw8T3ZlcmxheU9mZnNldFBvc2l0aW9uPiB7XG4gICAgY29uc3QgW21haW4sIHN1Yl0gPSBwbGFjZW1lbnQuc3BsaXQoJycpO1xuICAgIGNvbnN0IHJlc3VsdDogUGFydGlhbDxPdmVybGF5T2Zmc2V0UG9zaXRpb24+ID0ge307XG5cbiAgICBpZiAobWFpbiA9PT0gJ3QnKSB7XG4gICAgICByZXN1bHQudG9wID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAobWFpbiA9PT0gJ2InKSB7XG4gICAgICByZXN1bHQuYm90dG9tID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoKG1haW4gPT09ICdsJyB8fCBtYWluID09PSAncicgfHwgbWFpbiA9PT0gJ2MnKSAmJiAhc3ViKSB7XG4gICAgICByZXN1bHQudG9wID0gKHNyYy5oZWlnaHQgLSBob3N0LmhlaWdodCkgLyAyO1xuICAgIH1cblxuICAgIGlmICgobWFpbiA9PT0gJ3QnIHx8IG1haW4gPT09ICdiJyB8fCBtYWluID09PSAnYycpICYmICFzdWIpIHtcbiAgICAgIHJlc3VsdC5sZWZ0ID0gKHNyYy53aWR0aCAtIGhvc3Qud2lkdGgpIC8gMjtcbiAgICB9XG4gICAgaWYgKChtYWluID09PSAnbCcgJiYgIXN1YikgfHwgc3ViID09PSAnbCcpIHtcbiAgICAgIHJlc3VsdC5sZWZ0ID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoKG1haW4gPT09ICdyJyAmJiAhc3ViKSB8fCBzdWIgPT09ICdyJykge1xuICAgICAgcmVzdWx0LnJpZ2h0ID0gdGhpcy5jb25maWcub2Zmc2V0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==