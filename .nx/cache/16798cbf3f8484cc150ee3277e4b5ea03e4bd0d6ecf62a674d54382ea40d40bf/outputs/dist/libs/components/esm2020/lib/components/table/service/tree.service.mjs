import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { Compare } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
export class PrizmTableTreeService {
    constructor() {
        this.showDirectChildrenMap = new Map();
        this.showAllChildrenMap = new Map();
        this.changes$$ = new ReplaySubject(1);
        this.changes$ = this.changes$$.asObservable();
        this.nestedStructure = new Map();
    }
    canShowChild(idx) {
        return this.changes$.pipe(startWith(null), map(() => this.isChildrenOpened(idx)));
    }
    isChildrenOpened(idx) {
        let result = this.showDirectChildrenMap.get(idx);
        if (Compare.isNullish(result)) {
            const parents = this.findAllParents(idx);
            for (const parent of [idx, ...parents]) {
                const parentResult = this.showAllChildrenMap.get(parent);
                if (typeof parentResult === 'boolean') {
                    result = parentResult;
                    break;
                }
            }
        }
        return Boolean(result);
    }
    findAllParents(childIdx) {
        const result = [];
        const parent = this.nestedStructure.get(childIdx);
        if (Compare.isNullish(parent))
            return result;
        result.push(parent, ...this.findAllParents(parent));
        return result;
    }
    /**
     * flip nestedStructure to (parent: children[])
     * */
    flipNestedStructure(map = new Map()) {
        for (const [childIdx, parentIdx] of this.nestedStructure.entries()) {
            const setFromMap = map.get(parentIdx);
            const set = setFromMap ?? new Set();
            set.add(childIdx);
            if (!setFromMap)
                map.set(parentIdx, set);
        }
        return map;
    }
    findAllChildren(idx, flipped = this.flipNestedStructure()) {
        const allCurrentIdChildren = Array.from(flipped.get(idx) ?? []);
        return [
            ...allCurrentIdChildren,
            ...allCurrentIdChildren.reduce((base, idx) => {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                base.push(...this.findAllChildren(idx, flipped));
                return base;
            }, []),
        ];
    }
    addChildToParent(childIdx, parentIdx) {
        this.nestedStructure.set(childIdx, parentIdx);
    }
    showHideAllNested(idx, show) {
        this.showAllChildrenMap.set(idx, show);
    }
    showHideAll(show, idx) {
        let children;
        if (typeof idx === 'number') {
            children = [...this.findAllChildren(idx), idx];
        }
        else {
            children = [...this.showDirectChildrenMap.keys()];
        }
        for (const child of children) {
            this.showHideAllNested(child, show);
            this.showDirectChildrenMap.set(child, show);
        }
        this.changes$$.next(this.showDirectChildrenMap);
    }
    showAllChildren(idx) {
        this.showHideAll(true, idx);
    }
    hideAllChildren(idx) {
        this.showHideAll(false, idx);
    }
    showChildren(idx) {
        this.updateMap(idx, true);
    }
    hideChildren(idx) {
        this.updateMap(idx, false);
    }
    clear() {
        this.showDirectChildrenMap.clear();
        this.changes$$.next(this.showDirectChildrenMap);
    }
    toggleChildren(idx) {
        this.showDirectChildrenMap.get(idx) ? this.hideChildren(idx) : this.showChildren(idx);
    }
    updateMap(idx, value) {
        this.showDirectChildrenMap.set(idx, value);
        this.changes$$.next(this.showDirectChildrenMap);
    }
    init(idx) {
        this.showDirectChildrenMap.set(idx, null);
    }
}
PrizmTableTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTableTreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PrizmTableTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTableTreeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTableTreeService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy90YWJsZS9zZXJ2aWNlL3RyZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7O0FBRzVDLE1BQU0sT0FBTyxxQkFBcUI7SUFEbEM7UUFFa0IsMEJBQXFCLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7UUFDekQsdUJBQWtCLEdBQUcsSUFBSSxHQUFHLEVBQW1CLENBQUM7UUFDaEQsY0FBUyxHQUFHLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLGFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3hDLG9CQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWtCLENBQUM7S0FnSDlEO0lBL0dRLFlBQVksQ0FBQyxHQUFXO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3ZCLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDO0lBRU0sZ0JBQWdCLENBQUMsR0FBVztRQUNqQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxN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LENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBRU8sU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFjO1FBQzNDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxJQUFJLENBQUMsR0FBVztRQUNyQixJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDOztrSEFwSFUscUJBQXFCO3NIQUFyQixxQkFBcUI7MkZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29tcGFyZSB9IGZyb20gJ0Bwcml6bS11aS9oZWxwZXJzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFByaXptVGFibGVUcmVlU2VydmljZSB7XG4gIHB1YmxpYyByZWFkb25seSBzaG93RGlyZWN0Q2hpbGRyZW5NYXAgPSBuZXcgTWFwPG51bWJlciwgYm9vbGVhbiB8IG51bGw+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2hvd0FsbENoaWxkcmVuTWFwID0gbmV3IE1hcDxudW1iZXIsIGJvb2xlYW4+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2hhbmdlcyQkID0gbmV3IFJlcGxheVN1YmplY3QoMSk7XG4gIHB1YmxpYyByZWFkb25seSBjaGFuZ2VzJCA9IHRoaXMuY2hhbmdlcyQkLmFzT2JzZXJ2YWJsZSgpO1xuICBwcml2YXRlIHJlYWRvbmx5IG5lc3RlZFN0cnVjdHVyZSA9IG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCk7XG4gIHB1YmxpYyBjYW5TaG93Q2hpbGQoaWR4OiBudW1iZXIpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFuZ2VzJC5waXBlKFxuICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgbWFwKCgpID0+IHRoaXMuaXNDaGlsZHJlbk9wZW5lZChpZHgpKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgaXNDaGlsZHJlbk9wZW5lZChpZHg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCByZXN1bHQgPSB0aGlzLnNob3dEaXJlY3RDaGlsZHJlbk1hcC5nZXQoaWR4KTtcbiAgICBpZiAoQ29tcGFyZS5pc051bGxpc2gocmVzdWx0KSkge1xuICAgICAgY29uc3QgcGFyZW50cyA9IHRoaXMuZmluZEFsbFBhcmVudHMoaWR4KTtcbiAgICAgIGZvciAoY29uc3QgcGFyZW50IG9mIFtpZHgsIC4uLnBhcmVudHNdKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFJlc3VsdCA9IHRoaXMuc2hvd0FsbENoaWxkcmVuTWFwLmdldChwYXJlbnQpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmVudFJlc3VsdCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgcmVzdWx0ID0gcGFyZW50UmVzdWx0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBCb29sZWFuKHJlc3VsdCk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRBbGxQYXJlbnRzKGNoaWxkSWR4OiBudW1iZXIpOiBudW1iZXJbXSB7XG4gICAgY29uc3QgcmVzdWx0OiBudW1iZXJbXSA9IFtdO1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMubmVzdGVkU3RydWN0dXJlLmdldChjaGlsZElkeCk7XG4gICAgaWYgKENvbXBhcmUuaXNOdWxsaXNoKHBhcmVudCkpIHJldHVybiByZXN1bHQ7XG4gICAgcmVzdWx0LnB1c2gocGFyZW50LCAuLi50aGlzLmZpbmRBbGxQYXJlbnRzKHBhcmVudCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogZmxpcCBuZXN0ZWRTdHJ1Y3R1cmUgdG8gKHBhcmVudDogY2hpbGRyZW5bXSlcbiAgICogKi9cbiAgcHJpdmF0ZSBmbGlwTmVzdGVkU3RydWN0dXJlKG1hcCA9IG5ldyBNYXA8bnVtYmVyLCBTZXQ8bnVtYmVyPj4oKSk6IE1hcDxudW1iZXIsIFNldDxudW1iZXI+PiB7XG4gICAgZm9yIChjb25zdCBbY2hpbGRJZHgsIHBhcmVudElkeF0gb2YgdGhpcy5uZXN0ZWRTdHJ1Y3R1cmUuZW50cmllcygpKSB7XG4gICAgICBjb25zdCBzZXRGcm9tTWFwID0gbWFwLmdldChwYXJlbnRJZHgpO1xuICAgICAgY29uc3Qgc2V0ID0gc2V0RnJvbU1hcCA/PyBuZXcgU2V0KCk7XG4gICAgICBzZXQuYWRkKGNoaWxkSWR4KTtcbiAgICAgIGlmICghc2V0RnJvbU1hcCkgbWFwLnNldChwYXJlbnRJZHgsIHNldCk7XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG4gIH1cblxuICBwcml2YXRlIGZpbmRBbGxDaGlsZHJlbihpZHg6IG51bWJlciwgZmxpcHBlZCA9IHRoaXMuZmxpcE5lc3RlZFN0cnVjdHVyZSgpKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGFsbEN1cnJlbnRJZENoaWxkcmVuID0gQXJyYXkuZnJvbShmbGlwcGVkLmdldChpZHgpID8/IFtdKTtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uYWxsQ3VycmVudElkQ2hpbGRyZW4sXG4gICAgICAuLi5hbGxDdXJyZW50SWRDaGlsZHJlbi5yZWR1Y2UoKGJhc2UsIGlkeCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYmFzZS5wdXNoKC4uLnRoaXMuZmluZEFsbENoaWxkcmVuKGlkeCwgZmxpcHBlZCkpO1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgIH0sIFtdKSxcbiAgICBdO1xuICB9XG5cbiAgcHVibGljIGFkZENoaWxkVG9QYXJlbnQoY2hpbGRJZHg6IG51bWJlciwgcGFyZW50SWR4OiBudW1iZXIpIHtcbiAgICB0aGlzLm5lc3RlZFN0cnVjdHVyZS5zZXQoY2hpbGRJZHgsIHBhcmVudElkeCk7XG4gIH1cblxuICBwcml2YXRlIHNob3dIaWRlQWxsTmVzdGVkKGlkeDogbnVtYmVyLCBzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5zaG93QWxsQ2hpbGRyZW5NYXAuc2V0KGlkeCwgc2hvdyk7XG4gIH1cblxuICBwcml2YXRlIHNob3dIaWRlQWxsKHNob3c6IGJvb2xlYW4sIGlkeD86IG51bWJlciB8IG51bGwpIHtcbiAgICBsZXQgY2hpbGRyZW46IG51bWJlcltdO1xuICAgIGlmICh0eXBlb2YgaWR4ID09PSAnbnVtYmVyJykge1xuICAgICAgY2hpbGRyZW4gPSBbLi4udGhpcy5maW5kQWxsQ2hpbGRyZW4oaWR4KSwgaWR4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRyZW4gPSBbLi4udGhpcy5zaG93RGlyZWN0Q2hpbGRyZW5NYXAua2V5cygpXTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgdGhpcy5zaG93SGlkZUFsbE5lc3RlZChjaGlsZCwgc2hvdyk7XG4gICAgICB0aGlzLnNob3dEaXJlY3RDaGlsZHJlbk1hcC5zZXQoY2hpbGQsIHNob3cpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZXMkJC5uZXh0KHRoaXMuc2hvd0RpcmVjdENoaWxkcmVuTWFwKTtcbiAgfVxuXG4gIHB1YmxpYyBzaG93QWxsQ2hpbGRyZW4oaWR4PzogbnVtYmVyIHwgbnVsbCkge1xuICAgIHRoaXMuc2hvd0hpZGVBbGwodHJ1ZSwgaWR4KTtcbiAgfVxuXG4gIHB1YmxpYyBoaWRlQWxsQ2hpbGRyZW4oaWR4PzogbnVtYmVyIHwgbnVsbCkge1xuICAgIHRoaXMuc2hvd0hpZGVBbGwoZmFsc2UsIGlkeCk7XG4gIH1cblxuICBwdWJsaWMgc2hvd0NoaWxkcmVuKGlkeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVNYXAoaWR4LCB0cnVlKTtcbiAgfVxuXG4gIHB1YmxpYyBoaWRlQ2hpbGRyZW4oaWR4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZU1hcChpZHgsIGZhbHNlKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLnNob3dEaXJlY3RDaGlsZHJlbk1hcC5jbGVhcigpO1xuICAgIHRoaXMuY2hhbmdlcyQkLm5leHQodGhpcy5zaG93RGlyZWN0Q2hpbGRyZW5NYXApO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZUNoaWxkcmVuKGlkeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGlyZWN0Q2hpbGRyZW5NYXAuZ2V0KGlkeCkgPyB0aGlzLmhpZGVDaGlsZHJlbihpZHgpIDogdGhpcy5zaG93Q2hpbGRyZW4oaWR4KTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTWFwKGlkeDogbnVtYmVyLCB2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2hvd0RpcmVjdENoaWxkcmVuTWFwLnNldChpZHgsIHZhbHVlKTtcbiAgICB0aGlzLmNoYW5nZXMkJC5uZXh0KHRoaXMuc2hvd0RpcmVjdENoaWxkcmVuTWFwKTtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KGlkeDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zaG93RGlyZWN0Q2hpbGRyZW5NYXAuc2V0KGlkeCwgbnVsbCk7XG4gIH1cbn1cbiJdfQ==