import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, Inject, Input, Output, QueryList, } from '@angular/core';
import { isDataSource } from '@angular/cdk/collections';
import { prizmDefaultProp } from '@prizm-ui/core';
import { PrizmDestroyService, prizmEmptyQueryList } from '@prizm-ui/helpers';
import { BehaviorSubject, isObservable } from 'rxjs';
import { switchMap, takeUntil, tap } from 'rxjs/operators';
import { PrizmTableEmptyDirective } from '../directives/empty.directive';
import { PrizmTableLoadingDirective } from '../directives/loading.directive';
import { PrizmRowDirective } from '../directives/row.directive';
import { PrizmTableDirective } from '../directives/table.directive';
import { PrizmTableTreeLoadingDirective } from '../directives/tree-loading.directive';
import { PRIZM_TABLE_PROVIDER } from '../providers/table.provider';
import { PrizmTableSorterService } from '../service';
import { PrizmTableTreeService } from '../service/tree.service';
import { PrizmTrComponent } from '../tr/tr.component';
import * as i0 from "@angular/core";
import * as i1 from "../service";
import * as i2 from "../service/tree.service";
import * as i3 from "@prizm-ui/helpers";
import * as i4 from "@angular/common";
import * as i5 from "../../../directives/polymorph/directives/outlet";
import * as i6 from "../../icon/icon.component";
import * as i7 from "../directives/row-init.directive";
import * as i8 from "../tr/tr.directive";
import * as i9 from "../directives/table.directive";
export class PrizmTbodyComponent {
    /**
     * The table's source of data, which can be provided in three ways (in order of complexity):
     *   - Simple data array (each object represents one table row)
     *   - Stream that emits a data array each time the array changes
     *   - `DataSource` object that implements the connect/disconnect interface.
     *
     * If the data array reference is changed, the table
     * will automatically trigger an update to the rows.
     * Mutation of an array (push, unshift) will not.
     *
     * When providing an Observable stream, the table will trigger an update automatically when the
     * stream emits a new array of data.
     *
     * Finally, when providing a `DataSource` object, the table will use the Observable stream
     * provided by the DataSource's `connect` function and trigger updates when that stream emits new data array
     * values. During the table's `ngOnDestroy` or when the data source is removed from the table, the
     * table will call the DataSource's `disconnect` function.
     *
     * For a `DataSource`-s we skip internal sorting, so that users can use their own sorting mechanisms
     * i.e. server-side sorting can use different data-base's collation strategies.
     * On the other hand users can connect `sorterService` to `PrizmTableDataSource`:
     *
     * @example
     * ```
     *  \@ViewChild(PrizmTableDirective) table;
     *  \@ViewChild(PrizmPaginatorComponent) paginator;
     *
     *  ngAfterViewInit() {
     *    this.dataSource = new PrizmTableDataSource([]);
     *    this.dataSource.paginator = this.paginator;
     *    this.dataSource.sorter = this.table.sorterService;
     *  }
     * ```
     */
    set data(dataSource) {
        if (this._dataSource !== dataSource) {
            this._switchDataSource(dataSource ?? []);
        }
    }
    get data() {
        return this._dataSource;
    }
    /**
     * Currently displayed set of data.
     */
    get view() {
        return this._data;
    }
    /**
     * Currently displayed set of data.
     *
     * @deprecated
     */
    get sorted() {
        return this._data;
    }
    constructor(table, sorterService, tableTreeService, destroy$, changeDetectorRef) {
        this.table = table;
        this.sorterService = sorterService;
        this.tableTreeService = tableTreeService;
        this.destroy$ = destroy$;
        this.changeDetectorRef = changeDetectorRef;
        this.heading = ``;
        this.open = true;
        this.openChange = new EventEmitter();
        this.rows = prizmEmptyQueryList();
        this.columnsCount = 0;
        /**
         * Stream containing the latest information on what rows are being displayed on screen.
         *
         * @private Not used internally, just needed by `CollectionViewer` interface.
         */
        this.viewChange = new BehaviorSubject({
            start: 0,
            end: Number.MAX_VALUE,
        });
    }
    ngAfterViewInit() {
        this.table.tableService.tableMaxColspan$
            .pipe(takeUntil(this.destroy$))
            .subscribe((columnsCount) => {
            this.columnsCount = columnsCount;
            this.changeDetectorRef.detectChanges();
        });
    }
    ngOnDestroy() {
        if (isDataSource(this.data)) {
            this.data.disconnect(this);
        }
    }
    onClick() {
        this.open = !this.open;
        this.openChange.emit(this.open);
    }
    /**
     * Switch to the provided data source by resetting the data and unsubscribing from the current.
     */
    _switchDataSource(dataSource) {
        this._data = [];
        // Disconnect from previous data source if needed
        if (isDataSource(this.data)) {
            this.data.disconnect(this);
        }
        this._dataSource = dataSource;
        let dataStream;
        if (isDataSource(dataSource)) {
            dataStream = dataSource.connect(this);
        }
        else if (isObservable(dataSource)) {
            dataStream = dataSource.pipe(switchMap(data => this.sorterService.sort$(data)));
        }
        else if (Array.isArray(dataSource)) {
            dataStream = this.sorterService.sort$(dataSource);
        }
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        this.renderData$ = dataStream.pipe(tap(data => {
            this._data = data || [];
        }));
    }
    sortChildren(children$) {
        return children$.pipe(switchMap(children => this.sorterService.sort$(children)));
    }
}
PrizmTbodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTbodyComponent, deps: [{ token: forwardRef(() => PrizmTableDirective) }, { token: i1.PrizmTableSorterService }, { token: i2.PrizmTableTreeService }, { token: i3.PrizmDestroyService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PrizmTbodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmTbodyComponent, selector: "[prizmTbody] ", inputs: { data: "data", heading: "heading", open: "open" }, outputs: { openChange: "openChange" }, providers: PRIZM_TABLE_PROVIDER, queries: [{ propertyName: "loadingTemplate", first: true, predicate: PrizmTableLoadingDirective, descendants: true }, { propertyName: "emptyTemplate", first: true, predicate: PrizmTableEmptyDirective, descendants: true }, { propertyName: "treeLoadingTemplate", first: true, predicate: PrizmTableTreeLoadingDirective, descendants: true }, { propertyName: "row", first: true, predicate: i0.forwardRef(function () { return PrizmRowDirective; }), descendants: true }, { propertyName: "rows", predicate: i0.forwardRef(function () { return PrizmTrComponent; }) }], ngImport: i0, template: "<ng-content></ng-content>\n<tr *ngIf=\"heading\">\n  <th class=\"heading\" [colSpan]=\"columnsCount\">\n    <div class=\"heading__container\">\n      <prizm-icon\n        class=\"heading__icon\"\n        [class.heading__icon_expanded]=\"open\"\n        (click)=\"onClick()\"\n        iconClass=\"arrows-chevron-right\"\n      ></prizm-icon>\n      <span class=\"heading__content\">\n        <ng-container *polymorphOutlet=\"heading as text\">{{ text }}</ng-container>\n      </span>\n    </div>\n  </th>\n</tr>\n\n<ng-container *ngIf=\"open && row\">\n  <ng-container *ngIf=\"renderData$ | async as data; else loadingWrapperTemplate\">\n    <ng-container *ngIf=\"!!data?.length; else emptyWrapperTemplate\">\n      <ng-template\n        *ngFor=\"\n          let item of data;\n          index as index;\n          odd as odd;\n          even as even;\n          first as first;\n          last as last;\n          count as count;\n          trackBy: row.prizmRowTrackBy\n        \"\n        [template]=\"templateRowElement\"\n        [context]=\"\n          $any({\n            item: item,\n            index: index,\n            rowIdx: index,\n            odd: odd,\n            even: even,\n            getRowId: row.prizmRowGetRowId,\n            first: first,\n            last: last,\n            count: count,\n            deepLevel: 0\n          })\n        \"\n        prizmTableRowInit\n      ></ng-template>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingWrapperTemplate>\n  <ng-container *ngTemplateOutlet=\"loadingTemplate?.template || loadingWrapperTemplate\"></ng-container>\n\n  <ng-template #loadingWrapperTemplate>\n    <tr>\n      <td [colSpan]=\"columnsCount\">Loading...</td>\n    </tr>\n  </ng-template>\n</ng-template>\n\n<ng-template #emptyWrapperTemplate>\n  <ng-container *ngTemplateOutlet=\"emptyTemplate?.template || emptyInnerTemplate\"></ng-container>\n\n  <ng-template #emptyInnerTemplate>\n    <tr class=\"empty-row\">\n      <td [colSpan]=\"columnsCount\">\u2014</td>\n    </tr>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  #templateRowElement\n  let-item=\"item\"\n  let-index=\"index\"\n  let-odd=\"odd\"\n  let-even=\"even\"\n  let-first=\"first\"\n  let-last=\"last\"\n  let-count=\"count\"\n  let-deepLevel=\"deepLevel\"\n  let-parentItem=\"parentItem\"\n  let-parentIdx=\"parentIdx\"\n  let-rowIdx=\"rowIdx\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"$any(row?.template)\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: item,\n      rowIdx: rowIdx,\n      parentIdx: parentIdx,\n      parentItem: parentItem,\n      index: index,\n      odd: odd,\n      item: item,\n      even: even,\n      deepLevel: deepLevel,\n      first: first,\n      last: last,\n      count: count\n    }\"\n  ></ng-container>\n\n  <ng-container *ngIf=\"tableTreeService.canShowChild(index) | async\">\n    <ng-template #treeLoadingTemplateRef>\n      <ng-container\n        [ngTemplateOutlet]=\"treeLoadingTemplate?.template || defaultTreeLoading\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          parentIdx: index,\n          parentItem: item,\n          deepLevel: deepLevel,\n          first: first,\n          last: last,\n          count: count\n        }\"\n      >\n      </ng-container>\n      <ng-template #defaultTreeLoading>\n        <tr>\n          <td>Loading...</td>\n        </tr>\n      </ng-template>\n    </ng-template>\n\n    <ng-container\n      *ngIf=\"\n        row?.prizmRowGetChildren && item\n          | prizmCallFunc : $any(row?.prizmRowGetChildren)\n          | prizmCallFunc : sortChildren\n          | async as children;\n        else treeLoadingTemplateRef\n      \"\n    >\n      <ng-template\n        *ngFor=\"\n          let childItem of $any(children);\n          index as childIndex;\n          odd as childOdd;\n          even as childEven;\n          first as childFirst;\n          last as childLast;\n          count as childCount;\n          trackBy: $any(row?.prizmRowTrackBy)\n        \"\n        [template]=\"templateRowElement\"\n        [context]=\"\n          $any({\n            item: childItem,\n            rowIdx: childIndex,\n            parentIdx: index,\n            getRowId: $any(row?.prizmRowGetRowId),\n            parentItem: item,\n            deepLevel: (deepLevel ?? 0) + 1,\n            first: childFirst,\n            last: childLast,\n            count: childCount + count\n          })\n        \"\n        prizmTableRowInit\n      >\n      </ng-template>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-content select=\"[footer]\"></ng-content>\n", styles: [":host{font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-secondary);font-weight:400}:host .heading{padding:0;border:1px solid var(--prizm-v3-table-stroke-cell-default);border-top:none}:host .heading__container{height:100%;width:100%;display:flex;align-items:center;font-weight:400}:host .heading__icon{height:24px;width:24px;margin:0 4px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-button-secondary-solid-default);cursor:pointer;transition:.4s}:host .heading__icon_expanded{transform:rotate(90deg)}:host .heading__content{height:100%;display:flex;align-items:center;justify-content:flex-start;flex:1}.empty-row td{border:1px solid var(--prizm-v3-table-stroke-cell-default);border-top:transparent}:host-context([data-size=\"xs\"]){font-size:12px;line-height:12px}:host-context([data-size=\"xs\"]) .heading,:host-context([data-size=\"xs\"]) .empty-row{height:16px}:host-context([data-size=\"s\"]) .heading,:host-context([data-size=\"s\"]) .empty-row{height:24px}:host-context([data-size=\"m\"]) .heading,:host-context([data-size=\"m\"]) .empty-row{height:32px}:host-context([data-size=\"l\"]) .heading,:host-context([data-size=\"l\"]) .empty-row{height:40px}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i5.PolymorphOutletDirective, selector: "[polymorphOutlet]", inputs: ["polymorphOutlet", "polymorphOutletContext", "polymorphOutletInjector"] }, { kind: "component", type: i6.PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }, { kind: "directive", type: i7.PrizmTableRowInitDirective, selector: "ng-template[prizmTableRowInit]", inputs: ["context", "template"] }, { kind: "directive", type: i8.PrizmTrDirective, selector: "tr:not([prizmTr])" }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i3.PrizmCallFuncPipe, name: "prizmCallFunc" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmTbodyComponent.prototype, "heading", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmTbodyComponent.prototype, "open", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTbodyComponent, decorators: [{
            type: Component,
            args: [{ selector: `[prizmTbody] `, changeDetection: ChangeDetectionStrategy.OnPush, providers: PRIZM_TABLE_PROVIDER, template: "<ng-content></ng-content>\n<tr *ngIf=\"heading\">\n  <th class=\"heading\" [colSpan]=\"columnsCount\">\n    <div class=\"heading__container\">\n      <prizm-icon\n        class=\"heading__icon\"\n        [class.heading__icon_expanded]=\"open\"\n        (click)=\"onClick()\"\n        iconClass=\"arrows-chevron-right\"\n      ></prizm-icon>\n      <span class=\"heading__content\">\n        <ng-container *polymorphOutlet=\"heading as text\">{{ text }}</ng-container>\n      </span>\n    </div>\n  </th>\n</tr>\n\n<ng-container *ngIf=\"open && row\">\n  <ng-container *ngIf=\"renderData$ | async as data; else loadingWrapperTemplate\">\n    <ng-container *ngIf=\"!!data?.length; else emptyWrapperTemplate\">\n      <ng-template\n        *ngFor=\"\n          let item of data;\n          index as index;\n          odd as odd;\n          even as even;\n          first as first;\n          last as last;\n          count as count;\n          trackBy: row.prizmRowTrackBy\n        \"\n        [template]=\"templateRowElement\"\n        [context]=\"\n          $any({\n            item: item,\n            index: index,\n            rowIdx: index,\n            odd: odd,\n            even: even,\n            getRowId: row.prizmRowGetRowId,\n            first: first,\n            last: last,\n            count: count,\n            deepLevel: 0\n          })\n        \"\n        prizmTableRowInit\n      ></ng-template>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingWrapperTemplate>\n  <ng-container *ngTemplateOutlet=\"loadingTemplate?.template || loadingWrapperTemplate\"></ng-container>\n\n  <ng-template #loadingWrapperTemplate>\n    <tr>\n      <td [colSpan]=\"columnsCount\">Loading...</td>\n    </tr>\n  </ng-template>\n</ng-template>\n\n<ng-template #emptyWrapperTemplate>\n  <ng-container *ngTemplateOutlet=\"emptyTemplate?.template || emptyInnerTemplate\"></ng-container>\n\n  <ng-template #emptyInnerTemplate>\n    <tr class=\"empty-row\">\n      <td [colSpan]=\"columnsCount\">\u2014</td>\n    </tr>\n  </ng-template>\n</ng-template>\n\n<ng-template\n  #templateRowElement\n  let-item=\"item\"\n  let-index=\"index\"\n  let-odd=\"odd\"\n  let-even=\"even\"\n  let-first=\"first\"\n  let-last=\"last\"\n  let-count=\"count\"\n  let-deepLevel=\"deepLevel\"\n  let-parentItem=\"parentItem\"\n  let-parentIdx=\"parentIdx\"\n  let-rowIdx=\"rowIdx\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"$any(row?.template)\"\n    [ngTemplateOutletContext]=\"{\n      $implicit: item,\n      rowIdx: rowIdx,\n      parentIdx: parentIdx,\n      parentItem: parentItem,\n      index: index,\n      odd: odd,\n      item: item,\n      even: even,\n      deepLevel: deepLevel,\n      first: first,\n      last: last,\n      count: count\n    }\"\n  ></ng-container>\n\n  <ng-container *ngIf=\"tableTreeService.canShowChild(index) | async\">\n    <ng-template #treeLoadingTemplateRef>\n      <ng-container\n        [ngTemplateOutlet]=\"treeLoadingTemplate?.template || defaultTreeLoading\"\n        [ngTemplateOutletContext]=\"{\n          item: item,\n          parentIdx: index,\n          parentItem: item,\n          deepLevel: deepLevel,\n          first: first,\n          last: last,\n          count: count\n        }\"\n      >\n      </ng-container>\n      <ng-template #defaultTreeLoading>\n        <tr>\n          <td>Loading...</td>\n        </tr>\n      </ng-template>\n    </ng-template>\n\n    <ng-container\n      *ngIf=\"\n        row?.prizmRowGetChildren && item\n          | prizmCallFunc : $any(row?.prizmRowGetChildren)\n          | prizmCallFunc : sortChildren\n          | async as children;\n        else treeLoadingTemplateRef\n      \"\n    >\n      <ng-template\n        *ngFor=\"\n          let childItem of $any(children);\n          index as childIndex;\n          odd as childOdd;\n          even as childEven;\n          first as childFirst;\n          last as childLast;\n          count as childCount;\n          trackBy: $any(row?.prizmRowTrackBy)\n        \"\n        [template]=\"templateRowElement\"\n        [context]=\"\n          $any({\n            item: childItem,\n            rowIdx: childIndex,\n            parentIdx: index,\n            getRowId: $any(row?.prizmRowGetRowId),\n            parentItem: item,\n            deepLevel: (deepLevel ?? 0) + 1,\n            first: childFirst,\n            last: childLast,\n            count: childCount + count\n          })\n        \"\n        prizmTableRowInit\n      >\n      </ng-template>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-content select=\"[footer]\"></ng-content>\n", styles: [":host{font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-secondary);font-weight:400}:host .heading{padding:0;border:1px solid var(--prizm-v3-table-stroke-cell-default);border-top:none}:host .heading__container{height:100%;width:100%;display:flex;align-items:center;font-weight:400}:host .heading__icon{height:24px;width:24px;margin:0 4px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-button-secondary-solid-default);cursor:pointer;transition:.4s}:host .heading__icon_expanded{transform:rotate(90deg)}:host .heading__content{height:100%;display:flex;align-items:center;justify-content:flex-start;flex:1}.empty-row td{border:1px solid var(--prizm-v3-table-stroke-cell-default);border-top:transparent}:host-context([data-size=\"xs\"]){font-size:12px;line-height:12px}:host-context([data-size=\"xs\"]) .heading,:host-context([data-size=\"xs\"]) .empty-row{height:16px}:host-context([data-size=\"s\"]) .heading,:host-context([data-size=\"s\"]) .empty-row{height:24px}:host-context([data-size=\"m\"]) .heading,:host-context([data-size=\"m\"]) .empty-row{height:32px}:host-context([data-size=\"l\"]) .heading,:host-context([data-size=\"l\"]) .empty-row{height:40px}\n"] }]
        }], ctorParameters: function () { return [{ type: i9.PrizmTableDirective, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => PrizmTableDirective)]
                }] }, { type: i1.PrizmTableSorterService }, { type: i2.PrizmTableTreeService }, { type: i3.PrizmDestroyService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{
                type: Input
            }], heading: [{
                type: Input
            }], open: [{
                type: Input
            }], openChange: [{
                type: Output
            }], loadingTemplate: [{
                type: ContentChild,
                args: [PrizmTableLoadingDirective]
            }], emptyTemplate: [{
                type: ContentChild,
                args: [PrizmTableEmptyDirective]
            }], treeLoadingTemplate: [{
                type: ContentChild,
                args: [PrizmTableTreeLoadingDirective]
            }], row: [{
                type: ContentChild,
                args: [forwardRef(() => PrizmRowDirective)]
            }], rows: [{
                type: ContentChildren,
                args: [forwardRef(() => PrizmTrComponent)]
            }] } });
//# sourceMappingURL=data:application/json;base64,