import { InjectionToken } from '@angular/core';
import { PRIZM_DEFAULT_TREE_CONTROLLER, PRIZM_TREE_ITEM_CONTENT } from './tree.constants';
export const PRIZM_TREE_ACCESSOR = new InjectionToken('Controller for tracking value - PrizmTreeItemComponent pairs');
export const PRIZM_TREE_CONTROLLER = new InjectionToken('Controller for expanding the tree', {
    factory: () => PRIZM_DEFAULT_TREE_CONTROLLER,
});
export const PRIZM_TREE_NODE = new InjectionToken('A node of a tree view');
export const PRIZM_TREE_LOADING = new InjectionToken('A tree node placeholder for loading', {
    factory: () => ({}),
});
export const PRIZM_TREE_START = new InjectionToken('A tree node starting point');
export const PRIZM_TREE_LOADER = new InjectionToken('A service to load tree progressively');
export const PRIZM_TREE_CONTENT = new InjectionToken('Content for a tree item', {
    factory: () => PRIZM_TREE_ITEM_CONTENT,
});
export const PRIZM_TREE_LEVEL = new InjectionToken('Nesting level of current TreeView node', {
    factory: () => -1,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50b2tlbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3RyZWUvbWlzYy90cmVlLnRva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBUTFGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUNuRCw4REFBOEQsQ0FDL0QsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNyRCxtQ0FBbUMsRUFDbkM7SUFDRSxPQUFPLEVBQUUsR0FBd0IsRUFBRSxDQUFDLDZCQUE2QjtDQUNsRSxDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUUzRSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxxQ0FBcUMsRUFBRTtJQUMxRixPQUFPLEVBQUUsR0FBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7Q0FDN0IsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQUMsNEJBQTRCLENBQUMsQ0FBQztBQUVqRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsc0NBQXNDLENBQ3ZDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGNBQWMsQ0FDbEQseUJBQXlCLEVBQ3pCO0lBQ0UsT0FBTyxFQUFFLEdBQTJDLEVBQUUsQ0FBQyx1QkFBdUI7Q0FDL0UsQ0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQVMsd0NBQXdDLEVBQUU7SUFDbkcsT0FBTyxFQUFFLEdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMxQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9seW1vcnBoQ29udGVudCB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvcG9seW1vcnBoJztcbmltcG9ydCB7IFBSSVpNX0RFRkFVTFRfVFJFRV9DT05UUk9MTEVSLCBQUklaTV9UUkVFX0lURU1fQ09OVEVOVCB9IGZyb20gJy4vdHJlZS5jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgUHJpem1UcmVlQWNjZXNzb3IsXG4gIFByaXptVHJlZUNvbnRyb2xsZXIsXG4gIFByaXptVHJlZUl0ZW1Db250ZXh0LFxuICBQcml6bVRyZWVMb2FkZXIsXG59IGZyb20gJy4vdHJlZS5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNvbnN0IFBSSVpNX1RSRUVfQUNDRVNTT1IgPSBuZXcgSW5qZWN0aW9uVG9rZW48UHJpem1UcmVlQWNjZXNzb3I8dW5rbm93bj4+KFxuICAnQ29udHJvbGxlciBmb3IgdHJhY2tpbmcgdmFsdWUgLSBQcml6bVRyZWVJdGVtQ29tcG9uZW50IHBhaXJzJ1xuKTtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX1RSRUVfQ09OVFJPTExFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxQcml6bVRyZWVDb250cm9sbGVyPihcbiAgJ0NvbnRyb2xsZXIgZm9yIGV4cGFuZGluZyB0aGUgdHJlZScsXG4gIHtcbiAgICBmYWN0b3J5OiAoKTogUHJpem1UcmVlQ29udHJvbGxlciA9PiBQUklaTV9ERUZBVUxUX1RSRUVfQ09OVFJPTExFUixcbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX1RSRUVfTk9ERSA9IG5ldyBJbmplY3Rpb25Ub2tlbignQSBub2RlIG9mIGEgdHJlZSB2aWV3Jyk7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9UUkVFX0xPQURJTkcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0EgdHJlZSBub2RlIHBsYWNlaG9sZGVyIGZvciBsb2FkaW5nJywge1xuICBmYWN0b3J5OiAoKTogdW5rbm93biA9PiAoe30pLFxufSk7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9UUkVFX1NUQVJUID0gbmV3IEluamVjdGlvblRva2VuKCdBIHRyZWUgbm9kZSBzdGFydGluZyBwb2ludCcpO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fVFJFRV9MT0FERVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48UHJpem1UcmVlTG9hZGVyPHVua25vd24+PihcbiAgJ0Egc2VydmljZSB0byBsb2FkIHRyZWUgcHJvZ3Jlc3NpdmVseSdcbik7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9UUkVFX0NPTlRFTlQgPSBuZXcgSW5qZWN0aW9uVG9rZW48UG9seW1vcnBoQ29udGVudDxQcml6bVRyZWVJdGVtQ29udGV4dD4+KFxuICAnQ29udGVudCBmb3IgYSB0cmVlIGl0ZW0nLFxuICB7XG4gICAgZmFjdG9yeTogKCk6IFBvbHltb3JwaENvbnRlbnQ8UHJpem1UcmVlSXRlbUNvbnRleHQ+ID0+IFBSSVpNX1RSRUVfSVRFTV9DT05URU5ULFxuICB9XG4pO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fVFJFRV9MRVZFTCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxudW1iZXI+KCdOZXN0aW5nIGxldmVsIG9mIGN1cnJlbnQgVHJlZVZpZXcgbm9kZScsIHtcbiAgZmFjdG9yeTogKCk6IG51bWJlciA9PiAtMSxcbn0pO1xuIl19