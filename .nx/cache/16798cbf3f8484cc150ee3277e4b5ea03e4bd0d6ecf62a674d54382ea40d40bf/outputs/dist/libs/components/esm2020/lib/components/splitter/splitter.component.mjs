import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { asyncScheduler, BehaviorSubject, fromEvent, merge } from 'rxjs';
import { map, observeOn, startWith, switchMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';
import { PrizmDestroyService, prizmEmptyQueryList } from '@prizm-ui/helpers';
import { PrizmSplitterGutterComponent } from './gutter/gutter.component';
import { PrizmSplitterAreaComponent } from './area/area.component';
import { PrizmSplitterService } from './splitter.service';
import { PrizmSplitterCustomGutterDirective } from './custom-gutter.directive';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { CommonModule } from '@angular/common';
import { ResizeObserverModule } from '@ng-web-apis/resize-observer';
import * as i0 from "@angular/core";
import * as i1 from "@prizm-ui/helpers";
import * as i2 from "./splitter.service";
import * as i3 from "@angular/common";
export class PrizmSplitterComponent extends PrizmAbstractTestId {
    get gutterElementSize() {
        return this.customGutter ? this.customGutter.size : 8;
    }
    constructor(cdr, destroy$, splitterService) {
        super();
        this.cdr = cdr;
        this.destroy$ = destroy$;
        this.splitterService = splitterService;
        this.orientation = 'horizontal';
        this.areasSizeChange = new EventEmitter();
        this.areasSplitStart = new EventEmitter();
        this.areasSplitEnd = new EventEmitter();
        this.splitterAreaQueryList = prizmEmptyQueryList();
        this.splitterGutterQueryList = prizmEmptyQueryList();
        this.testId_ = 'ui_splitter';
        this.guttersData = [];
        this.containerSize$$ = new BehaviorSubject(0);
        this.lastGap = 0;
    }
    ngAfterContentInit() {
        this.areas$ = merge(this.splitterAreaQueryList.changes.pipe(startWith(this.splitterAreaQueryList), map(ql => ql.toArray())), this.splitterService.areaInputSizeChange$$.pipe(map(() => this.splitterAreaQueryList.toArray()))).pipe(map(areas => areas.filter(area => !area.hidden)), observeOn(asyncScheduler));
        this.areas$.pipe(takeUntil(this.destroy$)).subscribe(areas => {
            const gap = ((areas.length - 1) * this.gutterElementSize) / areas.length;
            if (gap !== this.lastGap) {
                areas.forEach(area => area.setCurrentSizeWithCalc(gap));
            }
            this.lastGap = gap;
            this.guttersData = [];
            areas.forEach((area, index) => {
                area.order = index;
                if (index < areas.length - 1) {
                    this.guttersData.push({ areaBefore: index, areaAfter: index + 1, order: index + 1 });
                }
            });
            this.cdr.markForCheck();
        });
        this.splitterService.areaInputSizeChange$$
            .pipe(withLatestFrom(this.areas$), takeUntil(this.destroy$))
            .subscribe(([changedArea, areas]) => {
            const gap = ((areas.length - 1) * this.gutterElementSize) / areas.length;
            changedArea.setCurrentSizeWithCalc(gap);
            this.cdr.markForCheck();
        });
    }
    ngAfterViewInit() {
        const guttersComponents$ = this.splitterGutterQueryList.changes.pipe(startWith(this.splitterGutterQueryList), map(ql => ql.toArray()));
        guttersComponents$
            .pipe(switchMap(gutters => merge(...gutters.map(gutter => {
            const elem = gutter.elementRef.nativeElement;
            return fromEvent(elem, 'pointerdown').pipe(withLatestFrom(this.areas$), switchMap(([event, areas]) => {
                event.preventDefault();
                elem.setPointerCapture(event.pointerId);
                const containerBCR = this.containerElement.nativeElement.getBoundingClientRect();
                const containerSize = this.isHorizontal ? containerBCR.width : containerBCR.height;
                const guttersSize = this.splitterGutterQueryList.length * this.gutterElementSize;
                const guttersGapInPx = this.splitterService.mathOperation(guttersSize, areas.length, '/');
                const guttersGapInPercent = this.splitterService.mathOperation(guttersGapInPx, containerSize, '/') * 100;
                const guttersBefore = gutter.order - 1;
                const guttersAfter = gutters.length - gutter.order;
                const areasBefore = areas
                    .filter(area => area.order < gutter.order)
                    .map(area => this.getAreaRealSizes(area, containerSize, guttersGapInPercent));
                const areasAfter = areas
                    .filter(area => area.order >= gutter.order)
                    .map(area => this.getAreaRealSizes(area, containerSize, guttersGapInPercent));
                const min = this.splitterService.mathOperation(this.isHorizontal ? containerBCR.left : containerBCR.top, this.splitterService.mathOperation(this.gutterElementSize, guttersBefore, '*'), '+');
                const max = this.splitterService.mathOperation(this.isHorizontal ? containerBCR.right : containerBCR.bottom, this.gutterElementSize * (guttersAfter + 1), '-');
                const splitterBCR = elem.getBoundingClientRect();
                const offset = {
                    left: this.splitterService.mathOperation(event.clientX, splitterBCR.left, '-'),
                    top: this.splitterService.mathOperation(event.clientY, splitterBCR.top, '-'),
                };
                gutter.position = this.isHorizontal
                    ? this.splitterService.mathOperation(event.clientX, offset.left, '-')
                    : this.splitterService.mathOperation(event.clientY, offset.top, '-');
                this.areasSplitStart.emit(this.getAreasSize([...areasBefore, ...areasAfter], containerSize, containerSize - guttersSize));
                return fromEvent(elem, 'pointermove').pipe(map(event => {
                    event.preventDefault();
                    return {
                        gutter,
                        event,
                        offset,
                        min,
                        max,
                        areasBefore,
                        areasAfter,
                        containerSize,
                        guttersSize,
                    };
                }), takeUntil(merge(fromEvent(document, 'pointerup'), fromEvent(elem, 'pointercancel')).pipe(tap(event => {
                    this.areasSplitEnd.emit(this.getAreasSize([...areasBefore, ...areasAfter], containerSize, containerSize - guttersSize));
                }))));
            }));
        }))), takeUntil(this.destroy$))
            .subscribe(({ gutter, event, offset, min, max, areasBefore, areasAfter, containerSize, guttersSize }) => {
            let newPosition = this.isHorizontal
                ? this.splitterService.mathOperation(event.clientX, offset.left, '-')
                : this.splitterService.mathOperation(event.clientY, offset.top, '-');
            if (newPosition < min) {
                newPosition = min;
            }
            if (newPosition > max) {
                newPosition = max;
            }
            const diff = this.splitterService.mathOperation(gutter.position, newPosition, '-');
            let offsetInPercent;
            if (newPosition === min) {
                offsetInPercent = areasBefore.reduce((prev, curr) => prev + curr.realSize, 0);
            }
            else if (newPosition === max) {
                offsetInPercent = areasAfter.reduce((prev, curr) => prev + curr.realSize, 0);
            }
            else {
                offsetInPercent = Math.abs(this.splitterService.mathOperation(diff, containerSize, '/')) * 100;
            }
            const revercedAreasBefore = [...areasBefore].reverse();
            if (diff === 0) {
                return;
            }
            if (diff < 0) {
                const shrinked = this.shrinkAreas(areasAfter, offsetInPercent);
                revercedAreasBefore[0].realSize = this.splitterService.mathOperation(revercedAreasBefore[0].realSize, shrinked, '+');
                revercedAreasBefore[0].area.setCurrentSize(revercedAreasBefore[0].realSize);
            }
            else if (diff > 0) {
                const shrinked = this.shrinkAreas(revercedAreasBefore, offsetInPercent);
                areasAfter[0].realSize = this.splitterService.mathOperation(areasAfter[0].realSize, shrinked, '+');
                areasAfter[0].area.setCurrentSize(areasAfter[0].realSize);
            }
            gutter.position = newPosition;
            this.areasSizeChange.emit(this.getAreasSize([...areasBefore, ...areasAfter], containerSize, containerSize - guttersSize));
            this.cdr.markForCheck();
        });
    }
    shrinkAreas(areas, offsetInPercent) {
        let sum = 0;
        for (const areaRealSizes of areas) {
            if (offsetInPercent === 0) {
                break;
            }
            const avalableSize = this.splitterService.mathOperation(areaRealSizes.realSize, areaRealSizes.realMinSize, '-');
            if (avalableSize >= offsetInPercent) {
                areaRealSizes.realSize = this.splitterService.mathOperation(areaRealSizes.realSize, offsetInPercent, '-');
                areaRealSizes.area.setCurrentSize(areaRealSizes.realSize);
                sum = this.splitterService.mathOperation(sum, offsetInPercent, '+');
                offsetInPercent = 0;
                if (areaRealSizes.realSize === areaRealSizes.realMinSize) {
                    areaRealSizes.area.areaMinSize.emit();
                }
                break;
            }
            else {
                offsetInPercent = this.splitterService.mathOperation(offsetInPercent, avalableSize, '-');
                sum = this.splitterService.mathOperation(sum, avalableSize, '+');
                areaRealSizes.realSize = areaRealSizes.realMinSize;
                areaRealSizes.area.setCurrentSize(areaRealSizes.realSize);
                areaRealSizes.area.areaMinSize.emit();
            }
        }
        return sum;
    }
    get isHorizontal() {
        return this.orientation === 'horizontal';
    }
    getAreaRealSizes(area, containerSize, guttersGapInPercent) {
        const sizeInPx = area.elementRef.nativeElement[this.isHorizontal ? 'offsetWidth' : 'offsetHeight'];
        const realSize = this.splitterService.mathOperation(sizeInPx, containerSize, '/') * 100;
        const realMinSize = Math.max(0, this.splitterService.mathOperation(area.minSize, guttersGapInPercent, '-'));
        return {
            area,
            realSize,
            realMinSize,
        };
    }
    getAreasSize(areas, containerSize, areasSize) {
        const sizes = areas.map(({ area, realSize, realMinSize }) => {
            if (realMinSize === realSize) {
                return area.minSize;
            }
            else {
                return containerSize * (realSize / areasSize);
            }
        });
        return sizes;
    }
}
PrizmSplitterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmSplitterComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.PrizmDestroyService }, { token: i2.PrizmSplitterService }], target: i0.ɵɵFactoryTarget.Component });
PrizmSplitterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmSplitterComponent, isStandalone: true, selector: "prizm-splitter", inputs: { orientation: "orientation" }, outputs: { areasSizeChange: "areasSizeChange", areasSplitStart: "areasSplitStart", areasSplitEnd: "areasSplitEnd" }, host: { properties: { "class": "'prizm-spliiter ' + orientation" } }, providers: [PrizmDestroyService, PrizmSplitterService], queries: [{ propertyName: "customGutter", first: true, predicate: PrizmSplitterCustomGutterDirective, descendants: true }, { propertyName: "splitterAreaQueryList", predicate: PrizmSplitterAreaComponent }], viewQueries: [{ propertyName: "containerElement", first: true, predicate: ["container"], descendants: true, static: true }, { propertyName: "splitterGutterQueryList", predicate: PrizmSplitterGutterComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"container container--{{ orientation }}\" #container>\n  <prizm-splitter-gutter\n    *ngFor=\"let gutter of guttersData\"\n    [areaBefore]=\"$any(gutter.areaBefore)\"\n    [areaAfter]=\"$any(gutter.areaAfter)\"\n    [order]=\"$any(gutter.order)\"\n    [orientation]=\"orientation\"\n    [template]=\"$any(customGutter?.template)\"\n  >\n  </prizm-splitter-gutter>\n  <ng-content select=\"prizm-splitter-area\"></ng-content>\n</div>\n", styles: [":host{display:block;border:8px solid transparent}.container{display:flex;position:relative;overflow:hidden;width:100%;height:100%}.container--horizontal{flex-direction:row}.container--vertical{flex-direction:column}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: PrizmSplitterGutterComponent, selector: "prizm-splitter-gutter", inputs: ["areaBefore", "areaAfter", "orientation", "order", "template"] }, { kind: "ngmodule", type: ResizeObserverModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmSplitterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-splitter', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PrizmDestroyService, PrizmSplitterService], host: {
                        '[class]': "'prizm-spliiter ' + orientation",
                    }, standalone: true, imports: [CommonModule, PrizmSplitterGutterComponent, ResizeObserverModule], template: "<div class=\"container container--{{ orientation }}\" #container>\n  <prizm-splitter-gutter\n    *ngFor=\"let gutter of guttersData\"\n    [areaBefore]=\"$any(gutter.areaBefore)\"\n    [areaAfter]=\"$any(gutter.areaAfter)\"\n    [order]=\"$any(gutter.order)\"\n    [orientation]=\"orientation\"\n    [template]=\"$any(customGutter?.template)\"\n  >\n  </prizm-splitter-gutter>\n  <ng-content select=\"prizm-splitter-area\"></ng-content>\n</div>\n", styles: [":host{display:block;border:8px solid transparent}.container{display:flex;position:relative;overflow:hidden;width:100%;height:100%}.container--horizontal{flex-direction:row}.container--vertical{flex-direction:column}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.PrizmDestroyService }, { type: i2.PrizmSplitterService }]; }, propDecorators: { orientation: [{
                type: Input
            }], areasSizeChange: [{
                type: Output
            }], areasSplitStart: [{
                type: Output
            }], areasSplitEnd: [{
                type: Output
            }], containerElement: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], customGutter: [{
                type: ContentChild,
                args: [PrizmSplitterCustomGutterDirective]
            }], splitterAreaQueryList: [{
                type: ContentChildren,
                args: [PrizmSplitterAreaComponent]
            }], splitterGutterQueryList: [{
                type: ViewChildren,
                args: [PrizmSplitterGutterComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,