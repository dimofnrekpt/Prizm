import { ɵAnimationEngine } from '@angular/animations/browser';
import { inject, InjectFlags, InjectionToken } from '@angular/core';
import { BehaviorSubject, timer } from 'rxjs';
import { mapTo, share, startWith, switchMap } from 'rxjs/operators';
export const PRIZM_REMOVED_ELEMENT = new InjectionToken(`Element currently being removed by AnimationEngine`, {
    factory: () => {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        const stub = { onRemovalComplete: () => { } };
        const element$ = new BehaviorSubject(null);
        const engine = inject(ɵAnimationEngine, InjectFlags.Optional) ?? stub;
        const { onRemovalComplete = stub.onRemovalComplete } = engine;
        engine.onRemovalComplete = (element, context) => {
            element$.next(element);
            onRemovalComplete(element, context);
        };
        return element$.pipe(switchMap(element => timer(0).pipe(mapTo(null), startWith(element))), share());
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlZC1lbGVtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvdG9rZW5zL3JlbW92ZWQtZWxlbWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLGVBQWUsRUFBYyxLQUFLLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUQsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLElBQUksY0FBYyxDQUNyRCxvREFBb0QsRUFDcEQ7SUFDRSxPQUFPLEVBQUUsR0FBK0IsRUFBRTtRQUN4QyxnRUFBZ0U7UUFDaEUsTUFBTSxJQUFJLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxHQUFTLEVBQUUsR0FBRSxDQUFDLEVBQUUsQ0FBQztRQUNuRCxNQUFNLFFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsSUFBSSxDQUFDLENBQUM7UUFDM0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDdEUsTUFBTSxFQUFFLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLE1BQU0sQ0FBQztRQUU5RCxNQUFNLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFRLEVBQUU7WUFDcEQsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDO1FBRUYsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUNsQixTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNwRSxLQUFLLEVBQUUsQ0FDUixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1QW5pbWF0aW9uRW5naW5lIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucy9icm93c2VyJztcbmltcG9ydCB7IGluamVjdCwgSW5qZWN0RmxhZ3MsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXBUbywgc2hhcmUsIHN0YXJ0V2l0aCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fUkVNT1ZFRF9FTEVNRU5UID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8RWxlbWVudCB8IG51bGw+PihcbiAgYEVsZW1lbnQgY3VycmVudGx5IGJlaW5nIHJlbW92ZWQgYnkgQW5pbWF0aW9uRW5naW5lYCxcbiAge1xuICAgIGZhY3Rvcnk6ICgpOiBPYnNlcnZhYmxlPEVsZW1lbnQgfCBudWxsPiA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICBjb25zdCBzdHViID0geyBvblJlbW92YWxDb21wbGV0ZTogKCk6IHZvaWQgPT4ge30gfTtcbiAgICAgIGNvbnN0IGVsZW1lbnQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxFbGVtZW50IHwgbnVsbD4obnVsbCk7XG4gICAgICBjb25zdCBlbmdpbmUgPSBpbmplY3QoybVBbmltYXRpb25FbmdpbmUsIEluamVjdEZsYWdzLk9wdGlvbmFsKSA/PyBzdHViO1xuICAgICAgY29uc3QgeyBvblJlbW92YWxDb21wbGV0ZSA9IHN0dWIub25SZW1vdmFsQ29tcGxldGUgfSA9IGVuZ2luZTtcblxuICAgICAgZW5naW5lLm9uUmVtb3ZhbENvbXBsZXRlID0gKGVsZW1lbnQsIGNvbnRleHQpOiB2b2lkID0+IHtcbiAgICAgICAgZWxlbWVudCQubmV4dChlbGVtZW50KTtcbiAgICAgICAgb25SZW1vdmFsQ29tcGxldGUoZWxlbWVudCwgY29udGV4dCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZWxlbWVudCQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGVsZW1lbnQgPT4gdGltZXIoMCkucGlwZShtYXBUbyhudWxsKSwgc3RhcnRXaXRoKGVsZW1lbnQpKSksXG4gICAgICAgIHNoYXJlKClcbiAgICAgICk7XG4gICAgfSxcbiAgfVxuKTtcbiJdfQ==