import { ChangeDetectorRef, Directive, ElementRef, inject, Injector } from '@angular/core';
import { NgControl, NgModel, Validators } from '@angular/forms';
import { PrizmInputControl } from './input-control.class';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { map, takeUntil, tap } from 'rxjs/operators';
import { PrizmInputLayoutComponent } from '../input-layout';
import { BehaviorSubject, fromEvent, merge } from 'rxjs';
import { PRIZM_EMPTY_FUNCTION } from '@prizm-ui/core';
import * as i0 from "@angular/core";
export class PrizmInputNgControl extends PrizmInputControl {
    get value() {
        return this.previousInternalValue$$.value ?? this.fallbackValue;
    }
    get safeCurrentValue() {
        return this.rawValue ?? this.fallbackValue;
    }
    get empty() {
        return this.isEmpty(this.value);
    }
    get value$() {
        return this.previousInternalValue$$.asObservable().pipe(map(i => i ?? this.fallbackValue));
    }
    isEmpty(value) {
        return !value && !this.focusableElement?.nativeElement?.value;
    }
    get required() {
        // for work Validators.required
        if (this.ngControl.control?.hasValidator(Validators.required))
            return true;
        // for work [required] attributes
        const validator = this.ngControl?.validator;
        if (!validator) {
            return false;
        }
        const validation = validator({});
        // eslint-disable-next-line no-prototype-builtins
        return Boolean(validation && validation.hasOwnProperty('required'));
    }
    get disabled() {
        return !!this.ngControl?.disabled;
    }
    /** Whether the control is validity. */
    get invalid() {
        return !!this.ngControl?.invalid;
    }
    /** Whether the control is validity. */
    get touched() {
        return !!this.ngControl?.touched;
    }
    constructor(injector, valueTransformer) {
        super();
        this.injector = injector;
        this.valueTransformer = valueTransformer;
        this.elRef_ = inject((ElementRef));
        this.previousInternalValue$$ = new BehaviorSubject(null);
        this.onChange = PRIZM_EMPTY_FUNCTION;
        this.onTouch = PRIZM_EMPTY_FUNCTION;
        this.onTouched = PRIZM_EMPTY_FUNCTION;
        this.fallbackValue = null;
        this.destroy$ = this.injector.get(PrizmDestroyService);
        this.changeDetectorRef = this.injector.get(ChangeDetectorRef);
        this.layoutComponent = this.injector.get(PrizmInputLayoutComponent, null);
    }
    ngOnInit() {
        this.ngControl = this.injector.get(NgControl);
        this.initFocusListeners();
        console.assert(!!this.ngControl, `NgControl not injected in ${this.constructor.name}!\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
        this.ngControl?.statusChanges
            ?.pipe(tap(i => this.stateChanges.next()), takeUntil(this.destroy$))
            .subscribe();
    }
    initFocusListeners() {
        merge(fromEvent(this.elRef_.nativeElement, 'focusout'), fromEvent(this.elRef_.nativeElement, 'focusin'))
            .pipe(tap(() => this.stateChanges.next()), takeUntil(this.destroy$))
            .subscribe();
    }
    valueIdenticalComparator(oldValue, newValue) {
        return oldValue === newValue;
    }
    updateValue(value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue$$.next(value);
        this.controlSetValue(value);
    }
    clear(ev) {
        this.updateValue(null);
        this.markAsDirty();
    }
    setDisabledState(isDisabled) {
        this.checkControlUpdate();
        this.stateChanges.next();
    }
    registerOnChange(onChange) {
        this.onChange = (componentValue) => {
            onChange(this.toControlValue(componentValue));
        };
    }
    registerOnTouched(fn) {
        this.onTouch = () => {
            fn();
        };
    }
    writeValue(value) {
        const controlValue = this.ngControl instanceof NgModel && this.previousInternalValue$$.value === undefined
            ? this.ngControl.model
            : value;
        this.refreshLocalValue(this.fromControlValue(controlValue));
        // sync on change
        this.stateChanges.next();
    }
    refreshLocalValue(value) {
        this.previousInternalValue$$.next(value);
        this.checkControlUpdate();
    }
    updateFocused(focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
    }
    controlMarkAsTouched() {
        this.onTouched();
        this.checkControlUpdate();
    }
    controlSetValue(value) {
        this.onChange(value);
        this.checkControlUpdate();
    }
    checkControlUpdate() {
        this.changeDetectorRef.markForCheck();
    }
    get rawValue() {
        const { ngControl } = this;
        if (ngControl === null) {
            return undefined;
        }
        const controlValue = ngControl instanceof NgModel /*&& this.previousInternalValue === undefined*/
            ? ngControl.viewModel
            : ngControl.value;
        return this.fromControlValue(controlValue);
    }
    fromControlValue(controlValue) {
        return this.valueTransformer
            ? this.valueTransformer?.fromControlValue(controlValue)
            : controlValue;
    }
    toControlValue(componentValue) {
        return this.valueTransformer ? this.valueTransformer?.toControlValue(componentValue) : componentValue;
    }
    markAsTouched() {
        this.ngControl.control?.markAsTouched();
    }
    markAsDirty() {
        this.ngControl.control?.markAsDirty();
    }
}
PrizmInputNgControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmInputNgControl, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
PrizmInputNgControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.9", type: PrizmInputNgControl, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmInputNgControl, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: undefined }]; } });
//# sourceMappingURL=data:application/json;base64,