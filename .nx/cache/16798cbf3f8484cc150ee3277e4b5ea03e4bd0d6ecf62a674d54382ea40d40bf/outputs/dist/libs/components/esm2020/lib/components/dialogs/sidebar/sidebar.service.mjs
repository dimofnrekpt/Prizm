import { AbstractPrizmDialogService } from '../../../abstract/dialog.service';
import { Injectable } from '@angular/core';
import { PrizmOverlayGlobalPosition, PrizmOverlayInsidePlacement, } from '../../../modules/overlay';
import { PrizmSidebarComponent } from './sidebar.component';
import { PrizmSidebarResultDefaultType, } from './sidebar.models';
import { invokeIfCanCloseSidebar } from './util';
import { take } from 'rxjs/operators';
import { Compare } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
const DEFAULT_OPTIONS = {
    position: PrizmOverlayInsidePlacement.CENTER,
    dismissible: true,
    showByVertical: true,
    confirmButton: null,
    supportButton: null,
    cancelButton: null,
};
export class PrizmSidebarService extends AbstractPrizmDialogService {
    constructor() {
        super(...arguments);
        this.component = PrizmSidebarComponent;
        this.defaultOptions = DEFAULT_OPTIONS;
    }
    open(title, options, cb) {
        options = {
            ...options,
            title,
            dismissible: options.dismissible ?? false,
            backdrop: options.backdrop,
            containerClass: options.backdrop || options.parentContainer ? '' : 'no-width no-height',
        };
        this.safeUpdateButtonsWithDefaultStyles(options);
        return super.open(title, options, cb);
    }
    getPosition(dialog) {
        return new PrizmOverlayGlobalPosition({
            placement: dialog.position ?? PrizmOverlayInsidePlacement.LEFT,
            width: (['t', 'b'].includes(dialog.position) && '100%') || dialog.width,
            height: (['l', 'r'].includes(dialog.position) && '100%') || dialog.height,
        });
    }
    // TODO add i18n support for default cases
    safeUpdateButtonsWithDefaultStyles(options) {
        const supportButton = Compare.isNotNullish(options.supportButton) &&
            this.generateButton(options, options.supportButton, 'Продолжить', PrizmSidebarResultDefaultType.confirmed, 'danger', 'ghost');
        const confirmButton = this.generateButton(options, options.confirmButton, 'Подтвердить', PrizmSidebarResultDefaultType.confirmed, 'primary');
        const cancelButton = options.cancelButton !== null &&
            this.generateButton(options, options.cancelButton, 'Отмена', PrizmSidebarResultDefaultType.cancel, 'secondary', 'ghost');
        options.confirmButton = confirmButton;
        options.cancelButton = cancelButton;
        options.supportButton = supportButton;
    }
    generateButton(options, button, defaultText, defaultComplete, defaultAppearance, defaultAppearanceType) {
        const buttonText = (typeof button === 'string' ? button : button?.text) ?? defaultText;
        const btn = ((typeof button === 'string' ? {} : button) ?? {});
        return {
            ...btn,
            text: buttonText,
            size: btn.size ?? options.size,
            action: btn.action ??
                ((c) => {
                    invokeIfCanCloseSidebar(() => c.completeWith(defaultComplete), options.canClose)
                        .pipe(take(1))
                        .subscribe();
                }),
            appearance: btn.appearance ?? defaultAppearance,
            appearanceType: btn.appearanceType ?? defaultAppearanceType,
        };
    }
}
PrizmSidebarService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmSidebarService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
PrizmSidebarService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmSidebarService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmSidebarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,