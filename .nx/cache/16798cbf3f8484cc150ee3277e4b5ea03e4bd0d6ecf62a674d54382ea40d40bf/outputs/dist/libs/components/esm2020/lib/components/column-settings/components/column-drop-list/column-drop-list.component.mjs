import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { PrizmAbstractTestId } from '../../../../abstract/interactive';
import { CDK_DRAG_CONFIG, DragDropModule } from '@angular/cdk/drag-drop';
import { CommonModule } from '@angular/common';
import { PrizmLetDirective, PrizmPluckPipe } from '@prizm-ui/helpers';
import { FormsModule } from '@angular/forms';
import { PrizmThemeModule } from '@prizm-ui/theme';
import { PrizmColumnIconPipe } from '../../pipes/column-icon.pipe';
import { PrizmButtonComponent } from '../../../button/button.component';
import { PrizmToggleComponent } from '../../../toggle/toggle.component';
import { PrizmIconComponent } from '../../../icon/icon.component';
import { PrizmScrollbarComponent } from '../../../scrollbar/scrollbar.component';
import { PrizmHintDirective } from '../../../../directives/hint/hint.directive';
import { PrizmListingItemComponent } from '../../../listing-item';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/drag-drop";
import * as i3 from "@prizm-ui/theme";
const DragConfig = {
    zIndex: 9999,
};
export class PrizmColumnDropListComponent extends PrizmAbstractTestId {
    constructor() {
        super(...arguments);
        this.isLastColumnShown = false;
        this.statusChanged = new EventEmitter();
        this.testId_ = 'ui_column_drop-list';
    }
    toggleColumnStatus(column) {
        if (column.status === 'default') {
            column.status = 'hidden';
        }
        else if (column.status === 'hidden') {
            column.status = 'default';
        }
        this.statusChanged.emit();
    }
}
PrizmColumnDropListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmColumnDropListComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
PrizmColumnDropListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmColumnDropListComponent, isStandalone: true, selector: "prizm-column-drop-list", inputs: { columns: "columns", translations: "translations", isLastColumnShown: "isLastColumnShown" }, outputs: { statusChanged: "statusChanged" }, providers: [{ provide: CDK_DRAG_CONFIG, useValue: DragConfig }], usesInheritance: true, ngImport: i0, template: "<prizm-scrollbar class=\"scroll-box\">\n  <ng-container *ngIf=\"columns.length; else dropZone\">\n    <prizm-listing-item\n      *ngFor=\"let column of columns\"\n      cdkDrag\n      cdkDragPreviewClass=\"prizm-high-index\"\n      prizmTheme\n    >\n      <ng-container leftBox>\n        <prizm-icon [size]=\"24\" iconClass=\"editor-dots\"></prizm-icon>\n      </ng-container>\n      <span>{{ column.name }}</span>\n      <ng-container rightBox>\n        <button\n          [icon]=\"column.status | prizmColumnIcon\"\n          [disabled]=\"column.status === 'sticky' || (isLastColumnShown && column.status === 'default')\"\n          [prizmHint]=\"\n            isLastColumnShown && column.status === 'default'\n              ? (translations | prizmPluck : ['disabledHint'])\n              : ''\n          \"\n          (click)=\"toggleColumnStatus(column)\"\n          prizmIconButton\n          appearanceType=\"ghost\"\n          appearance=\"secondary\"\n          size=\"m\"\n        ></button>\n      </ng-container>\n      <ng-container *cdkDragPlaceholder>\n        <ng-container *ngTemplateOutlet=\"placeholder\"></ng-container>\n      </ng-container>\n    </prizm-listing-item>\n  </ng-container>\n</prizm-scrollbar>\n\n<ng-template #dropZone>\n  <div class=\"dropzone\">{{ translations | prizmPluck : ['dropzone'] }}</div>\n</ng-template>\n\n<ng-template #placeholder>\n  <div class=\"dropzone\"></div>\n</ng-template>\n", styles: [".scroll-box{min-height:40px;max-height:287px}.cdk-drag-preview{color:var(--prizm-v3-text-icon-primary);box-shadow:var(--prizm-v3-shadow-big-bottom);border-radius:2px;cursor:grabbing!important;z-index:9999}.cdk-drag-preview ::ng-deep .item-container{border:1px solid var(--prizm-v3-background-stroke)}.dropzone{display:flex;align-items:center;justify-content:space-around;border-top:1px dashed var(--prizm-v3-form-stroke-default);border-bottom:1px dashed var(--prizm-v3-form-stroke-default);border-radius:2px;background-color:var(--prizm-v3-form-fill-default);height:40px;margin-bottom:16px}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: PrizmButtonComponent, selector: "button[prizmButton], button[prizmIconButton], a[prizmButton], a[prizmIconButton]", inputs: ["size", "icon", "iconRight", "appearance", "appearanceType", "disabled", "showLoader"] }, { kind: "ngmodule", type: DragDropModule }, { kind: "directive", type: i2.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "directive", type: i2.CdkDragPlaceholder, selector: "ng-template[cdkDragPlaceholder]", inputs: ["data"] }, { kind: "component", type: PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }, { kind: "component", type: PrizmScrollbarComponent, selector: "prizm-scrollbar", inputs: ["visibility"] }, { kind: "pipe", type: PrizmPluckPipe, name: "prizmPluck" }, { kind: "directive", type: PrizmHintDirective, selector: "[prizmHint]:not(ng-container)", inputs: ["prizmAutoReposition", "prizmHintDirection", "prizmHintId", "prizmHintTheme", "prizmHintShowDelay", "prizmHintHideDelay", "prizmHintHost", "prizmHintContext", "prizmHintCanShow", "prizmHint"], outputs: ["prizmHintShowed"], exportAs: ["prizmHint"] }, { kind: "ngmodule", type: FormsModule }, { kind: "ngmodule", type: PrizmThemeModule }, { kind: "directive", type: i3.PrizmThemeDirective, selector: "[prizmTheme]", inputs: ["prizmTheme"], outputs: ["prizmThemeChange"] }, { kind: "pipe", type: PrizmColumnIconPipe, name: "prizmColumnIcon" }, { kind: "component", type: PrizmListingItemComponent, selector: "prizm-listing-item", inputs: ["disabled", "selected"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmColumnDropListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-column-drop-list', changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: CDK_DRAG_CONFIG, useValue: DragConfig }], standalone: true, imports: [
                        CommonModule,
                        PrizmButtonComponent,
                        PrizmToggleComponent,
                        DragDropModule,
                        PrizmIconComponent,
                        PrizmScrollbarComponent,
                        PrizmLetDirective,
                        PrizmPluckPipe,
                        PrizmHintDirective,
                        FormsModule,
                        PrizmThemeModule,
                        PrizmColumnIconPipe,
                        PrizmListingItemComponent,
                    ], template: "<prizm-scrollbar class=\"scroll-box\">\n  <ng-container *ngIf=\"columns.length; else dropZone\">\n    <prizm-listing-item\n      *ngFor=\"let column of columns\"\n      cdkDrag\n      cdkDragPreviewClass=\"prizm-high-index\"\n      prizmTheme\n    >\n      <ng-container leftBox>\n        <prizm-icon [size]=\"24\" iconClass=\"editor-dots\"></prizm-icon>\n      </ng-container>\n      <span>{{ column.name }}</span>\n      <ng-container rightBox>\n        <button\n          [icon]=\"column.status | prizmColumnIcon\"\n          [disabled]=\"column.status === 'sticky' || (isLastColumnShown && column.status === 'default')\"\n          [prizmHint]=\"\n            isLastColumnShown && column.status === 'default'\n              ? (translations | prizmPluck : ['disabledHint'])\n              : ''\n          \"\n          (click)=\"toggleColumnStatus(column)\"\n          prizmIconButton\n          appearanceType=\"ghost\"\n          appearance=\"secondary\"\n          size=\"m\"\n        ></button>\n      </ng-container>\n      <ng-container *cdkDragPlaceholder>\n        <ng-container *ngTemplateOutlet=\"placeholder\"></ng-container>\n      </ng-container>\n    </prizm-listing-item>\n  </ng-container>\n</prizm-scrollbar>\n\n<ng-template #dropZone>\n  <div class=\"dropzone\">{{ translations | prizmPluck : ['dropzone'] }}</div>\n</ng-template>\n\n<ng-template #placeholder>\n  <div class=\"dropzone\"></div>\n</ng-template>\n", styles: [".scroll-box{min-height:40px;max-height:287px}.cdk-drag-preview{color:var(--prizm-v3-text-icon-primary);box-shadow:var(--prizm-v3-shadow-big-bottom);border-radius:2px;cursor:grabbing!important;z-index:9999}.cdk-drag-preview ::ng-deep .item-container{border:1px solid var(--prizm-v3-background-stroke)}.dropzone{display:flex;align-items:center;justify-content:space-around;border-top:1px dashed var(--prizm-v3-form-stroke-default);border-bottom:1px dashed var(--prizm-v3-form-stroke-default);border-radius:2px;background-color:var(--prizm-v3-form-fill-default);height:40px;margin-bottom:16px}\n"] }]
        }], propDecorators: { columns: [{
                type: Input
            }], translations: [{
                type: Input
            }], isLastColumnShown: [{
                type: Input
            }], statusChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,