import { PrizmTime } from './time';
import { PrizmDay } from './day';
export const PRIZM_DAYS_IN_WEEK = 7;
export const PRIZM_DAYS_IN_NORMAL_YEAR = 365;
export const PRIZM_DAYS_IN_LEAP_YEAR = 366;
export const PRIZM_MONTHS_IN_YEAR = 12;
export const PRIZM_MIN_DAY = 1;
export const PRIZM_MIN_MONTH = 0;
export const PRIZM_MAX_MONTH = 11;
export const PRIZM_MIN_YEAR = 0;
export const PRIZM_MAX_YEAR = 9999;
// export const PRIZM_RANGE_SEPARATOR_CHAR = `${PRIZM_CHAR_NO_BREAK_SPACE}${PRIZM_CHAR_EN_DASH}${PRIZM_CHAR_NO_BREAK_SPACE}`;
export const PRIZM_RANGE_SEPARATOR_CHAR = ` - `;
export const PRIZM_MILLISECONDS_IN_SECOND = 1000;
export const PRIZM_SECONDS_IN_MINUTE = 60;
export const PRIZM_MINUTES_IN_HOUR = 60;
export const PRIZM_HOURS_IN_DAY = 24;
export const PRIZM_MILLISECONDS_IN_MINUTE = PRIZM_MILLISECONDS_IN_SECOND * PRIZM_SECONDS_IN_MINUTE;
export const PRIZM_MILLISECONDS_IN_HOUR = PRIZM_MILLISECONDS_IN_MINUTE * PRIZM_MINUTES_IN_HOUR;
export const PRIZM_MILLISECONDS_IN_DAY = PRIZM_MILLISECONDS_IN_HOUR * PRIZM_HOURS_IN_DAY;
export class PrizmDateTime {
    static fromLocalNativeDate(date) {
        return new PrizmDateTime(PrizmDay.fromLocalNativeDate(date), PrizmTime.fromLocalNativeDate(date));
    }
    constructor(day, time = new PrizmTime(0, 0)) {
        this.day = day;
        this.time = time;
    }
    toLocalNativeDate() {
        return new Date(this.day.year, this.day.month, this.day.day, this.time?.hours ?? 0, this.time?.minutes ?? 0, this.time?.seconds ?? 0, this.time?.ms ?? 0);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS10aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvQGNvcmUvZGF0ZS10aW1lL2RhdGUtdGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFakMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQUcsQ0FBQztBQUU3QyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFFL0IsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUVqQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUM7QUFFaEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQztBQUVuQyw2SEFBNkg7QUFDN0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLElBQUksQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyw0QkFBNEIsR0FBRyx1QkFBdUIsQ0FBQztBQUVuRyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyw0QkFBNEIsR0FBRyxxQkFBcUIsQ0FBQztBQUUvRixNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRywwQkFBMEIsR0FBRyxrQkFBa0IsQ0FBQztBQUV6RixNQUFNLE9BQU8sYUFBYTtJQUNqQixNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBVTtRQUMxQyxPQUFPLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwRyxDQUFDO0lBRUQsWUFBbUIsR0FBYSxFQUFTLE9BQXlCLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFBbEUsUUFBRyxHQUFILEdBQUcsQ0FBVTtRQUFTLFNBQUksR0FBSixJQUFJLENBQXdDO0lBQUcsQ0FBQztJQUVsRixpQkFBaUI7UUFDdEIsT0FBTyxJQUFJLElBQUksQ0FDYixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFDWixJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQ3JCLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUMsRUFDdkIsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLElBQUksQ0FBQyxFQUN2QixJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQ25CLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQUklaTV9DSEFSX0VOX0RBU0gsIFBSSVpNX0NIQVJfTk9fQlJFQUtfU1BBQ0UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdW5pY29kZS1jaGFycyc7XG5pbXBvcnQgeyBQcml6bVRpbWUgfSBmcm9tICcuL3RpbWUnO1xuaW1wb3J0IHsgUHJpem1EYXkgfSBmcm9tICcuL2RheSc7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9EQVlTX0lOX1dFRUsgPSA3O1xuXG5leHBvcnQgY29uc3QgUFJJWk1fREFZU19JTl9OT1JNQUxfWUVBUiA9IDM2NTtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX0RBWVNfSU5fTEVBUF9ZRUFSID0gMzY2O1xuXG5leHBvcnQgY29uc3QgUFJJWk1fTU9OVEhTX0lOX1lFQVIgPSAxMjtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX01JTl9EQVkgPSAxO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fTUlOX01PTlRIID0gMDtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX01BWF9NT05USCA9IDExO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fTUlOX1lFQVIgPSAwO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fTUFYX1lFQVIgPSA5OTk5O1xuXG4vLyBleHBvcnQgY29uc3QgUFJJWk1fUkFOR0VfU0VQQVJBVE9SX0NIQVIgPSBgJHtQUklaTV9DSEFSX05PX0JSRUFLX1NQQUNFfSR7UFJJWk1fQ0hBUl9FTl9EQVNIfSR7UFJJWk1fQ0hBUl9OT19CUkVBS19TUEFDRX1gO1xuZXhwb3J0IGNvbnN0IFBSSVpNX1JBTkdFX1NFUEFSQVRPUl9DSEFSID0gYCAtIGA7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9NSUxMSVNFQ09ORFNfSU5fU0VDT05EID0gMTAwMDtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX1NFQ09ORFNfSU5fTUlOVVRFID0gNjA7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9NSU5VVEVTX0lOX0hPVVIgPSA2MDtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX0hPVVJTX0lOX0RBWSA9IDI0O1xuXG5leHBvcnQgY29uc3QgUFJJWk1fTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IFBSSVpNX01JTExJU0VDT05EU19JTl9TRUNPTkQgKiBQUklaTV9TRUNPTkRTX0lOX01JTlVURTtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX01JTExJU0VDT05EU19JTl9IT1VSID0gUFJJWk1fTUlMTElTRUNPTkRTX0lOX01JTlVURSAqIFBSSVpNX01JTlVURVNfSU5fSE9VUjtcblxuZXhwb3J0IGNvbnN0IFBSSVpNX01JTExJU0VDT05EU19JTl9EQVkgPSBQUklaTV9NSUxMSVNFQ09ORFNfSU5fSE9VUiAqIFBSSVpNX0hPVVJTX0lOX0RBWTtcblxuZXhwb3J0IGNsYXNzIFByaXptRGF0ZVRpbWUge1xuICBwdWJsaWMgc3RhdGljIGZyb21Mb2NhbE5hdGl2ZURhdGUoZGF0ZTogRGF0ZSk6IFByaXptRGF0ZVRpbWUge1xuICAgIHJldHVybiBuZXcgUHJpem1EYXRlVGltZShQcml6bURheS5mcm9tTG9jYWxOYXRpdmVEYXRlKGRhdGUpLCBQcml6bVRpbWUuZnJvbUxvY2FsTmF0aXZlRGF0ZShkYXRlKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGF5OiBQcml6bURheSwgcHVibGljIHRpbWU6IFByaXptVGltZSB8IG51bGwgPSBuZXcgUHJpem1UaW1lKDAsIDApKSB7fVxuXG4gIHB1YmxpYyB0b0xvY2FsTmF0aXZlRGF0ZSgpOiBEYXRlIHtcbiAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICB0aGlzLmRheS55ZWFyLFxuICAgICAgdGhpcy5kYXkubW9udGgsXG4gICAgICB0aGlzLmRheS5kYXksXG4gICAgICB0aGlzLnRpbWU/LmhvdXJzID8/IDAsXG4gICAgICB0aGlzLnRpbWU/Lm1pbnV0ZXMgPz8gMCxcbiAgICAgIHRoaXMudGltZT8uc2Vjb25kcyA/PyAwLFxuICAgICAgdGhpcy50aW1lPy5tcyA/PyAwXG4gICAgKTtcbiAgfVxufVxuIl19