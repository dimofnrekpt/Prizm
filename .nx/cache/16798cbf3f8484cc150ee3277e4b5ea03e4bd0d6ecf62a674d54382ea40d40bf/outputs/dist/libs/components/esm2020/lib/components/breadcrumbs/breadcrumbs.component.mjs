import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Input, Output, QueryList, ViewChild, ViewChildren, } from '@angular/core';
import { animationFrameScheduler, BehaviorSubject, merge, Subject } from 'rxjs';
import { PrizmDestroyService, prizmEmptyQueryList } from '@prizm-ui/helpers';
import { debounceTime, observeOn, takeUntil, tap } from 'rxjs/operators';
import { PrizmAbstractTestId } from '../../abstract/interactive';
import { PrizmBreadcrumbDirective } from './breadcrumbs.directive';
import { CommonModule } from '@angular/common';
import { PrizmIconModule } from '../icon';
import { PrizmDropdownHostModule } from '../dropdowns/dropdown-host';
import * as i0 from "@angular/core";
import * as i1 from "@prizm-ui/helpers";
import * as i2 from "@angular/common";
import * as i3 from "../icon/icon.component";
import * as i4 from "../dropdowns/dropdown-host/dropdown-host.component";
export class PrizmBreadcrumbsComponent extends PrizmAbstractTestId {
    set breadcrumbs(data) {
        this.breadcrumbs$.next(data);
    }
    get breadcrumbs() {
        return this.breadcrumbs$.getValue();
    }
    get activeBreadcrumbIdx() {
        return this.breadcrumbsToShow$.getValue().length - 1;
    }
    constructor(cdRef, destroy) {
        super();
        this.cdRef = cdRef;
        this.destroy = destroy;
        this.testId_ = 'ui_breadcrumbs';
        this.breadcrumbChange = new EventEmitter();
        this.breadcrumbsList = prizmEmptyQueryList();
        this.breadcrumbsItem = prizmEmptyQueryList();
        this.breadcrumbs$ = new BehaviorSubject([]);
        this.breadcrumbsToShow$ = new BehaviorSubject([]);
        this.breadcrumbsInMenu$ = new BehaviorSubject([]);
        this.isDropdownOpened = false;
        this.isContainerOverflowed = false;
        this.mutationDetector$ = new Subject();
    }
    changeBreadcrumb(idx) {
        this.breadcrumbs = this.breadcrumbs.filter((item, i) => i <= idx);
        this.breadcrumbChange.emit(this.breadcrumbs[idx]);
    }
    ngOnInit() {
        this.resizeObserver = new ResizeObserver(() => this.mutationDetector$.next());
        this.resizeObserver.observe(this.containerRef.nativeElement);
    }
    ngAfterViewInit() {
        const $mutation = this.mutationDetector$.pipe(debounceTime(200), observeOn(animationFrameScheduler), tap(() => {
            this.calculateOverflowState();
            this.setViewBreadcrumbs(this.breadcrumbs);
        }));
        const $breadcrumbsChange = this.breadcrumbs$.pipe(debounceTime(200), observeOn(animationFrameScheduler), tap(item => {
            this.calculateBreadcrumbsWidth();
            this.calculateOverflowState();
            this.setViewBreadcrumbs(item);
        }));
        merge($breadcrumbsChange, $mutation)
            .pipe(debounceTime(200), takeUntil(this.destroy))
            .subscribe(() => this.cdRef.detectChanges());
    }
    ngOnDestroy() {
        this.resizeObserver.disconnect();
        this.mutationDetector$.complete();
    }
    calculateOverflowState() {
        const containerWidth = this.containerRef.nativeElement.clientWidth;
        const contentWidth = this.breadcrumbsElementsWidth;
        if (contentWidth > containerWidth) {
            this.isContainerOverflowed = this.breadcrumbs.length > 2;
        }
        else {
            this.isDropdownOpened = false;
            this.isContainerOverflowed = false;
        }
    }
    calculateBreadcrumbsWidth() {
        this.breadcrumbsElementsWidth = this.fakeBreadcrumbContainer.nativeElement.clientWidth;
    }
    setViewBreadcrumbs(breadcrumbs) {
        if (this.isContainerOverflowed) {
            this.breadcrumbsInMenu$.next(breadcrumbs.filter((item, i) => i > 0 && i < breadcrumbs.length - 1));
            this.breadcrumbsToShow$.next(breadcrumbs.filter((item, i) => i === 0 || i === breadcrumbs.length - 1));
        }
        else {
            this.breadcrumbsInMenu$.next([]);
            this.breadcrumbsToShow$.next(breadcrumbs);
        }
    }
}
PrizmBreadcrumbsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmBreadcrumbsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.PrizmDestroyService }], target: i0.ɵɵFactoryTarget.Component });
PrizmBreadcrumbsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmBreadcrumbsComponent, isStandalone: true, selector: "prizm-breadcrumbs", inputs: { breadcrumbs: "breadcrumbs" }, outputs: { breadcrumbChange: "breadcrumbChange" }, providers: [PrizmDestroyService], queries: [{ propertyName: "breadcrumbsItem", predicate: PrizmBreadcrumbDirective }], viewQueries: [{ propertyName: "containerRef", first: true, predicate: ["container"], descendants: true, static: true }, { propertyName: "fakeBreadcrumbContainer", first: true, predicate: ["breadcrumbsFake"], descendants: true, static: true }, { propertyName: "breadcrumbsList", predicate: ["breadcrumb"], descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<div class=\"container\" #container>\n  <div class=\"breadcrumbs\" *ngFor=\"let item of breadcrumbsItem; let i = index\">\n    <prizm-icon\n      class=\"breadcrumbs__chevron\"\n      *ngIf=\"i !== 0\"\n      [size]=\"16\"\n      iconClass=\"chevrons-right\"\n    ></prizm-icon>\n\n    <div class=\"breadcrumb breadcrumb__name\">\n      <ng-container [ngTemplateOutlet]=\"item.template\" [ngTemplateOutletContext]=\"{ idx: i }\"></ng-container>\n    </div>\n\n    <prizm-dropdown-host\n      class=\"breadcrumbs__dots\"\n      *ngIf=\"i === 0 && this.isContainerOverflowed\"\n      [(isOpen)]=\"isDropdownOpened\"\n      [content]=\"dropdown\"\n      prizmDropdownHostWidth=\"auto\"\n    >\n      <div class=\"dropdown-inner\">\n        <prizm-icon class=\"breadcrumbs__chevron\" [size]=\"16\" iconClass=\"chevrons-right\"></prizm-icon>\n        <button class=\"dots-buttons\" (click)=\"isDropdownOpened = !isDropdownOpened\">...</button>\n      </div>\n    </prizm-dropdown-host>\n  </div>\n\n  <ng-container>\n    <div class=\"breadcrumbs\" #breadcrumb *ngFor=\"let breadcrumb of breadcrumbsToShow$ | async; let i = index\">\n      <prizm-icon\n        class=\"breadcrumbs__chevron\"\n        *ngIf=\"i !== 0\"\n        [size]=\"16\"\n        iconClass=\"chevrons-right\"\n      ></prizm-icon>\n\n      <button\n        class=\"breadcrumb\"\n        [class.breadcrumb_active]=\"i === activeBreadcrumbIdx\"\n        (click)=\"changeBreadcrumb(i)\"\n      >\n        <prizm-icon\n          class=\"breadcrumb__icon\"\n          *ngIf=\"breadcrumb.icon\"\n          [size]=\"16\"\n          [iconClass]=\"breadcrumb.icon\"\n        ></prizm-icon>\n        <span class=\"breadcrumb__name\" *ngIf=\"breadcrumb.name\">{{ breadcrumb.name }}</span>\n      </button>\n\n      <prizm-dropdown-host\n        class=\"breadcrumbs__dots\"\n        *ngIf=\"i === 0 && this.isContainerOverflowed\"\n        [(isOpen)]=\"isDropdownOpened\"\n        [content]=\"dropdown\"\n        prizmDropdownHostWidth=\"auto\"\n      >\n        <div class=\"dropdown-inner\">\n          <prizm-icon class=\"breadcrumbs__chevron\" [size]=\"16\" iconClass=\"chevrons-right\"></prizm-icon>\n          <button class=\"dots-buttons\" (click)=\"isDropdownOpened = !isDropdownOpened\">...</button>\n        </div>\n      </prizm-dropdown-host>\n    </div>\n  </ng-container>\n</div>\n\n<div class=\"container container__fake\" #breadcrumbsFake>\n  <div class=\"breadcrumbs\" #breadcrumbsFake *ngFor=\"let breadcrumb of breadcrumbs$ | async; let i = index\">\n    <prizm-icon\n      class=\"breadcrumbs__chevron\"\n      *ngIf=\"i !== 0\"\n      [size]=\"16\"\n      iconClass=\"chevrons-right\"\n    ></prizm-icon>\n    <button class=\"breadcrumb\">\n      <prizm-icon\n        class=\"breadcrumb__icon\"\n        *ngIf=\"!!breadcrumb.icon\"\n        [size]=\"16\"\n        [iconClass]=\"breadcrumb.icon\"\n      ></prizm-icon>\n      <span class=\"breadcrumb__name\">{{ breadcrumb?.name }}</span>\n    </button>\n  </div>\n</div>\n\n<ng-template #dropdown>\n  <div class=\"dropdown-content\" *ngIf=\"breadcrumbsInMenu$ | async as breadcrumbsInMenu\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbsInMenu; let i = index\">\n      <button class=\"dropdown-breadcrumb\" (click)=\"changeBreadcrumb(i + 1)\">\n        <prizm-icon\n          class=\"dropdown-breadcrumb__icon\"\n          *ngIf=\"!!breadcrumb.icon\"\n          [size]=\"16\"\n          [iconClass]=\"breadcrumb.icon\"\n        ></prizm-icon>\n        <span class=\"dropdown-breadcrumb__name\">{{ breadcrumb?.name }}</span>\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: ["button{border:none;outline:none;background:transparent;cursor:pointer}span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host{height:100%;width:100%;display:flex;position:relative;overflow:hidden}:host .container{flex:1;display:flex;overflow:hidden}:host .container__fake{position:absolute;opacity:0;z-index:0;pointer-events:none}:host .container .breadcrumbs{display:flex;align-items:center}:host .container .breadcrumbs .dropdown-inner{display:flex}:host .container .breadcrumbs__chevron{display:flex;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs__dots{display:flex;align-items:center}:host .container .breadcrumbs__dots button:hover,:host .container .breadcrumbs__dots button:focus{color:var(--prizm-v3-button-primary-solid-hover)}:host .container .breadcrumbs .breadcrumb{height:32px;padding:0 6px;display:flex;align-items:center;justify-content:center;gap:8px;border:2px solid transparent;border-radius:4px}:host .container .breadcrumbs .breadcrumb__name{font-weight:400;font-size:12px;line-height:16px;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs .breadcrumb__icon{height:32px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs .breadcrumb_active{cursor:auto}:host .container .breadcrumbs .breadcrumb_active .breadcrumb__name,:host .container .breadcrumbs .breadcrumb_active .breadcrumb__icon{color:var(--prizm-v3-text-icon-primary)}:host .container .breadcrumbs .breadcrumb:hover:not(.breadcrumb_active) .breadcrumb__name,:host .container .breadcrumbs .breadcrumb:hover:not(.breadcrumb_active) .breadcrumb__icon{color:var(--prizm-v3-button-primary-solid-hover);transition:.4s}:host .container .breadcrumbs .breadcrumb:focus:not(.breadcrumb_active){border-color:var(--prizm-v3-background-stroke-focus)}.dropdown-content{padding:8px 0;display:flex;flex-direction:column;background:var(--prizm-v3-background-fill-overlay)}.dropdown-content .dropdown-breadcrumb{height:32px;min-width:32px;max-width:210px;padding:0 8px;display:flex;align-items:center;gap:8px}.dropdown-content .dropdown-breadcrumb__name{height:24px;display:flex;align-items:center;font-weight:400;font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-secondary)}.dropdown-content .dropdown-breadcrumb__icon{height:32px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-secondary)}.dropdown-content .dropdown-breadcrumb:hover,.dropdown-content .dropdown-breadcrumb:focus{background:var(--prizm-v3-table-fill-row-hover)}.dots-buttons{color:var(--prizm-v3-text-icon-tertiary)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }, { kind: "ngmodule", type: 
            // TODO !ng16 change all icon module to svg module
            PrizmIconModule }, { kind: "component", type: i3.PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }, { kind: "ngmodule", type: PrizmDropdownHostModule }, { kind: "component", type: i4.PrizmDropdownHostComponent, selector: "prizm-dropdown-host", inputs: ["content", "prizmDropdownHostId", "prizmDropdownCustomContext", "delay", "canOpen", "closeByEsc", "closeOnOutsideClick", "prizmDropdownHost", "prizmDropdownHostWidth", "autoReposition", "placement", "isOpen", "dropdownStyles", "dropdownClasses"], outputs: ["isOpenChange"], exportAs: ["prizm-dropdown-host"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmBreadcrumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-breadcrumbs', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PrizmDestroyService], standalone: true, imports: [
                        CommonModule,
                        // TODO !ng16 change all icon module to svg module
                        PrizmIconModule,
                        PrizmDropdownHostModule,
                    ], template: "<div class=\"container\" #container>\n  <div class=\"breadcrumbs\" *ngFor=\"let item of breadcrumbsItem; let i = index\">\n    <prizm-icon\n      class=\"breadcrumbs__chevron\"\n      *ngIf=\"i !== 0\"\n      [size]=\"16\"\n      iconClass=\"chevrons-right\"\n    ></prizm-icon>\n\n    <div class=\"breadcrumb breadcrumb__name\">\n      <ng-container [ngTemplateOutlet]=\"item.template\" [ngTemplateOutletContext]=\"{ idx: i }\"></ng-container>\n    </div>\n\n    <prizm-dropdown-host\n      class=\"breadcrumbs__dots\"\n      *ngIf=\"i === 0 && this.isContainerOverflowed\"\n      [(isOpen)]=\"isDropdownOpened\"\n      [content]=\"dropdown\"\n      prizmDropdownHostWidth=\"auto\"\n    >\n      <div class=\"dropdown-inner\">\n        <prizm-icon class=\"breadcrumbs__chevron\" [size]=\"16\" iconClass=\"chevrons-right\"></prizm-icon>\n        <button class=\"dots-buttons\" (click)=\"isDropdownOpened = !isDropdownOpened\">...</button>\n      </div>\n    </prizm-dropdown-host>\n  </div>\n\n  <ng-container>\n    <div class=\"breadcrumbs\" #breadcrumb *ngFor=\"let breadcrumb of breadcrumbsToShow$ | async; let i = index\">\n      <prizm-icon\n        class=\"breadcrumbs__chevron\"\n        *ngIf=\"i !== 0\"\n        [size]=\"16\"\n        iconClass=\"chevrons-right\"\n      ></prizm-icon>\n\n      <button\n        class=\"breadcrumb\"\n        [class.breadcrumb_active]=\"i === activeBreadcrumbIdx\"\n        (click)=\"changeBreadcrumb(i)\"\n      >\n        <prizm-icon\n          class=\"breadcrumb__icon\"\n          *ngIf=\"breadcrumb.icon\"\n          [size]=\"16\"\n          [iconClass]=\"breadcrumb.icon\"\n        ></prizm-icon>\n        <span class=\"breadcrumb__name\" *ngIf=\"breadcrumb.name\">{{ breadcrumb.name }}</span>\n      </button>\n\n      <prizm-dropdown-host\n        class=\"breadcrumbs__dots\"\n        *ngIf=\"i === 0 && this.isContainerOverflowed\"\n        [(isOpen)]=\"isDropdownOpened\"\n        [content]=\"dropdown\"\n        prizmDropdownHostWidth=\"auto\"\n      >\n        <div class=\"dropdown-inner\">\n          <prizm-icon class=\"breadcrumbs__chevron\" [size]=\"16\" iconClass=\"chevrons-right\"></prizm-icon>\n          <button class=\"dots-buttons\" (click)=\"isDropdownOpened = !isDropdownOpened\">...</button>\n        </div>\n      </prizm-dropdown-host>\n    </div>\n  </ng-container>\n</div>\n\n<div class=\"container container__fake\" #breadcrumbsFake>\n  <div class=\"breadcrumbs\" #breadcrumbsFake *ngFor=\"let breadcrumb of breadcrumbs$ | async; let i = index\">\n    <prizm-icon\n      class=\"breadcrumbs__chevron\"\n      *ngIf=\"i !== 0\"\n      [size]=\"16\"\n      iconClass=\"chevrons-right\"\n    ></prizm-icon>\n    <button class=\"breadcrumb\">\n      <prizm-icon\n        class=\"breadcrumb__icon\"\n        *ngIf=\"!!breadcrumb.icon\"\n        [size]=\"16\"\n        [iconClass]=\"breadcrumb.icon\"\n      ></prizm-icon>\n      <span class=\"breadcrumb__name\">{{ breadcrumb?.name }}</span>\n    </button>\n  </div>\n</div>\n\n<ng-template #dropdown>\n  <div class=\"dropdown-content\" *ngIf=\"breadcrumbsInMenu$ | async as breadcrumbsInMenu\">\n    <ng-container *ngFor=\"let breadcrumb of breadcrumbsInMenu; let i = index\">\n      <button class=\"dropdown-breadcrumb\" (click)=\"changeBreadcrumb(i + 1)\">\n        <prizm-icon\n          class=\"dropdown-breadcrumb__icon\"\n          *ngIf=\"!!breadcrumb.icon\"\n          [size]=\"16\"\n          [iconClass]=\"breadcrumb.icon\"\n        ></prizm-icon>\n        <span class=\"dropdown-breadcrumb__name\">{{ breadcrumb?.name }}</span>\n      </button>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: ["button{border:none;outline:none;background:transparent;cursor:pointer}span{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host{height:100%;width:100%;display:flex;position:relative;overflow:hidden}:host .container{flex:1;display:flex;overflow:hidden}:host .container__fake{position:absolute;opacity:0;z-index:0;pointer-events:none}:host .container .breadcrumbs{display:flex;align-items:center}:host .container .breadcrumbs .dropdown-inner{display:flex}:host .container .breadcrumbs__chevron{display:flex;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs__dots{display:flex;align-items:center}:host .container .breadcrumbs__dots button:hover,:host .container .breadcrumbs__dots button:focus{color:var(--prizm-v3-button-primary-solid-hover)}:host .container .breadcrumbs .breadcrumb{height:32px;padding:0 6px;display:flex;align-items:center;justify-content:center;gap:8px;border:2px solid transparent;border-radius:4px}:host .container .breadcrumbs .breadcrumb__name{font-weight:400;font-size:12px;line-height:16px;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs .breadcrumb__icon{height:32px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .breadcrumbs .breadcrumb_active{cursor:auto}:host .container .breadcrumbs .breadcrumb_active .breadcrumb__name,:host .container .breadcrumbs .breadcrumb_active .breadcrumb__icon{color:var(--prizm-v3-text-icon-primary)}:host .container .breadcrumbs .breadcrumb:hover:not(.breadcrumb_active) .breadcrumb__name,:host .container .breadcrumbs .breadcrumb:hover:not(.breadcrumb_active) .breadcrumb__icon{color:var(--prizm-v3-button-primary-solid-hover);transition:.4s}:host .container .breadcrumbs .breadcrumb:focus:not(.breadcrumb_active){border-color:var(--prizm-v3-background-stroke-focus)}.dropdown-content{padding:8px 0;display:flex;flex-direction:column;background:var(--prizm-v3-background-fill-overlay)}.dropdown-content .dropdown-breadcrumb{height:32px;min-width:32px;max-width:210px;padding:0 8px;display:flex;align-items:center;gap:8px}.dropdown-content .dropdown-breadcrumb__name{height:24px;display:flex;align-items:center;font-weight:400;font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-secondary)}.dropdown-content .dropdown-breadcrumb__icon{height:32px;display:flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-secondary)}.dropdown-content .dropdown-breadcrumb:hover,.dropdown-content .dropdown-breadcrumb:focus{background:var(--prizm-v3-table-fill-row-hover)}.dots-buttons{color:var(--prizm-v3-text-icon-tertiary)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.PrizmDestroyService }]; }, propDecorators: { breadcrumbs: [{
                type: Input
            }], breadcrumbChange: [{
                type: Output
            }], containerRef: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }], fakeBreadcrumbContainer: [{
                type: ViewChild,
                args: ['breadcrumbsFake', { static: true }]
            }], breadcrumbsList: [{
                type: ViewChildren,
                args: ['breadcrumb', { read: ElementRef }]
            }], breadcrumbsItem: [{
                type: ContentChildren,
                args: [PrizmBreadcrumbDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,