import { Inject, Injectable } from '@angular/core';
import { PrizmToastRef } from './toast-ref';
import { generateToastId } from './util';
import { PRIZM_TOAST_OPTIONS } from './toast-options';
import { PrizmToastExistException } from '../../exceptions/toast-exist.exception';
import { Subject } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { PrizmToastNotExistException } from '../../exceptions/toast-not-exist.exception';
import * as i0 from "@angular/core";
export class PrizmToastService {
    constructor(options) {
        this.options = options;
        /* main storage for control by id */
        this.refs = new Map();
        this.changesSource$ = new Subject();
        this.changes$ = this.changesSource$.pipe(map(() => [...this.refs.values()].sort((a, b) => (b?.weight ?? 0) - (a?.weight ?? 0))), shareReplay(1));
        this.destroy$ = new Subject();
    }
    get size() {
        return this.refs.size;
    }
    create(content, options = {}) {
        const id = options.id || generateToastId();
        if (this.refs.has(id))
            throw new PrizmToastExistException(id);
        const ref = new PrizmToastRef(content, options.weight ?? 0, options.timer ?? this.options.timer, options.title ?? this.options.title, options.data ?? this.options.data, options.position ?? this.options.position, id, options.appearance ?? this.options.appearance, this.options, this, options.show, options.isPlatform ?? this.options.isPlatform);
        this.refs.set(id, ref);
        this.detect();
        return ref;
    }
    detect() {
        this.changesSource$.next();
    }
    updateContent(id, content) {
        if (!this.refs.has(id))
            throw new PrizmToastNotExistException(id);
        this.refs.get(id)?.updateContent(content);
    }
    updateTitle(id, title) {
        if (!this.refs.has(id))
            throw new PrizmToastNotExistException(id);
        const ref = this.refs.get(id);
        ref?.updateTitle(title);
        return ref;
    }
    delete(id) {
        if (!this.refs.has(id))
            throw new PrizmToastNotExistException(id);
        this.refs.get(id)?.destroy();
        this.refs.delete(id);
        this.detect();
    }
    deleteAll() {
        this.refs.forEach((_, id) => {
            this.delete(id);
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.unsubscribe();
    }
}
PrizmToastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmToastService, deps: [{ token: PRIZM_TOAST_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
PrizmToastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmToastService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_TOAST_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,