import { ReplaySubject, Subject, timer } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import { prizmGenerateId } from '@prizm-ui/helpers';
export class PrizmToastRef {
    get hash() {
        return this.hash_;
    }
    get buttonAppearance() {
        return this.appearance === 'info' ? 'primary' : this.appearance;
    }
    constructor(content, weight, closeAfter, title, data, position, id, appearance, options, toastService, show = true, isPlatform) {
        this.content = content;
        this.weight = weight;
        this.closeAfter = closeAfter;
        this.title = title;
        this.data = data;
        this.position = position;
        this.id = id;
        this.appearance = appearance;
        this.options = options;
        this.toastService = toastService;
        this.show = show;
        this.isPlatform = isPlatform;
        this.show$ = new ReplaySubject(1);
        this.destroy$ = new Subject();
        this.hash_ = prizmGenerateId();
        this.destroy = () => {
            this.destroy$.next();
        };
        this.close = (closeAfterMs) => {
            this.destroy();
            if (!closeAfterMs) {
                this.toastService.delete(this.id);
            }
            if (!closeAfterMs)
                return void this.changeVisibleState(false);
            timer(closeAfterMs)
                .pipe(tap(() => this.close()), takeUntil(this.destroy$))
                .subscribe();
        };
        this.open = () => {
            this.changeVisibleState(true);
        };
        this.updateContent = (content) => {
            if (content === this.content)
                return;
            this.content = content;
            this.detect();
        };
        this.updateTitle = (title) => {
            if (title === this.title)
                return;
            this.title = title;
            this.detect();
        };
        if (this.show)
            this.open();
        if (this.closeAfter)
            this.close(this.closeAfter);
    }
    changeVisibleState(show) {
        this.show$.next((this.show = show));
        this.detect();
    }
    detect() {
        this.hash_ = prizmGenerateId();
        this.toastService.detect();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtcmVmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy90b2FzdC90b2FzdC1yZWYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXJELE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBELE1BQU0sT0FBTyxhQUFhO0lBSXhCLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsVUFBcUIsQ0FBQztJQUM5RSxDQUFDO0lBQ0QsWUFDUyxPQUF5QixFQUN2QixNQUFtQyxFQUNuQyxVQUFzQyxFQUN4QyxLQUFpQyxFQUMvQixJQUErQixFQUMvQixRQUF1QyxFQUN2QyxFQUEyQixFQUMzQixVQUEyQyxFQUMzQyxPQUFpQyxFQUNqQyxZQUErQixFQUNqQyxPQUFnQixJQUFJLEVBQ2xCLFVBQTJDO1FBWDdDLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3ZCLFdBQU0sR0FBTixNQUFNLENBQTZCO1FBQ25DLGVBQVUsR0FBVixVQUFVLENBQTRCO1FBQ3hDLFVBQUssR0FBTCxLQUFLLENBQTRCO1FBQy9CLFNBQUksR0FBSixJQUFJLENBQTJCO1FBQy9CLGFBQVEsR0FBUixRQUFRLENBQStCO1FBQ3ZDLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBQzNCLGVBQVUsR0FBVixVQUFVLENBQWlDO1FBQzNDLFlBQU8sR0FBUCxPQUFPLENBQTBCO1FBQ2pDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtRQUNqQyxTQUFJLEdBQUosSUFBSSxDQUFnQjtRQUNsQixlQUFVLEdBQVYsVUFBVSxDQUFpQztRQXJCOUMsVUFBSyxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQy9CLFVBQUssR0FBRyxlQUFlLEVBQUUsQ0FBQztRQXlCbEIsWUFBTyxHQUFHLEdBQVMsRUFBRTtZQUNuQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztRQUVjLFVBQUssR0FBRyxDQUFDLFlBQXFCLEVBQVEsRUFBRTtZQUN0RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBWSxDQUFDLENBQUM7YUFDN0M7WUFFRCxJQUFJLENBQUMsWUFBWTtnQkFBRSxPQUFPLEtBQUssSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlELEtBQUssQ0FBQyxZQUFZLENBQUM7aUJBQ2hCLElBQUksQ0FDSCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQ3ZCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3pCO2lCQUNBLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLENBQUMsQ0FBQztRQUVjLFNBQUksR0FBRyxHQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztRQUVjLGtCQUFhLEdBQUcsQ0FBQyxPQUF5QixFQUFRLEVBQUU7WUFDbEUsSUFBSSxPQUFPLEtBQUssSUFBSSxDQUFDLE9BQU87Z0JBQUUsT0FBTztZQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDaEIsQ0FBQyxDQUFDO1FBRWMsZ0JBQVcsR0FBRyxDQUFDLEtBQWlDLEVBQVEsRUFBRTtZQUN4RSxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSztnQkFBRSxPQUFPO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUM7UUFyQ0EsSUFBSSxJQUFJLENBQUMsSUFBSTtZQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQXFDTyxrQkFBa0IsQ0FBQyxJQUFhO1FBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU8sTUFBTTtRQUNaLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcml6bVRvYXN0T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFByaXptVG9hc3REZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4vdG9hc3Qtb3B0aW9ucyc7XG5pbXBvcnQgeyB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBvbHltb3JwaENvbnRlbnQgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3BvbHltb3JwaCc7XG5pbXBvcnQgeyBQcml6bVRvYXN0U2VydmljZSB9IGZyb20gJy4vdG9hc3Quc2VydmljZSc7XG5pbXBvcnQgeyBwcml6bUdlbmVyYXRlSWQgfSBmcm9tICdAcHJpem0tdWkvaGVscGVycyc7XG5cbmV4cG9ydCBjbGFzcyBQcml6bVRvYXN0UmVmIHtcbiAgcHJpdmF0ZSBzaG93JCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgcHJpdmF0ZSBoYXNoXyA9IHByaXptR2VuZXJhdGVJZCgpO1xuICBnZXQgaGFzaCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmhhc2hfO1xuICB9XG4gIGdldCBidXR0b25BcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZWFyYW5jZSA9PT0gJ2luZm8nID8gJ3ByaW1hcnknIDogKHRoaXMuYXBwZWFyYW5jZSBhcyBzdHJpbmcpO1xuICB9XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjb250ZW50OiBQb2x5bW9ycGhDb250ZW50LFxuICAgIHJlYWRvbmx5IHdlaWdodDogUHJpem1Ub2FzdE9wdGlvbnNbJ3dlaWdodCddLFxuICAgIHJlYWRvbmx5IGNsb3NlQWZ0ZXI6IFByaXptVG9hc3RPcHRpb25zWyd0aW1lciddLFxuICAgIHB1YmxpYyB0aXRsZTogUHJpem1Ub2FzdE9wdGlvbnNbJ3RpdGxlJ10sXG4gICAgcmVhZG9ubHkgZGF0YTogUHJpem1Ub2FzdE9wdGlvbnNbJ2RhdGEnXSxcbiAgICByZWFkb25seSBwb3NpdGlvbjogUHJpem1Ub2FzdE9wdGlvbnNbJ3Bvc2l0aW9uJ10sXG4gICAgcmVhZG9ubHkgaWQ6IFByaXptVG9hc3RPcHRpb25zWydpZCddLFxuICAgIHJlYWRvbmx5IGFwcGVhcmFuY2U6IFByaXptVG9hc3RPcHRpb25zWydhcHBlYXJhbmNlJ10sXG4gICAgcmVhZG9ubHkgb3B0aW9uczogUHJpem1Ub2FzdERlZmF1bHRPcHRpb25zLFxuICAgIHJlYWRvbmx5IHRvYXN0U2VydmljZTogUHJpem1Ub2FzdFNlcnZpY2UsXG4gICAgcHVibGljIHNob3c6IGJvb2xlYW4gPSB0cnVlLFxuICAgIHJlYWRvbmx5IGlzUGxhdGZvcm06IFByaXptVG9hc3RPcHRpb25zWydpc1BsYXRmb3JtJ11cbiAgKSB7XG4gICAgaWYgKHRoaXMuc2hvdykgdGhpcy5vcGVuKCk7XG4gICAgaWYgKHRoaXMuY2xvc2VBZnRlcikgdGhpcy5jbG9zZSh0aGlzLmNsb3NlQWZ0ZXIpO1xuICB9XG5cbiAgcHVibGljIHJlYWRvbmx5IGRlc3Ryb3kgPSAoKTogdm9pZCA9PiB7XG4gICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gIH07XG5cbiAgcHVibGljIHJlYWRvbmx5IGNsb3NlID0gKGNsb3NlQWZ0ZXJNcz86IG51bWJlcik6IHZvaWQgPT4ge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIGlmICghY2xvc2VBZnRlck1zKSB7XG4gICAgICB0aGlzLnRvYXN0U2VydmljZS5kZWxldGUodGhpcy5pZCBhcyBzdHJpbmcpO1xuICAgIH1cblxuICAgIGlmICghY2xvc2VBZnRlck1zKSByZXR1cm4gdm9pZCB0aGlzLmNoYW5nZVZpc2libGVTdGF0ZShmYWxzZSk7XG4gICAgdGltZXIoY2xvc2VBZnRlck1zKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLmNsb3NlKCkpLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKTtcbiAgfTtcblxuICBwdWJsaWMgcmVhZG9ubHkgb3BlbiA9ICgpOiB2b2lkID0+IHtcbiAgICB0aGlzLmNoYW5nZVZpc2libGVTdGF0ZSh0cnVlKTtcbiAgfTtcblxuICBwdWJsaWMgcmVhZG9ubHkgdXBkYXRlQ29udGVudCA9IChjb250ZW50OiBQb2x5bW9ycGhDb250ZW50KTogdm9pZCA9PiB7XG4gICAgaWYgKGNvbnRlbnQgPT09IHRoaXMuY29udGVudCkgcmV0dXJuO1xuICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy5kZXRlY3QoKTtcbiAgfTtcblxuICBwdWJsaWMgcmVhZG9ubHkgdXBkYXRlVGl0bGUgPSAodGl0bGU6IFByaXptVG9hc3RPcHRpb25zWyd0aXRsZSddKTogdm9pZCA9PiB7XG4gICAgaWYgKHRpdGxlID09PSB0aGlzLnRpdGxlKSByZXR1cm47XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuZGV0ZWN0KCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBjaGFuZ2VWaXNpYmxlU3RhdGUoc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2hvdyQubmV4dCgodGhpcy5zaG93ID0gc2hvdykpO1xuICAgIHRoaXMuZGV0ZWN0KCk7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdCgpOiB2b2lkIHtcbiAgICB0aGlzLmhhc2hfID0gcHJpem1HZW5lcmF0ZUlkKCk7XG4gICAgdGhpcy50b2FzdFNlcnZpY2UuZGV0ZWN0KCk7XG4gIH1cbn1cbiJdfQ==