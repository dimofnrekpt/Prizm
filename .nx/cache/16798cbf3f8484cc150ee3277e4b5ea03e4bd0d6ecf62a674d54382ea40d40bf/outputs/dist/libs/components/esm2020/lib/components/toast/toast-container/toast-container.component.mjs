import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation, } from '@angular/core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { PrizmToastPosition } from '../types';
import { PrizmToastService } from '../toast.service';
import { PrizmAbstractTestId } from '../../../abstract/interactive';
import * as i0 from "@angular/core";
import * as i1 from "../toast.service";
import * as i2 from "@angular/common";
import * as i3 from "../../scrollbar/scrollbar.component";
import * as i4 from "../toast-wrapper/toast-wrapper.component";
export class PrizmToastContainerComponent extends PrizmAbstractTestId {
    constructor(prizmToastService) {
        super();
        this.prizmToastService = prizmToastService;
        this.testId_ = 'ui_toast_container';
    }
    ngOnChanges() {
        this.refs$ =
            (this.containerId
                ? this.prizmToastService.changes$.pipe(map(refs => refs.filter(ref => ref.position === this.containerId)))
                : this.refs$) ?? of([]);
    }
    trackByHash(_, item) {
        return item.hash;
    }
}
PrizmToastContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmToastContainerComponent, deps: [{ token: i1.PrizmToastService }], target: i0.ɵɵFactoryTarget.Component });
PrizmToastContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmToastContainerComponent, selector: "prizm-toast-container", inputs: { containerId: "containerId", position: "position" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<prizm-scrollbar [visibility]=\"'hidden'\">\n  <div class=\"prizm-toast-container {{ position }}\">\n    <!--  TODO think how to add focusable sub elements [focusTrap] -->\n    <ng-container *ngFor=\"let ref of refs$ | async; trackBy: trackByHash\">\n      <prizm-toast-wrapper [ref]=\"ref\"></prizm-toast-wrapper>\n    </ng-container>\n  </div>\n</prizm-scrollbar>\n", styles: ["prizm-scrollbar{max-height:var(--prizm-toast-max-height, 90vh)}.prizm-toast-container{display:flex;flex-flow:column;gap:var(--prizm-toast-gap, 10px);padding:var(--prizm-toast-padding, 10px)}.prizm-toast-container.tl,.prizm-toast-container.bl{align-items:flex-start}.prizm-toast-container.tm,.prizm-toast-container.bm{align-items:center}.prizm-toast-container.tr,.prizm-toast-container.br{align-items:flex-end}*:focus-visible{outline:none}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: i3.PrizmScrollbarComponent, selector: "prizm-scrollbar", inputs: ["visibility"] }, { kind: "component", type: i4.ToastWrapperComponent, selector: "prizm-toast-wrapper", inputs: ["ref"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmToastContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-toast-container', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<prizm-scrollbar [visibility]=\"'hidden'\">\n  <div class=\"prizm-toast-container {{ position }}\">\n    <!--  TODO think how to add focusable sub elements [focusTrap] -->\n    <ng-container *ngFor=\"let ref of refs$ | async; trackBy: trackByHash\">\n      <prizm-toast-wrapper [ref]=\"ref\"></prizm-toast-wrapper>\n    </ng-container>\n  </div>\n</prizm-scrollbar>\n", styles: ["prizm-scrollbar{max-height:var(--prizm-toast-max-height, 90vh)}.prizm-toast-container{display:flex;flex-flow:column;gap:var(--prizm-toast-gap, 10px);padding:var(--prizm-toast-padding, 10px)}.prizm-toast-container.tl,.prizm-toast-container.bl{align-items:flex-start}.prizm-toast-container.tm,.prizm-toast-container.bm{align-items:center}.prizm-toast-container.tr,.prizm-toast-container.br{align-items:flex-end}*:focus-visible{outline:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.PrizmToastService }]; }, propDecorators: { containerId: [{
                type: Input
            }], position: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvdG9hc3QvdG9hc3QtY29udGFpbmVyL3RvYXN0LWNvbnRhaW5lci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3RvYXN0L3RvYXN0LWNvbnRhaW5lci90b2FzdC1jb250YWluZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBRVQsS0FBSyxFQUVMLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDOUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7OztBQVNwRSxNQUFNLE9BQU8sNEJBQTZCLFNBQVEsbUJBQW1CO0lBU25FLFlBQTZCLGlCQUFvQztRQUMvRCxLQUFLLEVBQUUsQ0FBQztRQURtQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRi9DLFlBQU8sR0FBRyxvQkFBb0IsQ0FBQztJQUlqRCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxLQUFLO1lBQ1IsQ0FBQyxJQUFJLENBQUMsV0FBVztnQkFDZixDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUNuRTtnQkFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sV0FBVyxDQUFDLENBQVMsRUFBRSxJQUFtQjtRQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQzs7eUhBeEJVLDRCQUE0Qjs2R0FBNUIsNEJBQTRCLHVLQ3RCekMsaVhBUUE7MkZEY2EsNEJBQTRCO2tCQVB4QyxTQUFTOytCQUNFLHVCQUF1QixtQkFHaEIsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSTt3R0FNNUIsV0FBVztzQkFBbkIsS0FBSztnQkFDRyxRQUFRO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByaXptVG9hc3RSZWYgfSBmcm9tICcuLi90b2FzdC1yZWYnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFByaXptVG9hc3RQb3NpdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFByaXptVG9hc3RTZXJ2aWNlIH0gZnJvbSAnLi4vdG9hc3Quc2VydmljZSc7XG5pbXBvcnQgeyBQcml6bUFic3RyYWN0VGVzdElkIH0gZnJvbSAnLi4vLi4vLi4vYWJzdHJhY3QvaW50ZXJhY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwcml6bS10b2FzdC1jb250YWluZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vdG9hc3QtY29udGFpbmVyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdG9hc3QtY29udGFpbmVyLmNvbXBvbmVudC5sZXNzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBQcml6bVRvYXN0Q29udGFpbmVyQ29tcG9uZW50IGV4dGVuZHMgUHJpem1BYnN0cmFjdFRlc3RJZCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIC8qIGdldCBmcm9tIG92ZXJsYXkgc2VydmljZSBhZnRlciBhZGQgdGhpcyBjb21wb25lbnQgKi9cbiAgcmVmcyQhOiBPYnNlcnZhYmxlPFByaXptVG9hc3RSZWZbXT47XG5cbiAgQElucHV0KCkgY29udGFpbmVySWQ/OiBzdHJpbmc7XG4gIEBJbnB1dCgpIHBvc2l0aW9uPzogUHJpem1Ub2FzdFBvc2l0aW9uO1xuXG4gIG92ZXJyaWRlIHJlYWRvbmx5IHRlc3RJZF8gPSAndWlfdG9hc3RfY29udGFpbmVyJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByaXptVG9hc3RTZXJ2aWNlOiBQcml6bVRvYXN0U2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLnJlZnMkID1cbiAgICAgICh0aGlzLmNvbnRhaW5lcklkXG4gICAgICAgID8gdGhpcy5wcml6bVRvYXN0U2VydmljZS5jaGFuZ2VzJC5waXBlKFxuICAgICAgICAgICAgbWFwKHJlZnMgPT4gcmVmcy5maWx0ZXIocmVmID0+IHJlZi5wb3NpdGlvbiA9PT0gdGhpcy5jb250YWluZXJJZCkpXG4gICAgICAgICAgKVxuICAgICAgICA6IHRoaXMucmVmcyQpID8/IG9mKFtdKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmFja0J5SGFzaChfOiBudW1iZXIsIGl0ZW06IFByaXptVG9hc3RSZWYpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtLmhhc2g7XG4gIH1cbn1cbiIsIjxwcml6bS1zY3JvbGxiYXIgW3Zpc2liaWxpdHldPVwiJ2hpZGRlbidcIj5cbiAgPGRpdiBjbGFzcz1cInByaXptLXRvYXN0LWNvbnRhaW5lciB7eyBwb3NpdGlvbiB9fVwiPlxuICAgIDwhLS0gIFRPRE8gdGhpbmsgaG93IHRvIGFkZCBmb2N1c2FibGUgc3ViIGVsZW1lbnRzIFtmb2N1c1RyYXBdIC0tPlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHJlZiBvZiByZWZzJCB8IGFzeW5jOyB0cmFja0J5OiB0cmFja0J5SGFzaFwiPlxuICAgICAgPHByaXptLXRvYXN0LXdyYXBwZXIgW3JlZl09XCJyZWZcIj48L3ByaXptLXRvYXN0LXdyYXBwZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9wcml6bS1zY3JvbGxiYXI+XG4iXX0=