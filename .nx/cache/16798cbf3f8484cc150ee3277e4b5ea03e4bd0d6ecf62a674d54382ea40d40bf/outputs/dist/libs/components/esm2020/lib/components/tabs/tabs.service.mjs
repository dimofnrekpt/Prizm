import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, concat, of, Subject } from 'rxjs';
import { distinctUntilChanged, map, take, takeUntil, tap } from 'rxjs/operators';
import { filterTruthy, PrizmDestroyService, prizmFromMutationObserver$ } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@prizm-ui/helpers";
export class PrizmTabsService {
    get changeParent$() {
        return this.changeParent$_;
    }
    get activeTabIdx() {
        return this.activeTabIdx$$.value;
    }
    get tabs$() {
        return concat(of(this.tabs), this.changes$$);
    }
    constructor(destroy) {
        this.destroy = destroy;
        this.tabs = new Map();
        this.changes$$ = new Subject();
        this.removed$$ = new Subject();
        this.closeTab$$ = new Subject();
        this.activeTabIdx$$ = new BehaviorSubject(0);
        this.activeTabIdx$ = this.activeTabIdx$$.pipe(distinctUntilChanged());
        this.canOpenTab = null;
    }
    initObservingTabsParent(el) {
        this.changeParent$_ = prizmFromMutationObserver$(el, {
            subtree: true,
            childList: true,
        });
    }
    isActiveTab(tab) {
        return combineLatest([this.activeTabIdx$$, this.tabs$]).pipe(map(([activeTabIdx]) => {
            const tabIdx = this.findTabIdx(tab);
            return activeTabIdx === tabIdx;
        }), distinctUntilChanged());
    }
    getTabByIdx(idx) {
        return this.tabs.get(idx);
    }
    moveTab(idx, toIndex, tab) {
        if (tab !== this.getTabByIdx(idx))
            return;
        this.tabs.delete(idx);
        this.updateTab(tab, toIndex);
        if (this.activeTabIdx$$.value === idx) {
            this.activeTabIdx$$.next(toIndex);
        }
    }
    updateTab(tab, idx) {
        const tabIdx = typeof idx !== 'number' ? this.tabs.size : idx;
        if (this.tabs.get(tabIdx) === tab)
            return;
        this.tabs.set(tabIdx, tab);
        this.changes$$.next(this.tabs);
    }
    removeTab(tab) {
        const idx = this.findTabIdx(tab);
        this.tabs.delete(idx);
        this.removed$$.next(tab);
        const newIdx = this.correctActiveTabIdx(idx);
        if (idx !== newIdx)
            this.changes$$.next(this.tabs);
    }
    correctActiveTabIdx(idx = this.activeTabIdx$$.value) {
        if (this.tabs.has(this.activeTabIdx$$.value))
            return this.activeTabIdx$$.value;
        if (!this.tabs.size)
            return -1;
        const indexes = Array.from(this.tabs.keys()).sort();
        const nextIdx = indexes.find(i => i > idx);
        const newIdx = nextIdx ?? indexes.pop();
        this.activeTabIdx$$.next(newIdx);
        return newIdx;
    }
    findTabIdx(tab) {
        return Array.from(this.tabs.entries()).find(([, t]) => t === tab)?.[0] ?? -1;
    }
    selectTab(tab) {
        const idx = this.findTabIdx(tab);
        if (idx === -1) {
            return;
        }
        this.selectTabIfCanOpen(tab, idx);
    }
    selectTabIfCanOpen(tab, idx) {
        if (idx === this.activeTabIdx) {
            return;
        }
        (typeof this.canOpenTab === 'function' ? this.canOpenTab(tab) : of(true))
            .pipe(take(1), filterTruthy(), tap(() => this.activeTabIdx$$.next(idx)), takeUntil(this.destroy))
            .subscribe();
    }
    ngOnDestroy() {
        this.closeTab$$.complete();
        this.closeTab$$.unsubscribe();
        this.activeTabIdx$$.complete();
        this.activeTabIdx$$.unsubscribe();
        this.changes$$.unsubscribe();
        this.changes$$.unsubscribe();
    }
    updateActiveTab(idx) {
        this.activeTabIdx$$.next(idx);
    }
}
PrizmTabsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTabsService, deps: [{ token: i1.PrizmDestroyService }], target: i0.ɵɵFactoryTarget.Injectable });
PrizmTabsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTabsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmTabsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PrizmDestroyService }]; } });
//# sourceMappingURL=data:application/json;base64,