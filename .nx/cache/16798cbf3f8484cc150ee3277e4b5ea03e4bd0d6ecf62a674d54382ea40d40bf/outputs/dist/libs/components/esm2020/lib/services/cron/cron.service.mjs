import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, map, shareReplay } from 'rxjs/operators';
import { prizmCronConvertToObject } from './util';
import * as i0 from "@angular/core";
export class PrizmCronService {
    constructor() {
        this.value$$ = new BehaviorSubject(prizmCronConvertToObject('0 0 * ? * * *'));
        this.value$ = this.value$$.asObservable();
        this.valueAsString$ = this.value$.pipe(map(v => this.convertToCronString(v)), shareReplay(1));
        this.second$ = this.value$.pipe(map(value => value.second), distinctUntilChanged());
        this.dayOfWeek$ = this.value$.pipe(map(value => value.dayOfWeek), distinctUntilChanged());
        this.minute$ = this.value$.pipe(map(value => value.minute), distinctUntilChanged());
        this.hour$ = this.value$.pipe(map(value => value.hour), distinctUntilChanged());
        this.dayOfMonth$ = this.value$.pipe(map(value => value.dayOfMonth), distinctUntilChanged());
        this.month$ = this.value$.pipe(map(value => value.month), distinctUntilChanged());
        this.year$ = this.value$.pipe(map(value => value.year), distinctUntilChanged());
    }
    get value() {
        return this.value$$.value;
    }
    get valueAsString() {
        return this.convertToCronString(this.value);
    }
    updateWith(value) {
        const obj = value && typeof value === 'object' ? value : prizmCronConvertToObject(value);
        this.value$$.next({
            ...this.value$$.value,
            ...obj,
        });
    }
    convertToCronString(v) {
        return `${v.second} ${v.minute} ${v.hour} ${v.dayOfMonth} ${v.month} ${v.dayOfWeek} ${v.year}`;
    }
}
PrizmCronService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
PrizmCronService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvc2VydmljZXMvY3Jvbi9jcm9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sUUFBUSxDQUFDOztBQUdsRCxNQUFNLE9BQU8sZ0JBQWdCO0lBRDdCO1FBRW1CLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FDNUMsd0JBQXdCLENBQUMsZUFBZSxDQUFDLENBQzFDLENBQUM7UUFDYyxXQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQU9yQyxtQkFBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDckMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7UUFDYyxZQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3hDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFDMUIsb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztRQUNjLGVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUM3QixvQkFBb0IsRUFBRSxDQUN2QixDQUFDO1FBQ2MsWUFBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN4QyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQzFCLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7UUFDYyxVQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3RDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDeEIsb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztRQUNjLGdCQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFDOUIsb0JBQW9CLEVBQUUsQ0FDdkIsQ0FBQztRQUNjLFdBQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUN6QixvQkFBb0IsRUFBRSxDQUN2QixDQUFDO1FBQ2MsVUFBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUN0QyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ3hCLG9CQUFvQixFQUFFLENBQ3ZCLENBQUM7S0FjSDtJQW5EQyxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFDRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQW9DTSxVQUFVLENBQUMsS0FBNkM7UUFDN0QsTUFBTSxHQUFHLEdBQUcsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxLQUFlLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztZQUNoQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztZQUNyQixHQUFHLEdBQUc7U0FDUCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ08sbUJBQW1CLENBQUMsQ0FBdUI7UUFDakQsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqRyxDQUFDOzs2R0F2RFUsZ0JBQWdCO2lIQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFENUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc2hhcmVSZXBsYXksIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFByaXptQ3JvblZhbHVlT2JqZWN0IH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQgeyBwcml6bUNyb25Db252ZXJ0VG9PYmplY3QgfSBmcm9tICcuL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJpem1Dcm9uU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWUkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UHJpem1Dcm9uVmFsdWVPYmplY3Q+KFxuICAgIHByaXptQ3JvbkNvbnZlcnRUb09iamVjdCgnMCAwICogPyAqICogKicpXG4gICk7XG4gIHB1YmxpYyByZWFkb25seSB2YWx1ZSQgPSB0aGlzLnZhbHVlJCQuYXNPYnNlcnZhYmxlKCk7XG4gIGdldCB2YWx1ZSgpOiBQcml6bUNyb25WYWx1ZU9iamVjdCB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUkJC52YWx1ZTtcbiAgfVxuICBnZXQgdmFsdWVBc1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRUb0Nyb25TdHJpbmcodGhpcy52YWx1ZSk7XG4gIH1cbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlQXNTdHJpbmckID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodiA9PiB0aGlzLmNvbnZlcnRUb0Nyb25TdHJpbmcodikpLFxuICAgIHNoYXJlUmVwbGF5KDEpXG4gICk7XG4gIHB1YmxpYyByZWFkb25seSBzZWNvbmQkID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUuc2Vjb25kKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIHB1YmxpYyByZWFkb25seSBkYXlPZldlZWskID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUuZGF5T2ZXZWVrKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIHB1YmxpYyByZWFkb25seSBtaW51dGUkID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUubWludXRlKSxcbiAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICk7XG4gIHB1YmxpYyByZWFkb25seSBob3VyJCA9IHRoaXMudmFsdWUkLnBpcGUoXG4gICAgbWFwKHZhbHVlID0+IHZhbHVlLmhvdXIpLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgKTtcbiAgcHVibGljIHJlYWRvbmx5IGRheU9mTW9udGgkID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUuZGF5T2ZNb250aCksXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICApO1xuICBwdWJsaWMgcmVhZG9ubHkgbW9udGgkID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUubW9udGgpLFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgKTtcbiAgcHVibGljIHJlYWRvbmx5IHllYXIkID0gdGhpcy52YWx1ZSQucGlwZShcbiAgICBtYXAodmFsdWUgPT4gdmFsdWUueWVhciksXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICApO1xuXG4gIHB1YmxpYyB1cGRhdGVXaXRoKG9qYjogUGFydGlhbDxQcml6bUNyb25WYWx1ZU9iamVjdD4pOiB2b2lkO1xuICBwdWJsaWMgdXBkYXRlV2l0aChvamI6IHN0cmluZyk6IHZvaWQ7XG4gIHB1YmxpYyB1cGRhdGVXaXRoKHZhbHVlOiBQYXJ0aWFsPFByaXptQ3JvblZhbHVlT2JqZWN0PiB8IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG9iaiA9IHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZSA6IHByaXptQ3JvbkNvbnZlcnRUb09iamVjdCh2YWx1ZSBhcyBzdHJpbmcpO1xuICAgIHRoaXMudmFsdWUkJC5uZXh0KHtcbiAgICAgIC4uLnRoaXMudmFsdWUkJC52YWx1ZSxcbiAgICAgIC4uLm9iaixcbiAgICB9KTtcbiAgfVxuICBwcml2YXRlIGNvbnZlcnRUb0Nyb25TdHJpbmcodjogUHJpem1Dcm9uVmFsdWVPYmplY3QpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt2LnNlY29uZH0gJHt2Lm1pbnV0ZX0gJHt2LmhvdXJ9ICR7di5kYXlPZk1vbnRofSAke3YubW9udGh9ICR7di5kYXlPZldlZWt9ICR7di55ZWFyfWA7XG4gIH1cbn1cbiJdfQ==