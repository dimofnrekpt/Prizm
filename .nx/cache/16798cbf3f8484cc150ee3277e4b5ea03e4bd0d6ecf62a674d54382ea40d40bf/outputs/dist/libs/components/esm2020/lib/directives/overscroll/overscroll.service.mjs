import { Injectable, NgZone } from '@angular/core';
import { merge } from 'rxjs';
import { filter, mapTo, switchMap, tap } from 'rxjs/operators';
import { prizmTypedFromEvent, prizmZoneFree } from '../../observables';
import { prizmCanScroll, prizmGetScrollParent } from '../../util/dom';
import * as i0 from "@angular/core";
export class PrizmOverscrollService {
    constructor(ngZone) {
        this.ngZone = ngZone;
    }
    run(mode, nativeElement) {
        return merge(prizmTypedFromEvent(nativeElement, 'wheel', { passive: false }).pipe(filter(() => this.isEnabled(mode)), prizmZoneFree(this.ngZone), tap(event => {
            this.processEvent(mode, event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);
        })), prizmTypedFromEvent(nativeElement, 'touchstart', { passive: true }).pipe(switchMap(({ touches }) => {
            let { clientX, clientY } = touches[0];
            let deltaX = 0;
            let deltaY = 0;
            let vertical;
            return prizmTypedFromEvent(nativeElement, 'touchmove', {
                passive: false,
            }).pipe(filter(() => this.isEnabled(mode)), tap(event => {
                // We have to have it in tap instead of subscribe due to variables in closure
                const changedTouch = event.changedTouches[0];
                deltaX = clientX - changedTouch.clientX;
                deltaY = clientY - changedTouch.clientY;
                clientX = changedTouch.clientX;
                clientY = changedTouch.clientY;
                if (vertical === undefined) {
                    vertical = Math.abs(deltaY) > Math.abs(deltaX);
                }
                this.processEvent(mode, event, vertical, vertical ? deltaY < 0 : deltaX < 0);
            }));
        }), prizmZoneFree(this.ngZone))).pipe(mapTo(void 0));
    }
    isEnabled(mode) {
        return mode !== 'none';
    }
    processEvent(mode, event, vertical, negative) {
        const { target, currentTarget, cancelable } = event;
        if (!cancelable || !(target instanceof Element) || target?.type === 'range') {
            return;
        }
        // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior
        if (mode === 'all' &&
            ((vertical && !currentTarget.contains(prizmGetScrollParent(target))) ||
                (!vertical && !currentTarget.contains(prizmGetScrollParent(target, false))))) {
            event.preventDefault();
            return;
        }
        // This is Safari/IE/Edge fallback
        if (vertical &&
            ((negative && !prizmCanScroll(target, currentTarget, true, false)) ||
                (!negative && !prizmCanScroll(target, currentTarget, true, true)))) {
            event.preventDefault();
            return;
        }
        if (!vertical &&
            ((negative && !prizmCanScroll(target, currentTarget, false, false)) ||
                (!negative && !prizmCanScroll(target, currentTarget, false, true)))) {
            event.preventDefault();
        }
    }
}
PrizmOverscrollService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmOverscrollService, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
PrizmOverscrollService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmOverscrollService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmOverscrollService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,