import { ElementRef, InjectionToken } from '@angular/core';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { merge, Subject } from 'rxjs';
import { WINDOW } from '@ng-web-apis/common';
import { DOCUMENT } from '@angular/common';
import { prizmTypedFromEvent } from '../../../observables';
import { prizmContainsOrAfter, prizmIsCurrentTarget } from '../../../util/dom';
import { filter, switchMapTo, take, takeUntil } from 'rxjs/operators';
import { PrizmOverlayContentToken } from '../../../modules/overlay';
export const PRIZM_DIALOGS_CLOSE = new InjectionToken('Default close event', {
    factory: () => new Subject().asObservable(),
});
const SCROLLBAR_PLACEHOLDER = 17;
export const PRIZM_DIALOG_CLOSE_STREAM = new InjectionToken('Dialogs closing stream');
export const PRIZM_DIALOG_PROVIDERS = [
    PrizmDestroyService,
    {
        provide: PRIZM_DIALOG_CLOSE_STREAM,
        deps: [DOCUMENT, WINDOW, ElementRef, PRIZM_DIALOGS_CLOSE, PrizmDestroyService, PrizmOverlayContentToken],
        useFactory: prizmDialogCloseStreamFactory,
    },
];
export function prizmDialogCloseStreamFactory(documentRef, windowRef, { nativeElement }, close$, destroy$, content) {
    const { dismissible, parentContainer } = content.props.context;
    return dismissible
        ? merge(
        /* on click esc */
        prizmTypedFromEvent(documentRef, 'keydown').pipe(filter(({ key, target }) => key === 'Escape' &&
            target instanceof Element &&
            (!prizmContainsOrAfter(nativeElement, target) || nativeElement.contains(target)))), 
        /* on backdrop click*/
        prizmTypedFromEvent(nativeElement, 'click').pipe(filter(prizmIsCurrentTarget)), 
        /* on outdoor mouse events */
        prizmTypedFromEvent(documentRef, 'mousedown').pipe(filter(({ target, clientX }) => target instanceof Element &&
            (parentContainer && parentContainer instanceof HTMLElement
                ? prizmContainsOrAfter(parentContainer, target)
                : windowRef.innerWidth - clientX > SCROLLBAR_PLACEHOLDER) &&
            !prizmContainsOrAfter(nativeElement, target)), switchMapTo(prizmTypedFromEvent(documentRef, 'mouseup').pipe(take(1), filter(({ target }) => target instanceof Element && !prizmContainsOrAfter(nativeElement, target))))), 
        /* on custom close event */
        close$).pipe(takeUntil(destroy$))
        : close$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL2RpYWxvZ3MvZGlhbG9nL2RpYWxvZy1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxLQUFLLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3BFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUFtQixxQkFBcUIsRUFBRTtJQUM3RixPQUFPLEVBQUUsR0FBcUIsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFRLENBQUMsWUFBWSxFQUFFO0NBQ3BFLENBQUMsQ0FBQztBQUVILE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLElBQUksY0FBYyxDQUFzQix3QkFBd0IsQ0FBQyxDQUFDO0FBQzNHLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFlO0lBQ2hELG1CQUFtQjtJQUNuQjtRQUNFLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsd0JBQXdCLENBQUM7UUFDeEcsVUFBVSxFQUFFLDZCQUE2QjtLQUMxQztDQUNGLENBQUM7QUFFRixNQUFNLFVBQVUsNkJBQTZCLENBQzNDLFdBQXFCLEVBQ3JCLFNBQWlCLEVBQ2pCLEVBQUUsYUFBYSxFQUEyQixFQUMxQyxNQUF3QixFQUN4QixRQUE2QixFQUM3QixPQUE0QjtJQUU1QixNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQy9ELE9BQU8sV0FBVztRQUNoQixDQUFDLENBQUMsS0FBSztRQUNILGtCQUFrQjtRQUNsQixtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUM5QyxNQUFNLENBQ0osQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQ2xCLEdBQUcsS0FBSyxRQUFRO1lBQ2hCLE1BQU0sWUFBWSxPQUFPO1lBQ3pCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUNuRixDQUNGO1FBQ0Qsc0JBQXNCO1FBQ3RCLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDOUUsNkJBQTZCO1FBQzdCLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQ2hELE1BQU0sQ0FDSixDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FDdEIsTUFBTSxZQUFZLE9BQU87WUFDekIsQ0FBQyxlQUFlLElBQUksZUFBZSxZQUFZLFdBQVc7Z0JBQ3hELENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO2dCQUMvQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxPQUFPLEdBQUcscUJBQXFCLENBQUM7WUFDM0QsQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQy9DLEVBQ0QsV0FBVyxDQUNULG1CQUFtQixDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQzlDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxNQUFNLENBQ0osQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxNQUFNLFlBQVksT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUMxRixDQUNGLENBQ0YsQ0FDRjtRQUNELDJCQUEyQjtRQUMzQixNQUFNLENBQ1AsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcml6bURlc3Ryb3lTZXJ2aWNlIH0gZnJvbSAnQHByaXptLXVpL2hlbHBlcnMnO1xuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFdJTkRPVyB9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgcHJpem1UeXBlZEZyb21FdmVudCB9IGZyb20gJy4uLy4uLy4uL29ic2VydmFibGVzJztcbmltcG9ydCB7IHByaXptQ29udGFpbnNPckFmdGVyLCBwcml6bUlzQ3VycmVudFRhcmdldCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGZpbHRlciwgc3dpdGNoTWFwVG8sIHRha2UsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFByaXptT3ZlcmxheUNvbnRlbnRUb2tlbiB9IGZyb20gJy4uLy4uLy4uL21vZHVsZXMvb3ZlcmxheSc7XG5pbXBvcnQgeyBQcml6bU92ZXJsYXlDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vbW9kdWxlcy9vdmVybGF5L21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9ESUFMT0dTX0NMT1NFID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8dm9pZD4+KCdEZWZhdWx0IGNsb3NlIGV2ZW50Jywge1xuICBmYWN0b3J5OiAoKTogT2JzZXJ2YWJsZTx2b2lkPiA9PiBuZXcgU3ViamVjdDx2b2lkPigpLmFzT2JzZXJ2YWJsZSgpLFxufSk7XG5cbmNvbnN0IFNDUk9MTEJBUl9QTEFDRUhPTERFUiA9IDE3O1xuXG5leHBvcnQgY29uc3QgUFJJWk1fRElBTE9HX0NMT1NFX1NUUkVBTSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxPYnNlcnZhYmxlPHVua25vd24+PignRGlhbG9ncyBjbG9zaW5nIHN0cmVhbScpO1xuZXhwb3J0IGNvbnN0IFBSSVpNX0RJQUxPR19QUk9WSURFUlM6IFByb3ZpZGVyW10gPSBbXG4gIFByaXptRGVzdHJveVNlcnZpY2UsXG4gIHtcbiAgICBwcm92aWRlOiBQUklaTV9ESUFMT0dfQ0xPU0VfU1RSRUFNLFxuICAgIGRlcHM6IFtET0NVTUVOVCwgV0lORE9XLCBFbGVtZW50UmVmLCBQUklaTV9ESUFMT0dTX0NMT1NFLCBQcml6bURlc3Ryb3lTZXJ2aWNlLCBQcml6bU92ZXJsYXlDb250ZW50VG9rZW5dLFxuICAgIHVzZUZhY3Rvcnk6IHByaXptRGlhbG9nQ2xvc2VTdHJlYW1GYWN0b3J5LFxuICB9LFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByaXptRGlhbG9nQ2xvc2VTdHJlYW1GYWN0b3J5KFxuICBkb2N1bWVudFJlZjogRG9jdW1lbnQsXG4gIHdpbmRvd1JlZjogV2luZG93LFxuICB7IG5hdGl2ZUVsZW1lbnQgfTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gIGNsb3NlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgZGVzdHJveSQ6IFByaXptRGVzdHJveVNlcnZpY2UsXG4gIGNvbnRlbnQ6IFByaXptT3ZlcmxheUNvbnRlbnRcbik6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICBjb25zdCB7IGRpc21pc3NpYmxlLCBwYXJlbnRDb250YWluZXIgfSA9IGNvbnRlbnQucHJvcHMuY29udGV4dDtcbiAgcmV0dXJuIGRpc21pc3NpYmxlXG4gICAgPyBtZXJnZShcbiAgICAgICAgLyogb24gY2xpY2sgZXNjICovXG4gICAgICAgIHByaXptVHlwZWRGcm9tRXZlbnQoZG9jdW1lbnRSZWYsICdrZXlkb3duJykucGlwZShcbiAgICAgICAgICBmaWx0ZXIoXG4gICAgICAgICAgICAoeyBrZXksIHRhcmdldCB9KSA9PlxuICAgICAgICAgICAgICBrZXkgPT09ICdFc2NhcGUnICYmXG4gICAgICAgICAgICAgIHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgKCFwcml6bUNvbnRhaW5zT3JBZnRlcihuYXRpdmVFbGVtZW50LCB0YXJnZXQpIHx8IG5hdGl2ZUVsZW1lbnQuY29udGFpbnModGFyZ2V0KSlcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIC8qIG9uIGJhY2tkcm9wIGNsaWNrKi9cbiAgICAgICAgcHJpem1UeXBlZEZyb21FdmVudChuYXRpdmVFbGVtZW50LCAnY2xpY2snKS5waXBlKGZpbHRlcihwcml6bUlzQ3VycmVudFRhcmdldCkpLFxuICAgICAgICAvKiBvbiBvdXRkb29yIG1vdXNlIGV2ZW50cyAqL1xuICAgICAgICBwcml6bVR5cGVkRnJvbUV2ZW50KGRvY3VtZW50UmVmLCAnbW91c2Vkb3duJykucGlwZShcbiAgICAgICAgICBmaWx0ZXIoXG4gICAgICAgICAgICAoeyB0YXJnZXQsIGNsaWVudFggfSkgPT5cbiAgICAgICAgICAgICAgdGFyZ2V0IGluc3RhbmNlb2YgRWxlbWVudCAmJlxuICAgICAgICAgICAgICAocGFyZW50Q29udGFpbmVyICYmIHBhcmVudENvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XG4gICAgICAgICAgICAgICAgPyBwcml6bUNvbnRhaW5zT3JBZnRlcihwYXJlbnRDb250YWluZXIsIHRhcmdldClcbiAgICAgICAgICAgICAgICA6IHdpbmRvd1JlZi5pbm5lcldpZHRoIC0gY2xpZW50WCA+IFNDUk9MTEJBUl9QTEFDRUhPTERFUikgJiZcbiAgICAgICAgICAgICAgIXByaXptQ29udGFpbnNPckFmdGVyKG5hdGl2ZUVsZW1lbnQsIHRhcmdldClcbiAgICAgICAgICApLFxuICAgICAgICAgIHN3aXRjaE1hcFRvKFxuICAgICAgICAgICAgcHJpem1UeXBlZEZyb21FdmVudChkb2N1bWVudFJlZiwgJ21vdXNldXAnKS5waXBlKFxuICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICBmaWx0ZXIoXG4gICAgICAgICAgICAgICAgKHsgdGFyZ2V0IH0pID0+IHRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgIXByaXptQ29udGFpbnNPckFmdGVyKG5hdGl2ZUVsZW1lbnQsIHRhcmdldClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgLyogb24gY3VzdG9tIGNsb3NlIGV2ZW50ICovXG4gICAgICAgIGNsb3NlJFxuICAgICAgKS5waXBlKHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgOiBjbG9zZSQ7XG59XG4iXX0=