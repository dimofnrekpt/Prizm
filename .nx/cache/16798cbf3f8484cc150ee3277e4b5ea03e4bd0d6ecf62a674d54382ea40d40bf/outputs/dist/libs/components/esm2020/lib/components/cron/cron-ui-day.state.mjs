import { Injectable } from '@angular/core';
import { PrizmCronUiDayType } from './model';
import { PrizmCronUiBaseState } from './cron-ui-base.state';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmCronService } from '../../services/cron';
import { getArrWithStringNumbers, getArrWithWeekNumber, getCarousel, getCarouselWeek, prizmConvertDayToType, } from './util';
import { combineLatest } from 'rxjs';
import { filter, map, takeUntil, tap } from 'rxjs/operators';
import { PRIZM_CRON_UI_DAYS_OF_WEEK_CRON_KEYS } from './const';
import * as i0 from "@angular/core";
import * as i1 from "../../services/cron";
import * as i2 from "@prizm-ui/helpers";
export class PrizmCronUiDayState extends PrizmCronUiBaseState {
    constructor(cron, destroy$) {
        super(cron.value$.pipe(map(i => [i.dayOfMonth, i.dayOfWeek])), PrizmCronUiDayType.every, PrizmCronUiDayType, {
            value: {
                start: '0',
                end: '1',
            },
            list: {
                start: getCarousel(31, 0),
                end: getCarousel(31, 0),
            },
        }, {
            value: ['0'],
            list: getArrWithStringNumbers(31, 0, false).map((i, idx) => ({
                key: i,
                value: i,
            })),
        }, {
            list: {
                on: getCarousel(31, 1),
                after: getCarousel(31, 0),
            },
            value: {
                on: '1',
                after: '0',
            },
        });
        this.cron = cron;
        this.destroy$ = destroy$;
        this.lastChosenDayOfMonthValue = '1';
        this.selectedDayOfWeek = [];
        this.afterNumberOfWeekList = getCarousel(5, 1);
        this.onNumberOfWeekListValue = this.afterNumberOfWeekList.first;
        this.dayOfMonthItems = getArrWithStringNumbers(31, 1).map((key, index) => ({
            key: key,
            value: key,
        }));
        this.dayOfWeekItems = getArrWithWeekNumber().map(i => ({
            key: PRIZM_CRON_UI_DAYS_OF_WEEK_CRON_KEYS[parseInt(i, 10) - 1],
            value: i,
        }));
        this.carouselWeek = getCarouselWeek();
        this.carouselWeekLastChosenDayOfChosenWeek = getCarouselWeek();
        this.carouselWeekLastChosenDayOfWeek = getCarouselWeek();
        this.carouselWeekAfterDayOfWeek = getCarouselWeek();
        this.lastChosenDayOfWeekValue2 = this.carouselWeek.first;
        this.lastChosenDayOfWeekValue = this.carouselWeek.first;
        this.nearestDayOfMonth = getCarousel(31, 1);
        this.contentLastChosenDayOfMonth = getCarousel(31, 1);
        this.afterDayOfWeekListDays = getCarousel(7, 1);
        this.selectedDayOfMonth = [];
        this.afterDayOfWeekListDaysValue = this.afterDayOfWeekListDays.first;
        this.afterDayOfWeekListDayOfWeeksValue = this.carouselWeek.first;
        this.afterDayOfMonthListDays = getCarousel(31, 1);
        this.afterDayOfMonthListDaysValue = this.afterDayOfMonthListDays.first;
        this.afterDayOfMonthListRepeatDays = getCarousel(31, 1);
        this.afterDayOfMonthListRepeatDaysValue = this.afterDayOfMonthListRepeatDays.first;
        this.nearestDayOfMonthValue = '1';
    }
    setLastDayOfMonth() {
        this.cron.updateWith({
            dayOfMonth: 'L',
            dayOfWeek: '?',
        });
    }
    setLastWeekDayOfMonth() {
        this.cron.updateWith({
            dayOfMonth: 'LW',
            dayOfWeek: '?',
        });
    }
    init() {
        combineLatest([this.cron.dayOfMonth$, this.cron.dayOfWeek$])
            .pipe(map(([day, dayOfWeek]) => prizmConvertDayToType(day, dayOfWeek)), filter(i => i != this.typeControl.value), tap(type => {
            this.typeControl.setValue(type);
        }), takeUntil(this.destroy$))
            .subscribe();
        this.initLocalStateChanger();
    }
    /**
     * set every *
     * */
    setEvery() {
        this.cron.updateWith({
            dayOfWeek: `*`,
            dayOfMonth: `?`,
        });
    }
    updateLastChosenDayOfMonth(lastChosenDayOfMonthValue) {
        this.lastChosenDayOfMonthValue = lastChosenDayOfMonthValue ?? this.lastChosenDayOfMonthValue;
        this.cron.updateWith({
            dayOfWeek: `?`,
            dayOfMonth: `L-${lastChosenDayOfMonthValue || 1}`,
        });
    }
    updateLastChosenDayOfWeek(lastChosenDayOfWeekValue, addEnding = true) {
        const newValue = (addEnding ? lastChosenDayOfWeekValue : lastChosenDayOfWeekValue.replace(/L$/g, '')) || '2';
        this.lastChosenDayOfWeekValue = newValue;
        this.cron.updateWith({
            dayOfMonth: `?`,
            dayOfWeek: `${newValue}L`,
        });
    }
    updateLastChosenDayOfChosenWeek(onNumberOfWeekListValue, lastChosenDayOfWeekValue2) {
        this.onNumberOfWeekListValue = onNumberOfWeekListValue ?? this.onNumberOfWeekListValue;
        this.lastChosenDayOfWeekValue2 = lastChosenDayOfWeekValue2 ?? this.lastChosenDayOfWeekValue2;
        this.cron.updateWith({
            dayOfMonth: `?`,
            dayOfWeek: `${this.lastChosenDayOfWeekValue2}#${this.onNumberOfWeekListValue}`,
        });
    }
    updateAfterDayOfWeek({ afterDayOfWeekListDaysValue, afterDayOfWeekListDayOfWeeksValue, } = {}) {
        this.afterDayOfWeekListDaysValue = afterDayOfWeekListDaysValue ?? this.afterDayOfWeekListDaysValue;
        this.afterDayOfWeekListDayOfWeeksValue =
            afterDayOfWeekListDayOfWeeksValue ?? this.afterDayOfWeekListDayOfWeeksValue;
        if (!this.afterDayOfWeekListDayOfWeeksValue)
            return;
        this.cron.updateWith({
            dayOfMonth: `?`,
            dayOfWeek: `${this.afterDayOfWeekListDayOfWeeksValue}/${this.afterDayOfWeekListDaysValue}`,
        });
    }
    updateSelectedDayOfWeek(selectedDayOfWeek) {
        this.selectedDayOfWeek = selectedDayOfWeek;
        this.cron.updateWith({
            dayOfMonth: `?`,
            dayOfWeek: this.selectedDayOfWeek.join(','),
        });
    }
    updateSelectedDayOfMonth(selectedDayOfMonth) {
        this.selectedDayOfMonth = selectedDayOfMonth;
        this.cron.updateWith({
            dayOfWeek: `?`,
            dayOfMonth: [...new Set(this.selectedDayOfMonth.length ? this.selectedDayOfMonth : ['1'])].join(','),
        });
    }
    updateAfterDayOfMonth(afterDayOfMonthListRepeatDaysValue, afterDayOfMonthListDaysValue) {
        this.afterDayOfMonthListRepeatDaysValue =
            afterDayOfMonthListRepeatDaysValue ?? this.afterDayOfMonthListRepeatDaysValue;
        this.afterDayOfMonthListDaysValue = afterDayOfMonthListDaysValue ?? this.afterDayOfMonthListDaysValue;
        this.cron.updateWith({
            dayOfWeek: `?`,
            dayOfMonth: `${this.afterDayOfMonthListDaysValue}/${this.afterDayOfMonthListRepeatDaysValue}`,
        });
    }
    updateNearestDayOfMonth(nearestDayOfMonthValue) {
        this.nearestDayOfMonthValue = nearestDayOfMonthValue ?? this.nearestDayOfMonthValue;
        this.cron.updateWith({
            dayOfMonth: `${this.nearestDayOfMonthValue}W`,
            dayOfWeek: '?',
        });
    }
    updateBetween({ start, end, } = {}) {
        start = start ?? this.state$.value.between.start;
        end = end ?? this.state$.value.between.end;
        this.state$.value.between.start = start;
        this.state$.value.between.end = end;
        this.cron.updateWith({
            dayOfMonth: `${start}-${end}`,
        });
    }
    getTypeByValueByDefault(value, cron) {
        return prizmConvertDayToType(cron.dayOfMonth, cron.dayOfWeek);
    }
    updateLocalState([dayOfMonth, dayOfWeek], type) {
        switch (type) {
            case this.TYPES.between:
                {
                    const arr = dayOfMonth.split('-');
                    const start = arr[0] ?? '0';
                    const end = arr[1] ?? '0';
                    this.updatePartial({
                        type: PrizmCronUiDayType.between,
                        between: {
                            start: start,
                            end: end,
                        },
                    });
                }
                break;
            case this.TYPES.every:
                this.updatePartial({
                    type: PrizmCronUiDayType.every,
                });
                break;
            case this.TYPES.specifiedDayOfWeek:
                {
                    this.updateSelectedDayOfWeek(dayOfWeek.split(','));
                }
                break;
            case this.TYPES.lastChosenDayOfWeek:
                {
                    this.updateLastChosenDayOfWeek(dayOfWeek, false);
                }
                break;
            case this.TYPES.nearestWeekDayToTheChosenDayOfMonth:
                {
                    this.updateNearestDayOfMonth(dayOfMonth?.replace('W', ''));
                }
                break;
            case this.TYPES.onTheChosenDayOfWeek:
                {
                    const [lastChosenDayOfWeekValue2, onNumberOfWeekListValue] = dayOfWeek?.split('#') ?? [];
                    if (lastChosenDayOfWeekValue2 && onNumberOfWeekListValue)
                        this.updateLastChosenDayOfChosenWeek(onNumberOfWeekListValue, lastChosenDayOfWeekValue2);
                }
                break;
            case this.TYPES.specifiedDayOfMonth:
                {
                    this.updateSelectedDayOfMonth(dayOfMonth.split(','));
                }
                break;
            case this.TYPES.lastChosenDaysOfMonth:
                {
                    this.updateLastChosenDayOfMonth(dayOfMonth?.replace(/L-/g, ''));
                }
                break;
            case this.TYPES.afterDayOfMonth:
                {
                    const [afterDayOfMonthListDaysValue, afterDayOfMonthListRepeatDaysValue] = dayOfMonth?.split('/') ?? [];
                    this.updateAfterDayOfMonth(afterDayOfMonthListRepeatDaysValue, afterDayOfMonthListDaysValue);
                }
                break;
            case this.TYPES.afterDayOfWeek:
                {
                    const [afterDayOfWeekListDayOfWeeksValue, afterDayOfWeekListDaysValue] = dayOfWeek?.split('/') ?? [];
                    if (afterDayOfWeekListDayOfWeeksValue && afterDayOfWeekListDaysValue)
                        this.updateAfterDayOfWeek({ afterDayOfWeekListDaysValue, afterDayOfWeekListDayOfWeeksValue });
                }
                break;
        }
    }
    isBaseChanged(a, b) {
        return a && b && a?.[0] === b?.[0] && a?.[1] === b?.[1];
    }
    updateMainState(value) {
        this.cron.updateWith({
            dayOfMonth: value,
        });
    }
}
PrizmCronUiDayState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronUiDayState, deps: [{ token: i1.PrizmCronService }, { token: i2.PrizmDestroyService }], target: i0.ɵɵFactoryTarget.Injectable });
PrizmCronUiDayState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronUiDayState });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronUiDayState, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PrizmCronService }, { type: i2.PrizmDestroyService }]; } });
//# sourceMappingURL=data:application/json;base64,