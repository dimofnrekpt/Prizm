import { TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
export function getContent(data, props = {}) {
    let type = "c" /* PrizmOverlayContentType.COMPONENT */;
    if (typeof data === 'string' && props['hasHTML'])
        type = "h" /* PrizmOverlayContentType.HTML */;
    else if (typeof data === 'string')
        type = "s" /* PrizmOverlayContentType.STRING */;
    else if (data instanceof TemplateRef)
        type = "t" /* PrizmOverlayContentType.TEMPLATE */;
    return { data, type, props };
}
/* html dom utils */
export function cssClass(method, cls, target = 'body') {
    document.querySelector(target)?.classList[method](...cls);
}
export function objToCss(styleObj) {
    return Object.keys(styleObj)
        .map(x => `${x}:${styleObj[x]}${typeof styleObj[x] === 'number' ? 'px' : ''}`)
        .join(';');
}
export function percentToCss(max, percentage) {
    let number = Number(percentage.slice(0, -1));
    if (number > 100) {
        number = 100;
    }
    return `calc(${max}px - ${100 - number}%)`;
}
export function setWidthHeight(src, host, key, value) {
    if (typeof value === 'number') {
        host[key] = value = Math.abs(value);
    }
    if (typeof value === 'string' && value.endsWith('%')) {
        value = percentToCss(src[key], value);
    }
    return value;
}
export const BODY_ELEMENT = document.querySelector('body');
class EventBusClass {
    constructor() {
        this._e = new Subject();
    }
    send(from, name, data = null) {
        this._e.next({ from, name, data });
    }
    listen(from, name) {
        return this._e.asObservable().pipe(filter(e => e.from === from && e.name === name), map(e => e.data));
    }
    stop() {
        this._e.complete();
    }
}
export const EventBus = new EventBusClass();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9tb2R1bGVzL292ZXJsYXkvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFVN0MsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsSUFBNkIsRUFDN0IsUUFBa0MsRUFBRTtJQUVwQyxJQUFJLElBQUksOENBQTZELENBQUM7SUFFdEUsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUFFLElBQUkseUNBQStCLENBQUM7U0FDakYsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRO1FBQUUsSUFBSSwyQ0FBaUMsQ0FBQztTQUNwRSxJQUFJLElBQUksWUFBWSxXQUFXO1FBQUUsSUFBSSw2Q0FBbUMsQ0FBQztJQUU5RSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBRUQsb0JBQW9CO0FBQ3BCLE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBd0IsRUFBRSxHQUFhLEVBQUUsTUFBTSxHQUFHLE1BQU07SUFDL0UsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxRQUE2QjtJQUNwRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1NBQ3pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDN0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVyxFQUFFLFVBQWtCO0lBQzFELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsSUFBSSxNQUFNLEdBQUcsR0FBRyxFQUFFO1FBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7S0FDZDtJQUNELE9BQU8sUUFBUSxHQUFHLFFBQVEsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUM1QixHQUF3QixFQUN4QixJQUF5QixFQUN6QixHQUFXLEVBQ1gsS0FBc0I7SUFFdEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3JDO0lBRUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwRCxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN2QztJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTNELE1BQU0sYUFBYTtJQUFuQjtRQUNVLE9BQUUsR0FBK0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQWN6RCxDQUFDO0lBYlEsSUFBSSxDQUFDLElBQVksRUFBRSxJQUEyQixFQUFFLE9BQVksSUFBSTtRQUNyRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ00sTUFBTSxDQUFDLElBQVksRUFBRSxJQUEyQjtRQUNyRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQ2pCLENBQUM7SUFDSixDQUFDO0lBRU0sSUFBSTtRQUNULElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGO0FBQ0QsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBQcml6bU92ZXJsYXlDb250ZW50LFxuICBQcml6bU92ZXJsYXlDb250ZW50RGF0YSxcbiAgUHJpem1PdmVybGF5Q29udGVudFByb3BzLFxuICBQcml6bU92ZXJsYXlDb250ZW50VHlwZSxcbiAgUHJpem1PdmVybGF5RXZlbnQsXG4gIFByaXptT3ZlcmxheUV2ZW50TmFtZSxcbn0gZnJvbSAnLi9tb2RlbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGVudChcbiAgZGF0YTogUHJpem1PdmVybGF5Q29udGVudERhdGEsXG4gIHByb3BzOiBQcml6bU92ZXJsYXlDb250ZW50UHJvcHMgPSB7fVxuKTogUHJpem1PdmVybGF5Q29udGVudCB7XG4gIGxldCB0eXBlOiBQcml6bU92ZXJsYXlDb250ZW50VHlwZSA9IFByaXptT3ZlcmxheUNvbnRlbnRUeXBlLkNPTVBPTkVOVDtcblxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnICYmIHByb3BzWydoYXNIVE1MJ10pIHR5cGUgPSBQcml6bU92ZXJsYXlDb250ZW50VHlwZS5IVE1MO1xuICBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHR5cGUgPSBQcml6bU92ZXJsYXlDb250ZW50VHlwZS5TVFJJTkc7XG4gIGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikgdHlwZSA9IFByaXptT3ZlcmxheUNvbnRlbnRUeXBlLlRFTVBMQVRFO1xuXG4gIHJldHVybiB7IGRhdGEsIHR5cGUsIHByb3BzIH07XG59XG5cbi8qIGh0bWwgZG9tIHV0aWxzICovXG5leHBvcnQgZnVuY3Rpb24gY3NzQ2xhc3MobWV0aG9kOiAnYWRkJyB8ICdyZW1vdmUnLCBjbHM6IHN0cmluZ1tdLCB0YXJnZXQgPSAnYm9keScpOiB2b2lkIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpPy5jbGFzc0xpc3RbbWV0aG9kXSguLi5jbHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JqVG9Dc3Moc3R5bGVPYmo6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGVPYmopXG4gICAgLm1hcCh4ID0+IGAke3h9OiR7c3R5bGVPYmpbeF19JHt0eXBlb2Ygc3R5bGVPYmpbeF0gPT09ICdudW1iZXInID8gJ3B4JyA6ICcnfWApXG4gICAgLmpvaW4oJzsnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcmNlbnRUb0NzcyhtYXg6IG51bWJlciwgcGVyY2VudGFnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IG51bWJlciA9IE51bWJlcihwZXJjZW50YWdlLnNsaWNlKDAsIC0xKSk7XG4gIGlmIChudW1iZXIgPiAxMDApIHtcbiAgICBudW1iZXIgPSAxMDA7XG4gIH1cbiAgcmV0dXJuIGBjYWxjKCR7bWF4fXB4IC0gJHsxMDAgLSBudW1iZXJ9JSlgO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0V2lkdGhIZWlnaHQoXG4gIHNyYzogUmVjb3JkPHN0cmluZywgYW55PixcbiAgaG9zdDogUmVjb3JkPHN0cmluZywgYW55PixcbiAga2V5OiBzdHJpbmcsXG4gIHZhbHVlOiBudW1iZXIgfCBzdHJpbmdcbik6IG51bWJlciB8IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaG9zdFtrZXldID0gdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpKSB7XG4gICAgdmFsdWUgPSBwZXJjZW50VG9Dc3Moc3JjW2tleV0sIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGNvbnN0IEJPRFlfRUxFTUVOVCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuY2xhc3MgRXZlbnRCdXNDbGFzcyB7XG4gIHByaXZhdGUgX2U6IFN1YmplY3Q8UHJpem1PdmVybGF5RXZlbnQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIHNlbmQoZnJvbTogc3RyaW5nLCBuYW1lOiBQcml6bU92ZXJsYXlFdmVudE5hbWUsIGRhdGE6IGFueSA9IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLl9lLm5leHQoeyBmcm9tLCBuYW1lLCBkYXRhIH0pO1xuICB9XG4gIHB1YmxpYyBsaXN0ZW4oZnJvbTogc3RyaW5nLCBuYW1lOiBQcml6bU92ZXJsYXlFdmVudE5hbWUpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9lLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgICBmaWx0ZXIoZSA9PiBlLmZyb20gPT09IGZyb20gJiYgZS5uYW1lID09PSBuYW1lKSxcbiAgICAgIG1hcChlID0+IGUuZGF0YSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKTogdm9pZCB7XG4gICAgdGhpcy5fZS5jb21wbGV0ZSgpO1xuICB9XG59XG5leHBvcnQgY29uc3QgRXZlbnRCdXMgPSBuZXcgRXZlbnRCdXNDbGFzcygpO1xuIl19