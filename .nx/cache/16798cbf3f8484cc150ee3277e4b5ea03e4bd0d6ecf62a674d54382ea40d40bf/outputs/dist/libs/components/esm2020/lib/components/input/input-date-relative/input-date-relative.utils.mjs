/**
 * Check items as radio button, to active id
 */
export function UpdateActiveItem(items, id) {
    return items.map(item => {
        const newItem = { ...item };
        newItem.active = false;
        if (item.id === id) {
            newItem.active = true;
        }
        return newItem;
    });
}
/**
 * Parse input text to model
 */
export function ParseTextInput(text) {
    const result = {};
    const regexMatch = new RegExp(MatchPattern);
    const match = regexMatch.exec(text) ?? [];
    result.time = timeMap.get(match[1]);
    result.direction = directionMap.get(match[2]);
    result.period = periodMap.get(match[4]);
    result.number = match[3] || '';
    result.wrongFormat = text !== match[0];
    return result;
}
/**
 * Render text from RelativeDateModel
 */
export function RenderText(model) {
    let result = '';
    const direction = renderDirectionMap.get(model.direction);
    const period = renderPeriodMap.get(model.period);
    result += renderTimeMap.get(model.time) || '';
    result += direction || '';
    result += model.number || '';
    result += period || '';
    return result;
}
//region Private utility models to parse and render
const MatchPattern = '(T|\\*)?(\\+|\\-)?(\\d+)?(Y|M|d|h|m|s)?';
const timeMap = new Map([
    ['*', 'current'],
    ['T', 'midnight'],
    ['t', 'midnight'], // Can be optional
]);
const directionMap = new Map([
    ['-', 'minus'],
    ['+', 'plus'],
]);
const periodMap = new Map([
    ['Y', 'year'],
    ['M', 'month'],
    ['d', 'day'],
    ['h', 'hour'],
    ['m', 'minute'],
    ['s', 'second'],
]);
const renderTimeMap = new Map([
    ['current', '*'],
    ['midnight', 'T'],
]);
const renderDirectionMap = new Map([
    ['minus', '-'],
    ['plus', '+'],
]);
const renderPeriodMap = new Map([
    ['year', 'Y'],
    ['month', 'M'],
    ['day', 'd'],
    ['hour', 'h'],
    ['minute', 'm'],
    ['second', 's'],
]);
//endregion
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGF0ZS1yZWxhdGl2ZS51dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQvaW5wdXQtZGF0ZS1yZWxhdGl2ZS9pbnB1dC1kYXRlLXJlbGF0aXZlLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUFJLEtBQWdDLEVBQUUsRUFBSztJQUN6RSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEIsTUFBTSxPQUFPLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDO1FBQzVCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDbEIsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7U0FDdkI7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFJRDs7R0FFRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUMsSUFBWTtJQUN6QyxNQUFNLE1BQU0sR0FBOEIsRUFBK0IsQ0FBQztJQUUxRSxNQUFNLFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUxQyxNQUFNLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFRLENBQUM7SUFDM0MsTUFBTSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBUSxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQVEsQ0FBQztJQUMvQyxNQUFNLENBQUMsTUFBTSxHQUFJLEtBQUssQ0FBQyxDQUFDLENBQVMsSUFBSSxFQUFFLENBQUM7SUFDeEMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXZDLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBd0I7SUFDakQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUQsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakQsTUFBTSxJQUFJLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QyxNQUFNLElBQUksU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDN0IsTUFBTSxJQUFJLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFFdkIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELG1EQUFtRDtBQUNuRCxNQUFNLFlBQVksR0FBRyx5Q0FBeUMsQ0FBQztBQUUvRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBNkI7SUFDbEQsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDO0lBQ2hCLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQztJQUNqQixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsRUFBRSxrQkFBa0I7Q0FDdEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQWtDO0lBQzVELENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQztJQUNkLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztDQUNkLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUErQjtJQUN0RCxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7SUFDYixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7SUFDZCxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUM7SUFDWixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7SUFDYixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7SUFDZixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUM7Q0FDaEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQTZCO0lBQ3hELENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQztJQUNoQixDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUM7Q0FDbEIsQ0FBQyxDQUFDO0FBRUgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLEdBQUcsQ0FBa0M7SUFDbEUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDO0lBQ2QsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0NBQ2QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLENBQStCO0lBQzVELENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUNiLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztJQUNkLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztJQUNaLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQztJQUNiLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztJQUNmLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztDQUNoQixDQUFDLENBQUM7QUFDSCxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUmVsYXRpdmVEYXRlRGlyZWN0aW9uSWQsXG4gIFJlbGF0aXZlRGF0ZU1lbnVJdGVtLFxuICBSZWxhdGl2ZURhdGVNb2RlbCxcbiAgUmVsYXRpdmVEYXRlUGVyaW9kSWQsXG4gIFJlbGF0aXZlRGF0ZVRpbWVJZCxcbn0gZnJvbSAnLi9pbnB1dC1kYXRlLXJlbGF0aXZlLm1vZGVscyc7XG5cbi8qKlxuICogQ2hlY2sgaXRlbXMgYXMgcmFkaW8gYnV0dG9uLCB0byBhY3RpdmUgaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVwZGF0ZUFjdGl2ZUl0ZW08VD4oaXRlbXM6IFJlbGF0aXZlRGF0ZU1lbnVJdGVtPFQ+W10sIGlkOiBUKTogUmVsYXRpdmVEYXRlTWVudUl0ZW08VD5bXSB7XG4gIHJldHVybiBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgY29uc3QgbmV3SXRlbSA9IHsgLi4uaXRlbSB9O1xuICAgIG5ld0l0ZW0uYWN0aXZlID0gZmFsc2U7XG5cbiAgICBpZiAoaXRlbS5pZCA9PT0gaWQpIHtcbiAgICAgIG5ld0l0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3SXRlbTtcbiAgfSk7XG59XG5cbnR5cGUgRXh0ZW5kZWRSZWxhdGl2ZURhdGVNb2RlbCA9IFJlbGF0aXZlRGF0ZU1vZGVsICYgeyB3cm9uZ0Zvcm1hdD86IGJvb2xlYW4gfTtcblxuLyoqXG4gKiBQYXJzZSBpbnB1dCB0ZXh0IHRvIG1vZGVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQYXJzZVRleHRJbnB1dCh0ZXh0OiBzdHJpbmcpOiBFeHRlbmRlZFJlbGF0aXZlRGF0ZU1vZGVsIHtcbiAgY29uc3QgcmVzdWx0OiBFeHRlbmRlZFJlbGF0aXZlRGF0ZU1vZGVsID0ge30gYXMgRXh0ZW5kZWRSZWxhdGl2ZURhdGVNb2RlbDtcblxuICBjb25zdCByZWdleE1hdGNoID0gbmV3IFJlZ0V4cChNYXRjaFBhdHRlcm4pO1xuICBjb25zdCBtYXRjaCA9IHJlZ2V4TWF0Y2guZXhlYyh0ZXh0KSA/PyBbXTtcblxuICByZXN1bHQudGltZSA9IHRpbWVNYXAuZ2V0KG1hdGNoWzFdKSBhcyBhbnk7XG4gIHJlc3VsdC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25NYXAuZ2V0KG1hdGNoWzJdKSBhcyBhbnk7XG4gIHJlc3VsdC5wZXJpb2QgPSBwZXJpb2RNYXAuZ2V0KG1hdGNoWzRdKSBhcyBhbnk7XG4gIHJlc3VsdC5udW1iZXIgPSAobWF0Y2hbM10gYXMgYW55KSB8fCAnJztcbiAgcmVzdWx0Lndyb25nRm9ybWF0ID0gdGV4dCAhPT0gbWF0Y2hbMF07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBSZW5kZXIgdGV4dCBmcm9tIFJlbGF0aXZlRGF0ZU1vZGVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZW5kZXJUZXh0KG1vZGVsOiBSZWxhdGl2ZURhdGVNb2RlbCk6IHN0cmluZyB7XG4gIGxldCByZXN1bHQgPSAnJztcblxuICBjb25zdCBkaXJlY3Rpb24gPSByZW5kZXJEaXJlY3Rpb25NYXAuZ2V0KG1vZGVsLmRpcmVjdGlvbik7XG4gIGNvbnN0IHBlcmlvZCA9IHJlbmRlclBlcmlvZE1hcC5nZXQobW9kZWwucGVyaW9kKTtcblxuICByZXN1bHQgKz0gcmVuZGVyVGltZU1hcC5nZXQobW9kZWwudGltZSkgfHwgJyc7XG4gIHJlc3VsdCArPSBkaXJlY3Rpb24gfHwgJyc7XG4gIHJlc3VsdCArPSBtb2RlbC5udW1iZXIgfHwgJyc7XG4gIHJlc3VsdCArPSBwZXJpb2QgfHwgJyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy9yZWdpb24gUHJpdmF0ZSB1dGlsaXR5IG1vZGVscyB0byBwYXJzZSBhbmQgcmVuZGVyXG5jb25zdCBNYXRjaFBhdHRlcm4gPSAnKFR8XFxcXCopPyhcXFxcK3xcXFxcLSk/KFxcXFxkKyk/KFl8TXxkfGh8bXxzKT8nO1xuXG5jb25zdCB0aW1lTWFwID0gbmV3IE1hcDxzdHJpbmcsIFJlbGF0aXZlRGF0ZVRpbWVJZD4oW1xuICBbJyonLCAnY3VycmVudCddLFxuICBbJ1QnLCAnbWlkbmlnaHQnXSxcbiAgWyd0JywgJ21pZG5pZ2h0J10sIC8vIENhbiBiZSBvcHRpb25hbFxuXSk7XG5cbmNvbnN0IGRpcmVjdGlvbk1hcCA9IG5ldyBNYXA8c3RyaW5nLCBSZWxhdGl2ZURhdGVEaXJlY3Rpb25JZD4oW1xuICBbJy0nLCAnbWludXMnXSxcbiAgWycrJywgJ3BsdXMnXSxcbl0pO1xuXG5jb25zdCBwZXJpb2RNYXAgPSBuZXcgTWFwPHN0cmluZywgUmVsYXRpdmVEYXRlUGVyaW9kSWQ+KFtcbiAgWydZJywgJ3llYXInXSxcbiAgWydNJywgJ21vbnRoJ10sXG4gIFsnZCcsICdkYXknXSxcbiAgWydoJywgJ2hvdXInXSxcbiAgWydtJywgJ21pbnV0ZSddLFxuICBbJ3MnLCAnc2Vjb25kJ10sXG5dKTtcblxuY29uc3QgcmVuZGVyVGltZU1hcCA9IG5ldyBNYXA8UmVsYXRpdmVEYXRlVGltZUlkLCBzdHJpbmc+KFtcbiAgWydjdXJyZW50JywgJyonXSxcbiAgWydtaWRuaWdodCcsICdUJ10sXG5dKTtcblxuY29uc3QgcmVuZGVyRGlyZWN0aW9uTWFwID0gbmV3IE1hcDxSZWxhdGl2ZURhdGVEaXJlY3Rpb25JZCwgc3RyaW5nPihbXG4gIFsnbWludXMnLCAnLSddLFxuICBbJ3BsdXMnLCAnKyddLFxuXSk7XG5cbmNvbnN0IHJlbmRlclBlcmlvZE1hcCA9IG5ldyBNYXA8UmVsYXRpdmVEYXRlUGVyaW9kSWQsIHN0cmluZz4oW1xuICBbJ3llYXInLCAnWSddLFxuICBbJ21vbnRoJywgJ00nXSxcbiAgWydkYXknLCAnZCddLFxuICBbJ2hvdXInLCAnaCddLFxuICBbJ21pbnV0ZScsICdtJ10sXG4gIFsnc2Vjb25kJywgJ3MnXSxcbl0pO1xuLy9lbmRyZWdpb25cbiJdfQ==