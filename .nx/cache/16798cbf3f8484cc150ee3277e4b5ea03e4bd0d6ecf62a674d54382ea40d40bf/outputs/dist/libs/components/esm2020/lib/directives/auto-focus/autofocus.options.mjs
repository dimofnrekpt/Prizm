import { ElementRef, InjectionToken, NgZone, Optional, Renderer2, Self } from '@angular/core';
import { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';
import { PRIZM_FOCUSABLE_ITEM_ACCESSOR } from '../../tokens/focusable-item-accessor';
import { PRIZM_IS_IOS } from '../../tokens/is-ios';
import { PrizmDefaultAutofocusHandler } from './handlers/default.handler';
import { PrizmIosAutofocusHandler } from './handlers/ios.handler';
export const PRIZM_AUTOFOCUS_HANDLER = new InjectionToken(`Autofocusing handler`);
export function prizmAutofocusHandlerFactory(prizmFocusableComponent, elementRef, animationFrame$, renderer, ngZone, windowRef, isIos) {
    return isIos
        ? new PrizmIosAutofocusHandler(prizmFocusableComponent, elementRef, renderer, ngZone, windowRef)
        : new PrizmDefaultAutofocusHandler(prizmFocusableComponent, elementRef, animationFrame$);
}
export const PRIZM_AUTOFOCUS_PROVIDERS = [
    {
        provide: PRIZM_AUTOFOCUS_HANDLER,
        useFactory: prizmAutofocusHandlerFactory,
        deps: [
            [new Optional(), new Self(), PRIZM_FOCUSABLE_ITEM_ACCESSOR],
            ElementRef,
            ANIMATION_FRAME,
            Renderer2,
            NgZone,
            WINDOW,
            PRIZM_IS_IOS,
        ],
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLm9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9kaXJlY3RpdmVzL2F1dG8tZm9jdXMvYXV0b2ZvY3VzLm9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5ELE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTWxFLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUF3QixzQkFBc0IsQ0FBQyxDQUFDO0FBRXpHLE1BQU0sVUFBVSw0QkFBNEIsQ0FDMUMsdUJBQTZELEVBQzdELFVBQW1DLEVBQ25DLGVBQW1DLEVBQ25DLFFBQW1CLEVBQ25CLE1BQWMsRUFDZCxTQUFpQixFQUNqQixLQUFjO0lBRWQsT0FBTyxLQUFLO1FBQ1YsQ0FBQyxDQUFDLElBQUksd0JBQXdCLENBQUMsdUJBQXVCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDO1FBQ2hHLENBQUMsQ0FBQyxJQUFJLDRCQUE0QixDQUFDLHVCQUF1QixFQUFFLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM3RixDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkM7UUFDRSxPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLFVBQVUsRUFBRSw0QkFBNEI7UUFDeEMsSUFBSSxFQUFFO1lBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsNkJBQTZCLENBQUM7WUFDM0QsVUFBVTtZQUNWLGVBQWU7WUFDZixTQUFTO1lBQ1QsTUFBTTtZQUNOLE1BQU07WUFDTixZQUFZO1NBQ2I7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgTmdab25lLCBPcHRpb25hbCwgUmVuZGVyZXIyLCBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBTklNQVRJT05fRlJBTUUsIFdJTkRPVyB9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUFJJWk1fRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IgfSBmcm9tICcuLi8uLi90b2tlbnMvZm9jdXNhYmxlLWl0ZW0tYWNjZXNzb3InO1xuaW1wb3J0IHsgUFJJWk1fSVNfSU9TIH0gZnJvbSAnLi4vLi4vdG9rZW5zL2lzLWlvcyc7XG5pbXBvcnQgeyBQcml6bUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvciB9IGZyb20gJy4uLy4uL3R5cGVzL2ZvY3VzYWJsZS1lbGVtZW50LWFjY2Vzc29yJztcbmltcG9ydCB7IFByaXptRGVmYXVsdEF1dG9mb2N1c0hhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2RlZmF1bHQuaGFuZGxlcic7XG5pbXBvcnQgeyBQcml6bUlvc0F1dG9mb2N1c0hhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2lvcy5oYW5kbGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBQcml6bUF1dG9mb2N1c0hhbmRsZXIge1xuICBzZXRGb2N1cygpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgUFJJWk1fQVVUT0ZPQ1VTX0hBTkRMRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48UHJpem1BdXRvZm9jdXNIYW5kbGVyPihgQXV0b2ZvY3VzaW5nIGhhbmRsZXJgKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByaXptQXV0b2ZvY3VzSGFuZGxlckZhY3RvcnkoXG4gIHByaXptRm9jdXNhYmxlQ29tcG9uZW50OiBQcml6bUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvciB8IG51bGwsXG4gIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICBhbmltYXRpb25GcmFtZSQ6IE9ic2VydmFibGU8bnVtYmVyPixcbiAgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgbmdab25lOiBOZ1pvbmUsXG4gIHdpbmRvd1JlZjogV2luZG93LFxuICBpc0lvczogYm9vbGVhblxuKTogUHJpem1BdXRvZm9jdXNIYW5kbGVyIHtcbiAgcmV0dXJuIGlzSW9zXG4gICAgPyBuZXcgUHJpem1Jb3NBdXRvZm9jdXNIYW5kbGVyKHByaXptRm9jdXNhYmxlQ29tcG9uZW50LCBlbGVtZW50UmVmLCByZW5kZXJlciwgbmdab25lLCB3aW5kb3dSZWYpXG4gICAgOiBuZXcgUHJpem1EZWZhdWx0QXV0b2ZvY3VzSGFuZGxlcihwcml6bUZvY3VzYWJsZUNvbXBvbmVudCwgZWxlbWVudFJlZiwgYW5pbWF0aW9uRnJhbWUkKTtcbn1cblxuZXhwb3J0IGNvbnN0IFBSSVpNX0FVVE9GT0NVU19QUk9WSURFUlMgPSBbXG4gIHtcbiAgICBwcm92aWRlOiBQUklaTV9BVVRPRk9DVVNfSEFORExFUixcbiAgICB1c2VGYWN0b3J5OiBwcml6bUF1dG9mb2N1c0hhbmRsZXJGYWN0b3J5LFxuICAgIGRlcHM6IFtcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgbmV3IFNlbGYoKSwgUFJJWk1fRk9DVVNBQkxFX0lURU1fQUNDRVNTT1JdLFxuICAgICAgRWxlbWVudFJlZixcbiAgICAgIEFOSU1BVElPTl9GUkFNRSxcbiAgICAgIFJlbmRlcmVyMixcbiAgICAgIE5nWm9uZSxcbiAgICAgIFdJTkRPVyxcbiAgICAgIFBSSVpNX0lTX0lPUyxcbiAgICBdLFxuICB9LFxuXTtcbiJdfQ==