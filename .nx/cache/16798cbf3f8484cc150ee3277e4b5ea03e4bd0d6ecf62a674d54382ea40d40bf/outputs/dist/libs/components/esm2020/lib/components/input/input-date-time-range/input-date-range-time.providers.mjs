import { forwardRef, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { PrizmInputDateTimeRangeComponent } from './input-date-range-time.component';
import { AbstractPrizmControl } from '../../../abstract/control';
import { PRIZM_FOCUSABLE_ITEM_ACCESSOR } from '../../../tokens/focusable-item-accessor';
import { PRIZM_CALENDAR_DATA_STREAM } from '../../../tokens/calendar-data-stream';
import { PRIZM_DATE_TIME_RANGE_VALUE_TRANSFORMER } from '../../../tokens/date-inputs-value-transformers';
import { PRIZM_LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '../../../providers/specific-dropdown-controllers';
import { prizmReplayControlValueChangesFactory } from '../../../util/common/replay-control-value-changes-factory';
export const RANGE_TIME_STREAM_FACTORY = (control, valueTransformer) => prizmReplayControlValueChangesFactory(control, valueTransformer);
export const PRIZM_INPUT_DATE_TIME_RANGE_PROVIDERS = [
    {
        provide: AbstractPrizmControl,
        useExisting: forwardRef(() => PrizmInputDateTimeRangeComponent),
    },
    {
        provide: PRIZM_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => PrizmInputDateTimeRangeComponent),
    },
    {
        provide: PRIZM_CALENDAR_DATA_STREAM,
        deps: [
            [new Optional(), new Self(), NgControl],
            [new Optional(), forwardRef(() => PRIZM_DATE_TIME_RANGE_VALUE_TRANSFORMER)],
        ],
        useFactory: RANGE_TIME_STREAM_FACTORY,
    },
    PRIZM_LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGF0ZS1yYW5nZS10aW1lLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQvaW5wdXQtZGF0ZS10aW1lLXJhbmdlL2lucHV0LWRhdGUtcmFuZ2UtdGltZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUdyRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN4RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUN6RyxPQUFPLEVBQUUsK0NBQStDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuSCxPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUVsSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUN2QyxPQUF5QixFQUN6QixnQkFBaUQsRUFDcEIsRUFBRSxDQUFDLHFDQUFxQyxDQUFJLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXRHLE1BQU0sQ0FBQyxNQUFNLHFDQUFxQyxHQUFHO0lBQ25EO1FBQ0UsT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO0tBQ2hFO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsZ0NBQWdDLENBQUM7S0FDaEU7SUFDRDtRQUNFLE9BQU8sRUFBRSwwQkFBMEI7UUFDbkMsSUFBSSxFQUFFO1lBQ0osQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsU0FBUyxDQUFDO1lBQ3ZDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUNBQXVDLENBQUMsQ0FBQztTQUM1RTtRQUNELFVBQVUsRUFBRSx5QkFBeUI7S0FDdEM7SUFDRCwrQ0FBK0M7Q0FDaEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcndhcmRSZWYsIE9wdGlvbmFsLCBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcml6bUlucHV0RGF0ZVRpbWVSYW5nZUNvbXBvbmVudCB9IGZyb20gJy4vaW5wdXQtZGF0ZS1yYW5nZS10aW1lLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQcml6bURheVJhbmdlIH0gZnJvbSAnLi4vLi4vLi4vQGNvcmUvZGF0ZS10aW1lJztcbmltcG9ydCB7IFByaXptQ29udHJvbFZhbHVlVHJhbnNmb3JtZXIgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb250cm9sLXZhbHVlLXRyYW5zZm9ybWVyJztcbmltcG9ydCB7IEFic3RyYWN0UHJpem1Db250cm9sIH0gZnJvbSAnLi4vLi4vLi4vYWJzdHJhY3QvY29udHJvbCc7XG5pbXBvcnQgeyBQUklaTV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUiB9IGZyb20gJy4uLy4uLy4uL3Rva2Vucy9mb2N1c2FibGUtaXRlbS1hY2Nlc3Nvcic7XG5pbXBvcnQgeyBQUklaTV9DQUxFTkRBUl9EQVRBX1NUUkVBTSB9IGZyb20gJy4uLy4uLy4uL3Rva2Vucy9jYWxlbmRhci1kYXRhLXN0cmVhbSc7XG5pbXBvcnQgeyBQUklaTV9EQVRFX1RJTUVfUkFOR0VfVkFMVUVfVFJBTlNGT1JNRVIgfSBmcm9tICcuLi8uLi8uLi90b2tlbnMvZGF0ZS1pbnB1dHMtdmFsdWUtdHJhbnNmb3JtZXJzJztcbmltcG9ydCB7IFBSSVpNX0xFRlRfQUxJR05FRF9EUk9QRE9XTl9DT05UUk9MTEVSX1BST1ZJREVSIH0gZnJvbSAnLi4vLi4vLi4vcHJvdmlkZXJzL3NwZWNpZmljLWRyb3Bkb3duLWNvbnRyb2xsZXJzJztcbmltcG9ydCB7IHByaXptUmVwbGF5Q29udHJvbFZhbHVlQ2hhbmdlc0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi91dGlsL2NvbW1vbi9yZXBsYXktY29udHJvbC12YWx1ZS1jaGFuZ2VzLWZhY3RvcnknO1xuXG5leHBvcnQgY29uc3QgUkFOR0VfVElNRV9TVFJFQU1fRkFDVE9SWSA9IDxUIGV4dGVuZHMgUHJpem1EYXlSYW5nZT4oXG4gIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gIHZhbHVlVHJhbnNmb3JtZXI6IFByaXptQ29udHJvbFZhbHVlVHJhbnNmb3JtZXI8VD5cbik6IE9ic2VydmFibGU8VCB8IG51bGw+IHwgbnVsbCA9PiBwcml6bVJlcGxheUNvbnRyb2xWYWx1ZUNoYW5nZXNGYWN0b3J5PFQ+KGNvbnRyb2wsIHZhbHVlVHJhbnNmb3JtZXIpO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fSU5QVVRfREFURV9USU1FX1JBTkdFX1BST1ZJREVSUyA9IFtcbiAge1xuICAgIHByb3ZpZGU6IEFic3RyYWN0UHJpem1Db250cm9sLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFByaXptSW5wdXREYXRlVGltZVJhbmdlQ29tcG9uZW50KSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFBSSVpNX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFByaXptSW5wdXREYXRlVGltZVJhbmdlQ29tcG9uZW50KSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFBSSVpNX0NBTEVOREFSX0RBVEFfU1RSRUFNLFxuICAgIGRlcHM6IFtcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgbmV3IFNlbGYoKSwgTmdDb250cm9sXSxcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgZm9yd2FyZFJlZigoKSA9PiBQUklaTV9EQVRFX1RJTUVfUkFOR0VfVkFMVUVfVFJBTlNGT1JNRVIpXSxcbiAgICBdLFxuICAgIHVzZUZhY3Rvcnk6IFJBTkdFX1RJTUVfU1RSRUFNX0ZBQ1RPUlksXG4gIH0sXG4gIFBSSVpNX0xFRlRfQUxJR05FRF9EUk9QRE9XTl9DT05UUk9MTEVSX1BST1ZJREVSLFxuXTtcbiJdfQ==