import { prizmInRange } from '../../util/math/in-range';
import { prizmNormalizeToIntNumber } from '../../util/math/normalize-to-int-number';
import { PRIZM_DAYS_IN_LEAP_YEAR, PRIZM_DAYS_IN_NORMAL_YEAR, PRIZM_DAYS_IN_WEEK, PRIZM_MAX_YEAR, PRIZM_MIN_YEAR, } from './date-time';
import { prizmAssert, prizmPadStart } from '@prizm-ui/core';
/**
 * Immutable year object
 * @nosideeffects
 */
export class PrizmYear {
    constructor(year) {
        this.year = year;
        prizmAssert.assert(PrizmYear.isValidYear(year));
    }
    /**
     * Checks year for validity
     */
    static isValidYear(year) {
        return Number.isInteger(year) && prizmInRange(year, PRIZM_MIN_YEAR, PRIZM_MAX_YEAR + 1);
    }
    /**
     * Check if passed year is a leap year
     */
    static isLeapYear(year) {
        prizmAssert.assert(PrizmYear.isValidYear(year));
        return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
    }
    /**
     * Returns amount of leap years from year 0 to the passed one
     */
    static getAbsoluteLeapYears(year) {
        prizmAssert.assert(PrizmYear.isValidYear(year));
        return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));
    }
    /**
     * @deprecated DONT USE IT (will be deleted soon)
     *
     * Returns day of week offset of the beginning of the passed year
     *
     * @param year
     * @param absoluteLeapYears amount of leap years prior to the passed one
     * @return offset in days
     */
    static getYearStartDaysOffset(year, absoluteLeapYears) {
        prizmAssert.assert(PrizmYear.isValidYear(year));
        prizmAssert.assert(Number.isInteger(absoluteLeapYears));
        prizmAssert.assert(year >= absoluteLeapYears);
        prizmAssert.assert(absoluteLeapYears >= 0);
        return ((absoluteLeapYears * PRIZM_DAYS_IN_LEAP_YEAR +
            (year - absoluteLeapYears) * PRIZM_DAYS_IN_NORMAL_YEAR +
            5) %
            PRIZM_DAYS_IN_WEEK);
    }
    static lengthBetween(from, to) {
        return to.year - from.year;
    }
    /**
     * Normalizes year by clamping it between min and max years
     */
    static normalizeYearPart(year) {
        return prizmNormalizeToIntNumber(year, PRIZM_MIN_YEAR, PRIZM_MAX_YEAR);
    }
    get formattedYear() {
        return prizmPadStart(String(this.year), 4, `0`);
    }
    get isLeapYear() {
        return PrizmYear.isLeapYear(this.year);
    }
    /**
     * Returns amount of leap years from year 0 to current
     */
    get absoluteLeapYears() {
        return PrizmYear.getAbsoluteLeapYears(this.year);
    }
    /**
     * @deprecated DONT USE IT (will be deleted soon)
     *
     * Returns day of week offset of the beginning of the current year
     */
    get yearStartDaysOffset() {
        return PrizmYear.getYearStartDaysOffset(this.year, this.absoluteLeapYears);
    }
    /**
     * Passed year is after current
     */
    yearBefore({ year }) {
        return this.year < year;
    }
    /**
     * Passed year is the same or after current
     */
    yearSameOrBefore({ year }) {
        return this.year <= year;
    }
    /**
     * Passed year is the same as current
     */
    yearSame({ year }) {
        return this.year === year;
    }
    /**
     * Passed year is either the same of before the current
     */
    yearSameOrAfter({ year }) {
        return this.year >= year;
    }
    /**
     * Passed year is before current
     */
    yearAfter({ year }) {
        return this.year > year;
    }
    // TODO: 2.0 Consider removing `backwards` option
    /**
     * Immutably offsets year
     */
    append({ year = 0 }, backwards = false) {
        prizmAssert.assert(Number.isInteger(year));
        if (backwards) {
            year *= -1;
        }
        const resultYear = this.year + year;
        prizmAssert.assert(PrizmYear.isValidYear(resultYear));
        return new PrizmYear(resultYear);
    }
    toString() {
        return this.formattedYear;
    }
    valueOf() {
        return this.year;
    }
    /**
     * Returns the primitive value of the given Date object.
     * Depending on the argument, the method can return either a string or a number.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
     */
    [Symbol.toPrimitive](hint) {
        return Date.prototype[Symbol.toPrimitive].call(this, hint);
    }
    toJSON() {
        return this.formattedYear;
    }
}
//# sourceMappingURL=data:application/json;base64,