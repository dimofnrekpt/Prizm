import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, Input, Optional, Output, Renderer2, ViewChild, } from '@angular/core';
import { PrizmDestroyService, PrizmLetDirective, PrizmPluckPipe, PrizmSanitizerPipe, } from '@prizm-ui/helpers';
import { PRIZM_FILEUPLOAD_OPTIONS, prizmFileUploadDefaultOptions } from './file-upload-options';
import { PRIZM_FILE_UPLOAD } from '../../tokens';
import { Observable } from 'rxjs';
import { prizmI18nInitWithKey } from '../../services';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { CommonModule } from '@angular/common';
import { PrizmButtonComponent } from '../button';
import { PrizmProgressBarComponent } from '../progress';
import { PrizmIconComponent } from '../icon';
import { PrizmUploadStatusPipe } from './pipes/upload-status.pipe';
import { PrizmFileSizePipe } from './pipes/file-size.pipe';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "rxjs";
export class PrizmFileUploadComponent extends PrizmAbstractTestId {
    constructor(renderer, fileUpload$, customOptions) {
        super();
        this.renderer = renderer;
        this.fileUpload$ = fileUpload$;
        this.testId_ = 'ui_file_upload';
        this.options = { ...prizmFileUploadDefaultOptions };
        this.listeners = [];
        this.validationErrors = {};
        this.accept = '';
        this.multiple = false;
        this.maxFileSize = Number.MAX_SAFE_INTEGER;
        this.maxFilesCount = Number.MAX_SAFE_INTEGER;
        this._disabled = false;
        this.beforeFilesChange = new EventEmitter();
        this.filesChange = new EventEmitter();
        this.filesValidationErrors = new EventEmitter();
        this.filesCountError = new EventEmitter();
        this.retry = new EventEmitter();
        this.filesMap = new Map();
        this.options = { ...this.options, ...customOptions };
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    set progress(progress) {
        for (const key of Object.keys(progress)) {
            if (this.filesMap.has(key)) {
                this.filesMap.set(key, { ...this.filesMap.get(key), ...progress[key] });
            }
        }
    }
    get files() {
        return [...this.filesMap.entries()].map(([_, { file }]) => file);
    }
    ngAfterViewInit() {
        this.listeners.push(this.renderer.listen(this.dropzoneElementRef.nativeElement, 'dragover', this.dropzoneDragOverListener.bind(this)));
        this.listeners.push(this.renderer.listen(this.dropzoneElementRef.nativeElement, 'dragleave', this.dropzoneDragLeaveListener.bind(this)));
    }
    ngOnDestroy() {
        for (const listener of this.listeners) {
            listener();
        }
    }
    onDrop(event) {
        event.preventDefault();
        if (this.disabled === false) {
            const { files } = event.dataTransfer;
            this.selectFiles(Array.from(files));
        }
        this.dropzoneElementRef.nativeElement.classList.remove('active');
    }
    onFileInputChange(event) {
        const inputFile = event.target;
        if (inputFile.files.length > 0) {
            this.selectFiles(Array.from(inputFile.files));
            inputFile.value = '';
        }
    }
    getFileExtension(file) {
        return '.' + file.name.split('.').pop();
    }
    removeFile(filename, options = { emitEvent: true }) {
        if (options.emitEvent) {
            this.beforeFilesChange.next();
        }
        const fileData = this.filesMap.get(filename);
        if (fileData.url) {
            URL.revokeObjectURL(fileData.url);
        }
        this.filesMap.delete(filename);
        if (options.emitEvent) {
            this.filesChange.next(this.files);
        }
    }
    clearFiles(options = { emitEvent: true }) {
        if (options.emitEvent) {
            this.beforeFilesChange.next();
        }
        for (const file of this.filesMap.keys()) {
            this.removeFile(file);
        }
        if (options.emitEvent) {
            this.filesChange.next([]);
        }
    }
    filesTrackBy(index, file) {
        return file.key;
    }
    retryUpload(filename) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        this.retry.emit(this.filesMap.get(filename).file);
    }
    dropzoneDragOverListener(event) {
        event.preventDefault();
        if (this.disabled === false) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            event.dataTransfer.dropEffect = 'copy';
            this.dropzoneElementRef.nativeElement.classList.add('active');
        }
        else {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            event.dataTransfer.dropEffect = 'none';
        }
    }
    dropzoneDragLeaveListener() {
        this.dropzoneElementRef.nativeElement.classList.remove('active');
    }
    selectFiles(files) {
        const filteredFiles = files.filter(file => this.validate(file));
        if (filteredFiles.length === 0) {
            this.emitValidationErrors();
            return;
        }
        this.beforeFilesChange.next();
        if (filteredFiles.length > this.maxFilesCount) {
            this.filesCountError.next(filteredFiles.slice(this.maxFilesCount).map(file => file.name));
            filteredFiles.length = this.maxFilesCount;
        }
        this.emitValidationErrors();
        this.clearFiles({ emitEvent: false });
        for (const file of filteredFiles) {
            this.filesMap.set(file.name, {
                file,
                progress: 0,
                error: false,
                url: this.isImage(file) ? URL.createObjectURL(file) : null,
            });
        }
        this.filesChange.next(this.files);
    }
    validate(file) {
        const errors = {};
        if (this.accept && this.isFileTypeValid(file) === false) {
            errors.accept = { expect: this.accept, current: file.type };
        }
        if (file.size > this.maxFileSize) {
            errors.size = { max: this.maxFileSize, current: file.size };
        }
        const valid = Object.keys(errors).length === 0;
        if (valid === false) {
            this.validationErrors[file.name] = errors;
        }
        return valid;
    }
    emitValidationErrors() {
        if (Object.entries(this.validationErrors).length > 0) {
            this.filesValidationErrors.next(this.validationErrors);
            this.validationErrors = {};
        }
    }
    isImage(file) {
        return /^image\//.test(file.type);
    }
    isFileTypeValid(file) {
        const acceptableTypes = this.accept.split(',').map(type => type.trim());
        for (const type of acceptableTypes) {
            const acceptable = this.isWildcard(type)
                ? this.getTypeClass(file.type) === this.getTypeClass(type)
                : file.type == type || this.getFileExtension(file).toLowerCase() === type.toLowerCase();
            if (acceptable) {
                return true;
            }
        }
        return false;
    }
    getTypeClass(fileType) {
        return fileType.substring(0, fileType.indexOf('/'));
    }
    isWildcard(fileType) {
        return fileType.indexOf('*') !== -1;
    }
}
PrizmFileUploadComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmFileUploadComponent, deps: [{ token: i0.Renderer2 }, { token: PRIZM_FILE_UPLOAD }, { token: PRIZM_FILEUPLOAD_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
PrizmFileUploadComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmFileUploadComponent, isStandalone: true, selector: "prizm-file-upload", inputs: { accept: "accept", multiple: "multiple", maxFileSize: "maxFileSize", maxFilesCount: "maxFilesCount", disabled: "disabled", progress: "progress" }, outputs: { beforeFilesChange: "beforeFilesChange", filesChange: "filesChange", filesValidationErrors: "filesValidationErrors", filesCountError: "filesCountError", retry: "retry" }, providers: [PrizmDestroyService, ...prizmI18nInitWithKey(PRIZM_FILE_UPLOAD, 'fileUpload')], viewQueries: [{ propertyName: "dropzoneElementRef", first: true, predicate: ["dropzone"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *prizmLet=\"fileUpload$ | async as translations\">\n  <input\n    class=\"hidden\"\n    #inputFile\n    [multiple]=\"multiple\"\n    [accept]=\"accept\"\n    (change)=\"onFileInputChange($event)\"\n    type=\"file\"\n  />\n\n  <div class=\"dropzone\" #dropzone (drop)=\"onDrop($event)\">\n    <div class=\"dropzone__title\">\n      {{ translations | prizmPluck : ['dropzone__title'] }}\n    </div>\n    <div class=\"dropzone__description\">\n      {{ translations | prizmPluck : ['dropzone__description'] }}\n    </div>\n    <div class=\"dropzone__user-content\">\n      <ng-content></ng-content>\n    </div>\n\n    <button\n      class=\"dropzone__file-select\"\n      [disabled]=\"disabled\"\n      (click)=\"inputFile.click()\"\n      type=\"button\"\n      prizmButton\n      appearanceType=\"outline\"\n      appearance=\"secondary\"\n      size=\"m\"\n    >\n      {{ translations | prizmPluck : ['btn__select'] }}\n    </button>\n  </div>\n\n  <div class=\"files\" *ngIf=\"filesMap.size > 0\">\n    <div class=\"file files__item\" *ngFor=\"let item of filesMap | keyvalue; trackBy: filesTrackBy\">\n      <div class=\"file__preview\">\n        <img\n          class=\"file__image\"\n          *ngIf=\"item.value.url; else iconTpl\"\n          [src]=\"item.value.url | prizmSanitizer : 'bypassSecurityTrustResourceUrl'\"\n        />\n\n        <ng-template #iconTpl>\n          <prizm-icon class=\"file__icon\" [size]=\"16\" iconClass=\"files-file\"></prizm-icon>\n        </ng-template>\n      </div>\n\n      <div class=\"file__info\">\n        <span class=\"file__name\">{{ item.key }}</span>\n        <span class=\"file__size\">{{ item.value.file.size | prizmFileSize }}</span>\n      </div>\n\n      <div class=\"file__stage\">\n        {{  options.statusNames?.[item.value.progress | prizmUploadStatus : item.value.error] ?? (translations | prizmPluck : [item.value.progress | prizmUploadStatus : item.value.error]) }}\n      </div>\n\n      <button\n        class=\"file__retry-btn\"\n        *ngIf=\"item.value.error && options.showRetryButtons\"\n        [disabled]=\"disabled\"\n        [icon]=\"'arrows-refresh'\"\n        (click)=\"retryUpload(item.key)\"\n        prizmIconButton\n        appearanceType=\"ghost\"\n        appearance=\"secondary\"\n        size=\"s\"\n      ></button>\n\n      <button\n        class=\"file__delete-btn\"\n        [disabled]=\"disabled\"\n        [icon]=\"'delete'\"\n        (click)=\"removeFile(item.key)\"\n        prizmIconButton\n        appearanceType=\"ghost\"\n        appearance=\"secondary\"\n        size=\"s\"\n      ></button>\n\n      <div class=\"file__progress progress\">\n        <progress\n          class=\"progress__bar {{ item.value.progress | prizmUploadStatus : item.value.error }}\"\n          [value]=\"item.value.progress\"\n          prizmProgressBar\n          max=\"100\"\n          size=\"s\"\n        ></progress>\n        <span class=\"progress__value\">{{ item.value.progress }}%</span>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", styles: [":host{display:block}.hidden{display:none}.dropzone{padding:32px;border:1px dashed var(--prizm-v3-form-stroke-default);border-radius:2px;background-color:var(--prizm-v3-form-fill-default);display:flex;flex-direction:column;align-items:center}.dropzone.active{background-color:var(--prizm-v3-table-fill-row-hover);border:1px dashed var(--prizm-v3-form-stroke-hover)}.dropzone__title{font-weight:600;font-size:16px;line-height:20px;margin-bottom:8px;color:var(--prizm-v3-text-icon-primary)}.dropzone__description{font-weight:400;font-size:14px;line-height:20px;color:var(--prizm-v3-text-icon-secondary)}.dropzone__user-content{font-weight:400;font-size:12px;line-height:16px;margin-top:8px;color:var(--prizm-v3-text-icon-tertiary)}.dropzone__user-content:empty{display:none}.dropzone__file-select,.files{margin-top:16px}.file{display:grid;grid-template-columns:44px 8px fit-content(60%) auto 24px 24px;grid-template-rows:24px 20px;align-items:end;align-items:baseline}.file:not(:last-child){margin-bottom:8px}.file__preview{grid-row-start:1;grid-row-end:3;align-self:stretch;display:flex;align-items:center;justify-content:center;background-color:var(--prizm-v3-form-fill-default);border:1px solid var(--prizm-v3-form-stroke-default);border-radius:2px}.file__icon{color:var(--prizm-v3-text-icon-secondary)}.file__image{object-fit:cover;height:44px;width:44px}.file__info{grid-column-start:3;grid-column-end:4;padding-right:8px;overflow:hidden;text-overflow:ellipsis;display:flex;gap:8px;align-items:baseline}.file__name{font-weight:600;font-size:14px;line-height:20px;color:var(--prizm-v3-text-icon-primary)}.file__size{font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-tertiary)}.file__stage{font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-tertiary);grid-column-start:4;grid-column-end:5}.file__retry-btn{justify-self:start;grid-column-start:5}.file__delete-btn{grid-column-start:6}.file__progress{grid-column-start:3;grid-column-end:-1;align-self:end}.progress{display:flex;align-items:center}.progress__bar.progress{color:var(--prizm-v3-status-info-primary-default)}.progress__bar.warning{color:var(--prizm-v3-status-alarm-primary-default)}.progress__bar.success{color:var(--prizm-v3-status-success-primary-default)}.progress__value{margin-left:8px;font-weight:500;font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-secondary)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "pipe", type: i1.KeyValuePipe, name: "keyvalue" }, { kind: "pipe", type: PrizmUploadStatusPipe, name: "prizmUploadStatus" }, { kind: "pipe", type: PrizmFileSizePipe, name: "prizmFileSize" }, { kind: "pipe", type: PrizmSanitizerPipe, name: "prizmSanitizer" }, { kind: "pipe", type: PrizmPluckPipe, name: "prizmPluck" }, { kind: "directive", type: PrizmLetDirective, selector: "[prizmLet]", inputs: ["prizmLet"], exportAs: ["prizmLet"] }, { kind: "component", type: PrizmProgressBarComponent, selector: "progress[prizmProgressBar]", inputs: ["color", "trackColor", "size"] }, { kind: "component", type: PrizmButtonComponent, selector: "button[prizmButton], button[prizmIconButton], a[prizmButton], a[prizmIconButton]", inputs: ["size", "icon", "iconRight", "appearance", "appearanceType", "disabled", "showLoader"] }, { kind: "component", type: PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmFileUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-file-upload', changeDetection: ChangeDetectionStrategy.OnPush, imports: [
                        CommonModule,
                        PrizmUploadStatusPipe,
                        PrizmFileSizePipe,
                        PrizmSanitizerPipe,
                        PrizmPluckPipe,
                        PrizmLetDirective,
                        PrizmProgressBarComponent,
                        PrizmButtonComponent,
                        PrizmIconComponent,
                    ], standalone: true, providers: [PrizmDestroyService, ...prizmI18nInitWithKey(PRIZM_FILE_UPLOAD, 'fileUpload')], template: "<ng-container *prizmLet=\"fileUpload$ | async as translations\">\n  <input\n    class=\"hidden\"\n    #inputFile\n    [multiple]=\"multiple\"\n    [accept]=\"accept\"\n    (change)=\"onFileInputChange($event)\"\n    type=\"file\"\n  />\n\n  <div class=\"dropzone\" #dropzone (drop)=\"onDrop($event)\">\n    <div class=\"dropzone__title\">\n      {{ translations | prizmPluck : ['dropzone__title'] }}\n    </div>\n    <div class=\"dropzone__description\">\n      {{ translations | prizmPluck : ['dropzone__description'] }}\n    </div>\n    <div class=\"dropzone__user-content\">\n      <ng-content></ng-content>\n    </div>\n\n    <button\n      class=\"dropzone__file-select\"\n      [disabled]=\"disabled\"\n      (click)=\"inputFile.click()\"\n      type=\"button\"\n      prizmButton\n      appearanceType=\"outline\"\n      appearance=\"secondary\"\n      size=\"m\"\n    >\n      {{ translations | prizmPluck : ['btn__select'] }}\n    </button>\n  </div>\n\n  <div class=\"files\" *ngIf=\"filesMap.size > 0\">\n    <div class=\"file files__item\" *ngFor=\"let item of filesMap | keyvalue; trackBy: filesTrackBy\">\n      <div class=\"file__preview\">\n        <img\n          class=\"file__image\"\n          *ngIf=\"item.value.url; else iconTpl\"\n          [src]=\"item.value.url | prizmSanitizer : 'bypassSecurityTrustResourceUrl'\"\n        />\n\n        <ng-template #iconTpl>\n          <prizm-icon class=\"file__icon\" [size]=\"16\" iconClass=\"files-file\"></prizm-icon>\n        </ng-template>\n      </div>\n\n      <div class=\"file__info\">\n        <span class=\"file__name\">{{ item.key }}</span>\n        <span class=\"file__size\">{{ item.value.file.size | prizmFileSize }}</span>\n      </div>\n\n      <div class=\"file__stage\">\n        {{  options.statusNames?.[item.value.progress | prizmUploadStatus : item.value.error] ?? (translations | prizmPluck : [item.value.progress | prizmUploadStatus : item.value.error]) }}\n      </div>\n\n      <button\n        class=\"file__retry-btn\"\n        *ngIf=\"item.value.error && options.showRetryButtons\"\n        [disabled]=\"disabled\"\n        [icon]=\"'arrows-refresh'\"\n        (click)=\"retryUpload(item.key)\"\n        prizmIconButton\n        appearanceType=\"ghost\"\n        appearance=\"secondary\"\n        size=\"s\"\n      ></button>\n\n      <button\n        class=\"file__delete-btn\"\n        [disabled]=\"disabled\"\n        [icon]=\"'delete'\"\n        (click)=\"removeFile(item.key)\"\n        prizmIconButton\n        appearanceType=\"ghost\"\n        appearance=\"secondary\"\n        size=\"s\"\n      ></button>\n\n      <div class=\"file__progress progress\">\n        <progress\n          class=\"progress__bar {{ item.value.progress | prizmUploadStatus : item.value.error }}\"\n          [value]=\"item.value.progress\"\n          prizmProgressBar\n          max=\"100\"\n          size=\"s\"\n        ></progress>\n        <span class=\"progress__value\">{{ item.value.progress }}%</span>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", styles: [":host{display:block}.hidden{display:none}.dropzone{padding:32px;border:1px dashed var(--prizm-v3-form-stroke-default);border-radius:2px;background-color:var(--prizm-v3-form-fill-default);display:flex;flex-direction:column;align-items:center}.dropzone.active{background-color:var(--prizm-v3-table-fill-row-hover);border:1px dashed var(--prizm-v3-form-stroke-hover)}.dropzone__title{font-weight:600;font-size:16px;line-height:20px;margin-bottom:8px;color:var(--prizm-v3-text-icon-primary)}.dropzone__description{font-weight:400;font-size:14px;line-height:20px;color:var(--prizm-v3-text-icon-secondary)}.dropzone__user-content{font-weight:400;font-size:12px;line-height:16px;margin-top:8px;color:var(--prizm-v3-text-icon-tertiary)}.dropzone__user-content:empty{display:none}.dropzone__file-select,.files{margin-top:16px}.file{display:grid;grid-template-columns:44px 8px fit-content(60%) auto 24px 24px;grid-template-rows:24px 20px;align-items:end;align-items:baseline}.file:not(:last-child){margin-bottom:8px}.file__preview{grid-row-start:1;grid-row-end:3;align-self:stretch;display:flex;align-items:center;justify-content:center;background-color:var(--prizm-v3-form-fill-default);border:1px solid var(--prizm-v3-form-stroke-default);border-radius:2px}.file__icon{color:var(--prizm-v3-text-icon-secondary)}.file__image{object-fit:cover;height:44px;width:44px}.file__info{grid-column-start:3;grid-column-end:4;padding-right:8px;overflow:hidden;text-overflow:ellipsis;display:flex;gap:8px;align-items:baseline}.file__name{font-weight:600;font-size:14px;line-height:20px;color:var(--prizm-v3-text-icon-primary)}.file__size{font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-tertiary)}.file__stage{font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-tertiary);grid-column-start:4;grid-column-end:5}.file__retry-btn{justify-self:start;grid-column-start:5}.file__delete-btn{grid-column-start:6}.file__progress{grid-column-start:3;grid-column-end:-1;align-self:end}.progress{display:flex;align-items:center}.progress__bar.progress{color:var(--prizm-v3-status-info-primary-default)}.progress__bar.warning{color:var(--prizm-v3-status-alarm-primary-default)}.progress__bar.success{color:var(--prizm-v3-status-success-primary-default)}.progress__value{margin-left:8px;font-weight:500;font-size:10px;line-height:12px;color:var(--prizm-v3-text-icon-secondary)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [PRIZM_FILE_UPLOAD]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRIZM_FILEUPLOAD_OPTIONS]
                }] }]; }, propDecorators: { dropzoneElementRef: [{
                type: ViewChild,
                args: ['dropzone']
            }], accept: [{
                type: Input
            }], multiple: [{
                type: Input
            }], maxFileSize: [{
                type: Input
            }], maxFilesCount: [{
                type: Input
            }], disabled: [{
                type: Input
            }], progress: [{
                type: Input
            }], beforeFilesChange: [{
                type: Output
            }], filesChange: [{
                type: Output
            }], filesValidationErrors: [{
                type: Output
            }], filesCountError: [{
                type: Output
            }], retry: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,