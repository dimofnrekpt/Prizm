import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output, TemplateRef, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../../../../directives/polymorph/directives/outlet";
import * as i4 from "../../../input/carousel/input-carousel.component";
import * as i5 from "../../../input/common/input-layout/input-layout.component";
export class PrizmCronCarouselComponent {
    constructor() {
        this.valueChange = new EventEmitter();
    }
}
PrizmCronCarouselComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronCarouselComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PrizmCronCarouselComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmCronCarouselComponent, selector: "prizm-cron-carousel", inputs: { content: "content", value: "value" }, outputs: { valueChange: "valueChange" }, queries: [{ propertyName: "template", first: true, predicate: ["content"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<prizm-input-layout [label]=\"null\" [size]=\"'m'\" [outer]=\"true\" [position]=\"'center'\">\n  <prizm-input-carousel\n    [required]=\"true\"\n    [carouselContent]=\"content\"\n    [ngModel]=\"value\"\n    [ngModelOptions]=\"{ standalone: true }\"\n    [lightMode]=\"true\"\n    [ngSwitch]=\"!!template\"\n    (ngModelChange)=\"valueChange.emit((value = $event))\"\n  >\n    <ng-container *polymorphOutlet=\"template as value; context: { content: content.currentValue }\">\n      <div>{{ content.currentValue }}</div>\n    </ng-container>\n  </prizm-input-carousel>\n</prizm-input-layout>\n", styles: [".block{display:grid;grid-template-columns:repeat(8,1fr);gap:6px}\n"], dependencies: [{ kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.PolymorphOutletDirective, selector: "[polymorphOutlet]", inputs: ["polymorphOutlet", "polymorphOutletContext", "polymorphOutletInjector"] }, { kind: "component", type: i4.PrizmInputCarouselComponent, selector: "prizm-input-carousel", inputs: ["carouselContent", "lightMode"] }, { kind: "component", type: i5.PrizmInputLayoutComponent, selector: "prizm-input-layout", inputs: ["label", "size", "status", "outer", "clearButton", "border", "position", "forceClear"], outputs: ["clear"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmCronCarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-cron-carousel', changeDetection: ChangeDetectionStrategy.OnPush, template: "<prizm-input-layout [label]=\"null\" [size]=\"'m'\" [outer]=\"true\" [position]=\"'center'\">\n  <prizm-input-carousel\n    [required]=\"true\"\n    [carouselContent]=\"content\"\n    [ngModel]=\"value\"\n    [ngModelOptions]=\"{ standalone: true }\"\n    [lightMode]=\"true\"\n    [ngSwitch]=\"!!template\"\n    (ngModelChange)=\"valueChange.emit((value = $event))\"\n  >\n    <ng-container *polymorphOutlet=\"template as value; context: { content: content.currentValue }\">\n      <div>{{ content.currentValue }}</div>\n    </ng-container>\n  </prizm-input-carousel>\n</prizm-input-layout>\n", styles: [".block{display:grid;grid-template-columns:repeat(8,1fr);gap:6px}\n"] }]
        }], propDecorators: { content: [{
                type: Input
            }], value: [{
                type: Input
            }], template: [{
                type: ContentChild,
                args: ['content', { read: TemplateRef }]
            }], valueChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9jcm9uL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9jcm9uL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQVV2QixNQUFNLE9BQU8sMEJBQTBCO0lBTnZDO1FBaUJTLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztLQUNqRDs7dUhBWlksMEJBQTBCOzJHQUExQiwwQkFBMEIsZ09BT0osV0FBVyw2QkN6QjlDLG1sQkFlQTsyRkRHYSwwQkFBMEI7a0JBTnRDLFNBQVM7K0JBQ0UscUJBQXFCLG1CQUdkLHVCQUF1QixDQUFDLE1BQU07OEJBSXhDLE9BQU87c0JBRGIsS0FBSztnQkFJQyxLQUFLO3NCQURYLEtBQUs7Z0JBSUMsUUFBUTtzQkFEZCxZQUFZO3VCQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7Z0JBSXZDLFdBQVc7c0JBRGpCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9seW1vcnBoQ29udGVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2RpcmVjdGl2ZXMvcG9seW1vcnBoJztcbmltcG9ydCB7IFByaXptQ2Fyb3VzZWxDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vaW5wdXQvY2Fyb3VzZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwcml6bS1jcm9uLWNhcm91c2VsJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2Fyb3VzZWwuY29tcG9uZW50Lmxlc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nhcm91c2VsLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFByaXptQ3JvbkNhcm91c2VsQ29tcG9uZW50IHtcbiAgQElucHV0KClcbiAgcHVibGljIGNvbnRlbnQhOiBQcml6bUNhcm91c2VsQ29udGVudDtcblxuICBASW5wdXQoKVxuICBwdWJsaWMgdmFsdWUhOiBzdHJpbmc7XG5cbiAgQENvbnRlbnRDaGlsZCgnY29udGVudCcsIHsgcmVhZDogVGVtcGxhdGVSZWYgfSlcbiAgcHVibGljIHRlbXBsYXRlITogUG9seW1vcnBoQ29udGVudDx7IGNvbnRlbnQ6IG51bWJlciB9PjtcblxuICBAT3V0cHV0KClcbiAgcHVibGljIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG59XG4iLCI8cHJpem0taW5wdXQtbGF5b3V0IFtsYWJlbF09XCJudWxsXCIgW3NpemVdPVwiJ20nXCIgW291dGVyXT1cInRydWVcIiBbcG9zaXRpb25dPVwiJ2NlbnRlcidcIj5cbiAgPHByaXptLWlucHV0LWNhcm91c2VsXG4gICAgW3JlcXVpcmVkXT1cInRydWVcIlxuICAgIFtjYXJvdXNlbENvbnRlbnRdPVwiY29udGVudFwiXG4gICAgW25nTW9kZWxdPVwidmFsdWVcIlxuICAgIFtuZ01vZGVsT3B0aW9uc109XCJ7IHN0YW5kYWxvbmU6IHRydWUgfVwiXG4gICAgW2xpZ2h0TW9kZV09XCJ0cnVlXCJcbiAgICBbbmdTd2l0Y2hdPVwiISF0ZW1wbGF0ZVwiXG4gICAgKG5nTW9kZWxDaGFuZ2UpPVwidmFsdWVDaGFuZ2UuZW1pdCgodmFsdWUgPSAkZXZlbnQpKVwiXG4gID5cbiAgICA8bmctY29udGFpbmVyICpwb2x5bW9ycGhPdXRsZXQ9XCJ0ZW1wbGF0ZSBhcyB2YWx1ZTsgY29udGV4dDogeyBjb250ZW50OiBjb250ZW50LmN1cnJlbnRWYWx1ZSB9XCI+XG4gICAgICA8ZGl2Pnt7IGNvbnRlbnQuY3VycmVudFZhbHVlIH19PC9kaXY+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvcHJpem0taW5wdXQtY2Fyb3VzZWw+XG48L3ByaXptLWlucHV0LWxheW91dD5cbiJdfQ==