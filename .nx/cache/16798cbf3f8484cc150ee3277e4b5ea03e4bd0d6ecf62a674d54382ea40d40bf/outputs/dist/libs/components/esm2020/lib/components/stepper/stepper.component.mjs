import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, } from '@angular/core';
import { merge } from 'rxjs';
import { map, startWith, switchMap } from 'rxjs/operators';
import { PrizmStepperStepDirective } from './stepper-step.directive';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { CommonModule } from '@angular/common';
import { PrizmStepperSelectorComponent } from './stepper-selector.component';
import { prizmEmptyQueryList } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class PrizmStepperComponent extends PrizmAbstractTestId {
    constructor() {
        super(...arguments);
        this.title = '';
        this.currentStep = 1;
        this.vertical = false;
        this.stepsSize = 'auto';
        this.selectStep = new EventEmitter();
        this.prizmStepperStepDirectiveQL = prizmEmptyQueryList();
        this.testId_ = 'ui_stepper';
    }
    get currentStepTemplate() {
        const currentStep = this.prizmStepperStepDirectiveQL.find(stepDirective => stepDirective.index === this.currentStep);
        return currentStep?.template ?? null;
    }
    ngAfterContentInit() {
        const steps$ = this.prizmStepperStepDirectiveQL.changes.pipe(startWith(this.prizmStepperStepDirectiveQL));
        const stepsInnerStateChanged$ = merge(...this.prizmStepperStepDirectiveQL.toArray().map(stepDirective => stepDirective.stateChanged));
        this.steps$ = merge(steps$, stepsInnerStateChanged$.pipe(switchMap(() => steps$))).pipe(map(ql => ql.toArray().sort((prev, curr) => prev.index - curr.index)));
    }
    onSelectStep(step) {
        this.selectStep.next(step);
    }
}
PrizmStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmStepperComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
PrizmStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: PrizmStepperComponent, isStandalone: true, selector: "prizm-stepper", inputs: { title: "title", currentStep: "currentStep", vertical: "vertical", stepsSize: "stepsSize" }, outputs: { selectStep: "selectStep" }, host: { properties: { "class.vertical": "vertical" }, classAttribute: "prizm-stepper" }, queries: [{ propertyName: "prizmStepperStepDirectiveQL", predicate: PrizmStepperStepDirective }], usesInheritance: true, ngImport: i0, template: "<div class=\"header\">{{ title }}</div>\n\n<div class=\"wrapper\">\n  <prizm-stepper-selector\n    [steps]=\"$any(steps$ | async)\"\n    [currentStep]=\"currentStep\"\n    [ngStyle]=\"{ 'min-width': vertical ? stepsSize : 'auto', 'min-height': vertical ? 'auto' : stepsSize }\"\n    [vertical]=\"vertical\"\n    (selectStep)=\"onSelectStep($event)\"\n  ></prizm-stepper-selector>\n\n  <div class=\"step-content\">\n    <ng-container *ngTemplateOutlet=\"currentStepTemplate\"></ng-container>\n  </div>\n</div>\n\n<div class=\"footer\">\n  <ng-content select=\"[prizmStepperFooter]\"></ng-content>\n</div>\n", styles: [":host{border-radius:2px;border:1px solid var(--prizm-v3-background-stroke);display:flex;flex-direction:column;background-color:var(--prizm-v3-background-fill-primary)}.header{font-size:14px;line-height:20px;font-weight:600;padding:14px 16px;border-bottom:1px solid var(--prizm-v3-background-stroke);color:var(--prizm-v3-text-icon-primary);background-color:var(--prizm-v3-background-fill-panel)}.wrapper{display:flex;flex-direction:column}.step-content{padding:16px}.footer{border-top:1px solid var(--prizm-v3-background-stroke);padding:16px}:host-context(.vertical) .wrapper{flex-direction:row}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "component", type: PrizmStepperSelectorComponent, selector: "prizm-stepper-selector", inputs: ["steps", "currentStep", "vertical"], outputs: ["selectStep"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: PrizmStepperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-stepper', host: {
                        class: 'prizm-stepper',
                        '[class.vertical]': 'vertical',
                    }, standalone: true, imports: [CommonModule, PrizmStepperSelectorComponent], template: "<div class=\"header\">{{ title }}</div>\n\n<div class=\"wrapper\">\n  <prizm-stepper-selector\n    [steps]=\"$any(steps$ | async)\"\n    [currentStep]=\"currentStep\"\n    [ngStyle]=\"{ 'min-width': vertical ? stepsSize : 'auto', 'min-height': vertical ? 'auto' : stepsSize }\"\n    [vertical]=\"vertical\"\n    (selectStep)=\"onSelectStep($event)\"\n  ></prizm-stepper-selector>\n\n  <div class=\"step-content\">\n    <ng-container *ngTemplateOutlet=\"currentStepTemplate\"></ng-container>\n  </div>\n</div>\n\n<div class=\"footer\">\n  <ng-content select=\"[prizmStepperFooter]\"></ng-content>\n</div>\n", styles: [":host{border-radius:2px;border:1px solid var(--prizm-v3-background-stroke);display:flex;flex-direction:column;background-color:var(--prizm-v3-background-fill-primary)}.header{font-size:14px;line-height:20px;font-weight:600;padding:14px 16px;border-bottom:1px solid var(--prizm-v3-background-stroke);color:var(--prizm-v3-text-icon-primary);background-color:var(--prizm-v3-background-fill-panel)}.wrapper{display:flex;flex-direction:column}.step-content{padding:16px}.footer{border-top:1px solid var(--prizm-v3-background-stroke);padding:16px}:host-context(.vertical) .wrapper{flex-direction:row}\n"] }]
        }], propDecorators: { title: [{
                type: Input
            }], currentStep: [{
                type: Input
            }], vertical: [{
                type: Input
            }], stepsSize: [{
                type: Input
            }], selectStep: [{
                type: Output
            }], prizmStepperStepDirectiveQL: [{
                type: ContentChildren,
                args: [PrizmStepperStepDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL3N0ZXBwZXIvc3RlcHBlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEdBRVYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLEtBQUssRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUN6QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0UsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7OztBQWN4RCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsbUJBQW1CO0lBWjlEOztRQWFXLFVBQUssR0FBRyxFQUFFLENBQUM7UUFFWCxnQkFBVyxHQUFHLENBQUMsQ0FBQztRQUVoQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWpCLGNBQVMsR0FBRyxNQUFNLENBQUM7UUFFbEIsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHbEQsZ0NBQTJCLEdBQXlDLG1CQUFtQixFQUFFLENBQUM7UUFHeEUsWUFBTyxHQUFHLFlBQVksQ0FBQztLQXlCMUM7SUF4QkMsSUFBSSxtQkFBbUI7UUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FDdkQsYUFBYSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQzFELENBQUM7UUFDRixPQUFPLFdBQVcsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxrQkFBa0I7UUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQzFELFNBQVMsQ0FBdUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQ2xGLENBQUM7UUFFRixNQUFNLHVCQUF1QixHQUFHLEtBQUssQ0FDbkMsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUMvRixDQUFDO1FBRUYsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLHVCQUF1QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDckYsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3RFLENBQUM7SUFDSixDQUFDO0lBRU0sWUFBWSxDQUFDLElBQVk7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7a0hBdkNVLHFCQUFxQjtzR0FBckIscUJBQXFCLDJWQVdmLHlCQUF5QixvREMxQzVDLCtsQkFtQkEsNm9CRFVZLFlBQVksZ1ZBQUUsNkJBQTZCOzJGQUUxQyxxQkFBcUI7a0JBWmpDLFNBQVM7K0JBQ0UsZUFBZSxRQUluQjt3QkFDSixLQUFLLEVBQUUsZUFBZTt3QkFDdEIsa0JBQWtCLEVBQUUsVUFBVTtxQkFDL0IsY0FDVyxJQUFJLFdBQ1AsQ0FBQyxZQUFZLEVBQUUsNkJBQTZCLENBQUM7OEJBRzdDLEtBQUs7c0JBQWIsS0FBSztnQkFFRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBRUcsU0FBUztzQkFBakIsS0FBSztnQkFFSSxVQUFVO3NCQUFuQixNQUFNO2dCQUdQLDJCQUEyQjtzQkFEMUIsZUFBZTt1QkFBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBRdWVyeUxpc3QsXG4gIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgbWVyZ2UsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlIH0gZnJvbSAnLi9zdGVwcGVyLXN0ZXAuZGlyZWN0aXZlJztcbmltcG9ydCB7IFByaXptQWJzdHJhY3RUZXN0SWQgfSBmcm9tICdAcHJpem0tdWkvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUHJpem1TdGVwcGVyU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXItc2VsZWN0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IHByaXptRW1wdHlRdWVyeUxpc3QgfSBmcm9tICdAcHJpem0tdWkvaGVscGVycyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ByaXptLXN0ZXBwZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RlcHBlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3N0ZXBwZXIuY29tcG9uZW50Lmxlc3MnXSxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XG4gIGhvc3Q6IHtcbiAgICBjbGFzczogJ3ByaXptLXN0ZXBwZXInLFxuICAgICdbY2xhc3MudmVydGljYWxdJzogJ3ZlcnRpY2FsJyxcbiAgfSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUHJpem1TdGVwcGVyU2VsZWN0b3JDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBQcml6bVN0ZXBwZXJDb21wb25lbnQgZXh0ZW5kcyBQcml6bUFic3RyYWN0VGVzdElkIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIEBJbnB1dCgpIHRpdGxlID0gJyc7XG5cbiAgQElucHV0KCkgY3VycmVudFN0ZXAgPSAxO1xuXG4gIEBJbnB1dCgpIHZlcnRpY2FsID0gZmFsc2U7XG5cbiAgQElucHV0KCkgc3RlcHNTaXplID0gJ2F1dG8nO1xuXG4gIEBPdXRwdXQoKSBzZWxlY3RTdGVwID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihQcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlKVxuICBwcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlUUw6IFF1ZXJ5TGlzdDxQcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlPiA9IHByaXptRW1wdHlRdWVyeUxpc3QoKTtcblxuICBzdGVwcyQhOiBPYnNlcnZhYmxlPFByaXptU3RlcHBlclN0ZXBEaXJlY3RpdmVbXT47XG4gIG92ZXJyaWRlIHJlYWRvbmx5IHRlc3RJZF8gPSAndWlfc3RlcHBlcic7XG4gIGdldCBjdXJyZW50U3RlcFRlbXBsYXRlKCk6IFRlbXBsYXRlUmVmPGFueT4gfCBudWxsIHtcbiAgICBjb25zdCBjdXJyZW50U3RlcCA9IHRoaXMucHJpem1TdGVwcGVyU3RlcERpcmVjdGl2ZVFMLmZpbmQoXG4gICAgICBzdGVwRGlyZWN0aXZlID0+IHN0ZXBEaXJlY3RpdmUuaW5kZXggPT09IHRoaXMuY3VycmVudFN0ZXBcbiAgICApO1xuICAgIHJldHVybiBjdXJyZW50U3RlcD8udGVtcGxhdGUgPz8gbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZCB7XG4gICAgY29uc3Qgc3RlcHMkID0gdGhpcy5wcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlUUwuY2hhbmdlcy5waXBlKFxuICAgICAgc3RhcnRXaXRoPFF1ZXJ5TGlzdDxQcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlPj4odGhpcy5wcml6bVN0ZXBwZXJTdGVwRGlyZWN0aXZlUUwpXG4gICAgKTtcblxuICAgIGNvbnN0IHN0ZXBzSW5uZXJTdGF0ZUNoYW5nZWQkID0gbWVyZ2UoXG4gICAgICAuLi50aGlzLnByaXptU3RlcHBlclN0ZXBEaXJlY3RpdmVRTC50b0FycmF5KCkubWFwKHN0ZXBEaXJlY3RpdmUgPT4gc3RlcERpcmVjdGl2ZS5zdGF0ZUNoYW5nZWQpXG4gICAgKTtcblxuICAgIHRoaXMuc3RlcHMkID0gbWVyZ2Uoc3RlcHMkLCBzdGVwc0lubmVyU3RhdGVDaGFuZ2VkJC5waXBlKHN3aXRjaE1hcCgoKSA9PiBzdGVwcyQpKSkucGlwZShcbiAgICAgIG1hcChxbCA9PiBxbC50b0FycmF5KCkuc29ydCgocHJldiwgY3VycikgPT4gcHJldi5pbmRleCAtIGN1cnIuaW5kZXgpKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgb25TZWxlY3RTdGVwKHN0ZXA6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMuc2VsZWN0U3RlcC5uZXh0KHN0ZXApO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+e3sgdGl0bGUgfX08L2Rpdj5cblxuPGRpdiBjbGFzcz1cIndyYXBwZXJcIj5cbiAgPHByaXptLXN0ZXBwZXItc2VsZWN0b3JcbiAgICBbc3RlcHNdPVwiJGFueShzdGVwcyQgfCBhc3luYylcIlxuICAgIFtjdXJyZW50U3RlcF09XCJjdXJyZW50U3RlcFwiXG4gICAgW25nU3R5bGVdPVwieyAnbWluLXdpZHRoJzogdmVydGljYWwgPyBzdGVwc1NpemUgOiAnYXV0bycsICdtaW4taGVpZ2h0JzogdmVydGljYWwgPyAnYXV0bycgOiBzdGVwc1NpemUgfVwiXG4gICAgW3ZlcnRpY2FsXT1cInZlcnRpY2FsXCJcbiAgICAoc2VsZWN0U3RlcCk9XCJvblNlbGVjdFN0ZXAoJGV2ZW50KVwiXG4gID48L3ByaXptLXN0ZXBwZXItc2VsZWN0b3I+XG5cbiAgPGRpdiBjbGFzcz1cInN0ZXAtY29udGVudFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJjdXJyZW50U3RlcFRlbXBsYXRlXCI+PC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxkaXYgY2xhc3M9XCJmb290ZXJcIj5cbiAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3ByaXptU3RlcHBlckZvb3Rlcl1cIj48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbiJdfQ==