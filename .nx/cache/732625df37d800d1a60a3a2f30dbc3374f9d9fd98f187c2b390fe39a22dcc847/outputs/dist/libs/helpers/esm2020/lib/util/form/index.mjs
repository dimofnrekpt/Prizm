import { concat, EMPTY, mapTo, merge, of, timer } from 'rxjs';
import { filter, first, map, tap } from 'rxjs/operators';
export class PrizmFormControlHelpers {
    static getDisabled$(origin) {
        return origin.statusChanges.pipe(map(() => this.getDisabled(origin)));
    }
    static getValidators$(origin) {
        return origin.statusChanges.pipe(map(() => this.getValidators(origin)));
    }
    static getAsyncValidators$(origin) {
        return origin.statusChanges.pipe(map(() => this.getAsyncValidators(origin)));
    }
    static getValue$(origin) {
        return origin.valueChanges.pipe(map(() => this.getValue(origin)));
    }
    static getDisabled(origin) {
        return origin.disabled;
    }
    static isTouched(origin) {
        return origin.touched;
    }
    static isDirty(origin) {
        return origin.dirty;
    }
    static getValidators(origin) {
        return origin?.['_rawValidators'] ?? null;
    }
    static getAsyncValidators(origin) {
        return origin?.['_rawAsyncValidators'] ?? null;
    }
    static getValue(origin) {
        return origin.value;
    }
    static syncStates(origin, bidirectional, ...others) {
        const all = [origin, ...others];
        return concat(timer(0).pipe(map(() => origin)), bidirectional
            ? merge(...all.map(control => control.statusChanges.pipe(mapTo(control))))
            : origin.statusChanges.pipe(mapTo(origin))).pipe(map(origin => {
            (bidirectional ? all : others).forEach(control => {
                const disabled = this.getDisabled(origin);
                if (disabled === control.disabled)
                    return;
                if (disabled) {
                    control.disable();
                }
                else {
                    control.enable();
                }
                this.syncControlVisualStates(origin, control);
            });
            return this.getDisabled(origin);
        }));
    }
    static syncValidators(origin, bidirectional, ...others) {
        const all = [origin, ...others];
        return concat(of(this.getValidators(origin)), bidirectional ? merge(...all.map(control => this.getValidators$(control))) : this.getValidators$(origin)).pipe(tap(validators => {
            (bidirectional ? all : others).forEach(control => {
                control.setValidators(validators);
            });
        }));
    }
    static syncAllValidators(origin, bidirectional, ...others) {
        return merge(this.syncValidators(origin, bidirectional, ...others), this.syncAsyncValidators(origin, bidirectional, ...others));
    }
    static syncAsyncValidators(origin, bidirectional, ...others) {
        const all = [origin, ...others];
        return concat(of(this.getAsyncValidators(origin)), bidirectional
            ? merge(...all.map(control => this.getAsyncValidators$(control)))
            : this.getAsyncValidators$(origin)).pipe(tap(asyncValidators => {
            (bidirectional ? all : others).forEach(control => {
                control.setAsyncValidators(asyncValidators);
            });
        }));
    }
    static setValue(control, newValue, options) {
        const currentValue = this.getValue(control);
        if (currentValue === newValue)
            return;
        control.setValue(newValue, options);
    }
    static setDisabled(control, disabled, options) {
        if (disabled === control.disabled)
            return;
        if (!disabled)
            control.enable(options);
        else
            control.disable(options);
    }
    static syncControlVisualStates(control, other) {
        if (control.pristine)
            other.markAsPristine();
        if (control.dirty)
            other.markAsDirty();
        if (control.touched)
            other.markAsTouched();
        if (control.untouched)
            other.markAsUntouched();
        if (control.pending)
            other.markAsPending();
    }
    static syncValues(origin, fromOrigin, fromOthers, ...others) {
        return merge(timer(0).pipe(first(), map(() => this.getValue(origin)), tap((valueFromOrigin) => {
            const value = fromOrigin(valueFromOrigin);
            others.forEach(control => {
                this.setValue(control, value);
                this.syncControlVisualStates(origin, control);
            });
        })), this.getValue$(origin).pipe(filter(() => Boolean(fromOrigin)), tap((valueFromOrigin) => {
            const value = fromOrigin(valueFromOrigin);
            others.forEach(control => {
                this.setValue(control, value);
                this.syncControlVisualStates(origin, control);
            });
        })), fromOthers
            ? merge(...others.map(control => this.getValue$(control))).pipe(filter(() => Boolean(fromOthers)), tap((valueFromOther) => {
                const value = fromOthers(valueFromOther);
                this.setValue(origin, value);
            }))
            : EMPTY).pipe(map(() => this.getValue(origin)));
    }
}
//# sourceMappingURL=data:application/json;base64,