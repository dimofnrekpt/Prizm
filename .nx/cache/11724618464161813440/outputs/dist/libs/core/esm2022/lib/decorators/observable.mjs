import { Subject } from 'rxjs';
export function prizmObservable(options = {}) {
  return (rTarget, key) => {
    const postfix = options.postfix ?? '$$';
    const defaultValue = options.defaultValue ?? null;
    const subject =
      typeof options.subject === 'function' ? options.subject() : options.subject ?? new Subject();
    const memberName = key;
    let lastValue;
    const hiddenPropertyName = options.name ?? `${memberName}${postfix}`;
    function createBaseProperty(obj) {
      Object.defineProperty(obj, hiddenPropertyName, {
        ...{ enumerable: false },
        ...(options?.attributes ?? {}),
        value: subject,
      });
    }
    Object.defineProperty(rTarget, memberName, {
      set(newValue) {
        const value = (lastValue = newValue ?? defaultValue);
        let method = this[hiddenPropertyName];
        if (!method?.next) {
          createBaseProperty(this);
          method = this[hiddenPropertyName];
        }
        method.next(value);
      },
      get() {
        const method = this[hiddenPropertyName];
        if (!method?.next) {
          createBaseProperty(this);
          subject.next((lastValue = defaultValue));
        }
        return lastValue;
      },
    });
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzZXJ2YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29yZS9zcmMvbGliL2RlY29yYXRvcnMvb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdELE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3RSxNQUFNLFVBQVUsZUFBZSxDQUM3QixVQVdJLEVBQUU7SUFFTixPQUFPLENBQUMsT0FBWSxFQUFFLEdBQUcsRUFBUSxFQUFFO1FBQ2pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDO1FBQ3hDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDO1FBQ2xELE1BQU0sT0FBTyxHQUNYLE9BQU8sT0FBTyxDQUFDLE9BQU8sS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLE9BQU8sRUFBSyxDQUFDO1FBQ2xHLE1BQU0sVUFBVSxHQUFHLEdBQWEsQ0FBQztRQUNqQyxJQUFJLFNBQVksQ0FBQztRQUNqQixNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxJQUFJLElBQUksR0FBRyxVQUFVLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDckUsU0FBUyxrQkFBa0IsQ0FBQyxHQUFZO1lBQ3RDLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFO2dCQUM3QyxHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRTtnQkFDeEIsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDO2dCQUM5QixLQUFLLEVBQUUsT0FBTzthQUNmLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUU7WUFDekMsR0FBRyxDQUFDLFFBQVc7Z0JBQ2IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFNLENBQUMsQ0FBQztnQkFFNUQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFlLENBQUM7Z0JBRXBELElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFO29CQUNqQixrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDekIsTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2lCQUNuQztnQkFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLENBQUM7WUFDRCxHQUFHO2dCQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBZSxDQUFDO2dCQUN0RCxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtvQkFDakIsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEdBQUcsWUFBaUIsQ0FBQyxDQUFDLENBQUM7aUJBQy9DO2dCQUNELE9BQU8sU0FBUyxDQUFDO1lBQ25CLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QsIFJlcGxheVN1YmplY3QsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBmdW5jdGlvbiBwcml6bU9ic2VydmFibGU8VD4oXG4gIG9wdGlvbnM6IHtcbiAgICBkZWZhdWx0VmFsdWU/OiBUO1xuICAgIHBvc3RmaXg/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogZGVmYXVsdCBuYW1lIGl0IGlzIGAke25hbWV9JCRgXG4gICAgICogKi9cbiAgICBuYW1lPzogc3RyaW5nIHwgc3ltYm9sO1xuICAgIHN1YmplY3Q/OlxuICAgICAgfCAoQmVoYXZpb3JTdWJqZWN0PFQ+IHwgUmVwbGF5U3ViamVjdDxUPiB8IEFzeW5jU3ViamVjdDxUPiB8IFN1YmplY3Q8VD4pXG4gICAgICB8ICgoKSA9PiBCZWhhdmlvclN1YmplY3Q8VD4gfCBSZXBsYXlTdWJqZWN0PFQ+IHwgQXN5bmNTdWJqZWN0PFQ+IHwgU3ViamVjdDxUPik7XG4gICAgYXR0cmlidXRlcz86IFByb3BlcnR5RGVzY3JpcHRvcjtcbiAgfSA9IHt9XG4pOiBQcm9wZXJ0eURlY29yYXRvciB7XG4gIHJldHVybiAoclRhcmdldDogYW55LCBrZXkpOiB2b2lkID0+IHtcbiAgICBjb25zdCBwb3N0Zml4ID0gb3B0aW9ucy5wb3N0Zml4ID8/ICckJCc7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgPz8gbnVsbDtcbiAgICBjb25zdCBzdWJqZWN0ID1cbiAgICAgIHR5cGVvZiBvcHRpb25zLnN1YmplY3QgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLnN1YmplY3QoKSA6IG9wdGlvbnMuc3ViamVjdCA/PyBuZXcgU3ViamVjdDxUPigpO1xuICAgIGNvbnN0IG1lbWJlck5hbWUgPSBrZXkgYXMgc3RyaW5nO1xuICAgIGxldCBsYXN0VmFsdWU6IFQ7XG4gICAgY29uc3QgaGlkZGVuUHJvcGVydHlOYW1lID0gb3B0aW9ucy5uYW1lID8/IGAke21lbWJlck5hbWV9JHtwb3N0Zml4fWA7XG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZVByb3BlcnR5KG9iajogdW5rbm93bik6IHZvaWQge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgaGlkZGVuUHJvcGVydHlOYW1lLCB7XG4gICAgICAgIC4uLnsgZW51bWVyYWJsZTogZmFsc2UgfSxcbiAgICAgICAgLi4uKG9wdGlvbnM/LmF0dHJpYnV0ZXMgPz8ge30pLFxuICAgICAgICB2YWx1ZTogc3ViamVjdCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyVGFyZ2V0LCBtZW1iZXJOYW1lLCB7XG4gICAgICBzZXQobmV3VmFsdWU6IFQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSAobGFzdFZhbHVlID0gKG5ld1ZhbHVlID8/IGRlZmF1bHRWYWx1ZSkgYXMgVCk7XG5cbiAgICAgICAgbGV0IG1ldGhvZCA9IHRoaXNbaGlkZGVuUHJvcGVydHlOYW1lXSBhcyBTdWJqZWN0PFQ+O1xuXG4gICAgICAgIGlmICghbWV0aG9kPy5uZXh0KSB7XG4gICAgICAgICAgY3JlYXRlQmFzZVByb3BlcnR5KHRoaXMpO1xuICAgICAgICAgIG1ldGhvZCA9IHRoaXNbaGlkZGVuUHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBtZXRob2QubmV4dCh2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgZ2V0KCkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzW2hpZGRlblByb3BlcnR5TmFtZV0gYXMgU3ViamVjdDxUPjtcbiAgICAgICAgaWYgKCFtZXRob2Q/Lm5leHQpIHtcbiAgICAgICAgICBjcmVhdGVCYXNlUHJvcGVydHkodGhpcyk7XG4gICAgICAgICAgc3ViamVjdC5uZXh0KChsYXN0VmFsdWUgPSBkZWZhdWx0VmFsdWUgYXMgVCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYXN0VmFsdWU7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xufVxuIl19
