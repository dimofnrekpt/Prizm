import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { Observable } from 'rxjs';
import { PrizmDayRangePeriod } from '../../@core/classes/day-range-period';
import { PrizmDay } from '../../@core/date-time/day';
import { PrizmDayRange } from '../../@core/date-time/day-range';
import { PrizmMonth } from '../../@core/date-time/month';
import { PrizmDayLike } from '../../types/day-like';
import { PrizmBooleanHandler } from '../../types/handler';
import { PrizmMapper } from '../../types/mapper';
import { PrizmMarkerHandler } from '../../types/marker-handler';
import { PrizmWithOptionalMinMax } from '../../types/with-optional-min-max';
import { PrizmAbstractTestId } from '../../abstract/interactive';
import * as i0 from "@angular/core";
export declare class PrizmCalendarRangeComponent extends PrizmAbstractTestId implements PrizmWithOptionalMinMax<PrizmDay> {
    readonly otherDateText$: Observable<string>;
    defaultViewedMonth: PrizmMonth;
    disabledItemHandler: PrizmBooleanHandler<PrizmDay>;
    markerHandler: PrizmMarkerHandler;
    items: readonly PrizmDayRangePeriod[];
    min: PrizmDay;
    max: PrizmDay;
    minLength: PrizmDayLike | null;
    maxLength: PrizmDayLike | null;
    value: PrizmDayRange | null;
    readonly valueChange: EventEmitter<PrizmDayRange>;
    /** @deprecated TODO: 2.0 remove */
    readonly rangeChange: EventEmitter<PrizmDayRange | null>;
    readonly testId_ = "ui_calendar_range";
    readonly maxLengthMapper: PrizmMapper<PrizmDay, PrizmDay>;
    constructor(valueChanges: Observable<PrizmDayRange | null> | null, changeDetectorRef: ChangeDetectorRef, destroy$: PrizmDestroyService, otherDateText$: Observable<string>);
    readonly getEndRangeMonthOrShift: PrizmMapper<PrizmMonth, PrizmMonth>;
    readonly mapper: PrizmMapper<readonly PrizmDayRangePeriod[], ReadonlyArray<PrizmDayRangePeriod | string>>;
    get calculatedDisabledItemHandler(): PrizmBooleanHandler<PrizmDay>;
    get computedMonth(): PrizmMonth;
    isItemActive(item: string | PrizmDayRangePeriod): boolean;
    onRangeChange(dayRange: PrizmDayRange): void;
    onDayClick(day: PrizmDay): void;
    onItemSelect(item: string | PrizmDayRangePeriod): void;
    updateValue(value: PrizmDayRange | null): void;
    private get activePeriod();
    private calculateDisabledItemHandler;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmCalendarRangeComponent, [{ optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmCalendarRangeComponent, "prizm-calendar-range", never, { "defaultViewedMonth": { "alias": "defaultViewedMonth"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "markerHandler": { "alias": "markerHandler"; "required": false; }; "items": { "alias": "items"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "minLength": { "alias": "minLength"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "valueChange": "valueChange"; "rangeChange": "rangeChange"; }, never, ["[footerFrom]", "[headerFrom]", "[footerTo]", "[headerTo]"], true, never>;
}
