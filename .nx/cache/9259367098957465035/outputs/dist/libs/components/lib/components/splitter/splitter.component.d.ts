import { AfterContentInit, AfterViewInit, ChangeDetectorRef, EventEmitter, QueryList } from '@angular/core';
import { PrizmSplitterOrientation } from './types';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmSplitterGutterComponent } from './gutter/gutter.component';
import { PrizmSplitterAreaComponent } from './area/area.component';
import { PrizmSplitterService } from './splitter.service';
import { PrizmSplitterCustomGutterDirective } from './custom-gutter.directive';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import * as i0 from "@angular/core";
type GutterData = {
    areaBefore: number;
    areaAfter: number;
    order: number;
};
export declare class PrizmSplitterComponent extends PrizmAbstractTestId implements AfterViewInit, AfterContentInit {
    private cdr;
    private destroy$;
    private splitterService;
    orientation: PrizmSplitterOrientation;
    areasSizeChange: EventEmitter<number[]>;
    areasSplitStart: EventEmitter<number[]>;
    areasSplitEnd: EventEmitter<number[]>;
    private containerElement;
    customGutter: PrizmSplitterCustomGutterDirective;
    splitterAreaQueryList: QueryList<PrizmSplitterAreaComponent>;
    splitterGutterQueryList: QueryList<PrizmSplitterGutterComponent>;
    readonly testId_ = "ui_splitter";
    get gutterElementSize(): number;
    areas$: Observable<PrizmSplitterAreaComponent[]>;
    guttersData: Array<GutterData>;
    containerSize$$: BehaviorSubject<number>;
    lastGap: number;
    constructor(cdr: ChangeDetectorRef, destroy$: PrizmDestroyService, splitterService: PrizmSplitterService);
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private shrinkAreas;
    get isHorizontal(): boolean;
    private getAreaRealSizes;
    private getAreasSize;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmSplitterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmSplitterComponent, "prizm-splitter", never, { "orientation": { "alias": "orientation"; "required": false; }; }, { "areasSizeChange": "areasSizeChange"; "areasSplitStart": "areasSplitStart"; "areasSplitEnd": "areasSplitEnd"; }, ["customGutter", "splitterAreaQueryList"], ["prizm-splitter-area"], true, never>;
}
export {};
