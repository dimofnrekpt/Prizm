import { AfterViewInit, EventEmitter } from '@angular/core';
import { PrizmAbstractTestId } from '../../abstract/interactive';
import { CdkDragDrop, CdkDropList } from '@angular/cdk/drag-drop';
import { PrizmColumnSettings, PrizmColumnStatus, PrizmTableSettings } from './column-settings.model';
import { PrizmLanguageColumnSettings } from '@prizm-ui/i18n';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class PrizmColumnSettingsComponent extends PrizmAbstractTestId implements AfterViewInit {
    readonly columnSettings$: Observable<PrizmLanguageColumnSettings['columnSettings']>;
    stickyLeftList: CdkDropList | undefined;
    columnList: CdkDropList | undefined;
    stickyRightList: CdkDropList | undefined;
    _settings: PrizmTableSettings;
    set settings(value: PrizmTableSettings);
    defaultSettings: PrizmTableSettings | undefined;
    stickySettings: boolean;
    headerSettings: boolean;
    isSettingsChanged: EventEmitter<PrizmTableSettings | null>;
    isLastColumnShown: boolean;
    connectedColumns: CdkDropList[];
    connectedLeft: CdkDropList[];
    connectedRight: CdkDropList[];
    readonly testId_ = "ui_column_settings";
    constructor(columnSettings$: Observable<PrizmLanguageColumnSettings['columnSettings']>);
    ngAfterViewInit(): void;
    resetToDeafault(): void;
    drop(event: CdkDragDrop<PrizmColumnSettings[]>, status: PrizmColumnStatus): void;
    showAll(): void;
    close(settings: PrizmTableSettings | null): void;
    checkIsLastShown(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmColumnSettingsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmColumnSettingsComponent, "prizm-column-settings", never, { "settings": { "alias": "settings"; "required": false; }; "defaultSettings": { "alias": "defaultSettings"; "required": false; }; "stickySettings": { "alias": "stickySettings"; "required": false; }; "headerSettings": { "alias": "headerSettings"; "required": false; }; }, { "isSettingsChanged": "isSettingsChanged"; }, never, never, true, never>;
}
