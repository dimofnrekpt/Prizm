import { ElementRef, EventEmitter, Injector, OnInit } from '@angular/core';
import { Compare } from '@prizm-ui/helpers';
import { PolymorphContent } from '../../../directives/polymorph';
import { PrizmSelectOptions, PrizmSelectStringify, PrizmSelectValueContext } from './select.options';
import { PrizmNativeFocusableElement } from '../../../types';
import { prizmIsTextOverflow$ } from '../../../util';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { PrizmSelectIdentityMatcher, PrizmSelectSearchMatcher, PrizmSelectValueTransformer } from './select.model';
import { PrizmDropdownHostClasses, PrizmDropdownHostComponent, PrizmDropdownHostStyles } from '../dropdown-host';
import { PrizmOverlayOutsidePlacement } from '../../../modules/overlay';
import { PrizmInputNgControl } from '../../input/common/base/input-ng-control.class';
import { PrizmScrollbarVisibility } from '../../scrollbar';
import { PrizmInputSelectDataListDirective } from './input-select-data-list.directive';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class PrizmSelectInputComponent<T> extends PrizmInputNgControl<T> implements OnInit {
    private readonly options;
    readonly focusableElement?: ElementRef<HTMLInputElement>;
    readonly dropdownHostElement?: PrizmDropdownHostComponent;
    customItemDataList?: PrizmInputSelectDataListDirective;
    prizmHintDirection: PrizmOverlayOutsidePlacement;
    prizmHintCanShow: BooleanInput;
    set items(data: T[]);
    get items(): T[];
    dropdownScroll: PrizmScrollbarVisibility;
    dropdownStyles: PrizmDropdownHostStyles;
    dropdownClasses: PrizmDropdownHostClasses;
    searchable: boolean;
    icon: PolymorphContent<import("./select.options").PrizmSelectIconContext>;
    minDropdownHeight: number;
    maxDropdownHeight: number;
    placeholder: string;
    dropdownWidth: string;
    search: string | null;
    transformer: PrizmSelectValueTransformer<T>;
    searchMatcher: PrizmSelectSearchMatcher<T>;
    emptyContent: PolymorphContent;
    nullContent: PolymorphContent;
    readonly isPolymorphPrimitive: <T_1 = any>(content: PolymorphContent<T_1>) => boolean;
    readonly prizmIsTextOverflow$: typeof prizmIsTextOverflow$;
    readonly printing$: BehaviorSubject<string>;
    /**
     * need only clear function
     * */
    stringify: PrizmSelectStringify<T>;
    identityMatcher: PrizmSelectIdentityMatcher<T>;
    valueTemplate: PolymorphContent<PrizmSelectValueContext<T>>;
    listItemTemplate: PolymorphContent<PrizmSelectValueContext<T>>;
    readonly testId_ = "ui_select";
    readonly isNotNullish: typeof Compare.isNotNullish;
    readonly searchChange: EventEmitter<string | null>;
    defaultLabel: string;
    readonly direction: PrizmOverlayOutsidePlacement;
    readonly items$: BehaviorSubject<never[]>;
    readonly defaultIcon = "chevrons-dropdown";
    readonly nativeElementType = "select";
    readonly hasClearButton = true;
    readonly isNullish: typeof Compare.isNullish;
    filteredItems$: any;
    filteredItems: T[];
    private searchValue;
    readonly focused$$: Subject<boolean>;
    readonly focused$: Observable<boolean>;
    readonly opened$$: BehaviorSubject<boolean>;
    readonly opened$: Observable<boolean>;
    private readonly inputSelectOptionService;
    constructor(options: PrizmSelectOptions<T>, injector: Injector);
    private initSelectListener;
    ngOnInit(): void;
    get empty(): Observable<boolean>;
    get nativeFocusableElement(): PrizmNativeFocusableElement | null;
    get focused(): boolean;
    onClear(): void;
    clear(ev: MouseEvent): void;
    select(item: T): void;
    safeOpenModal(): void;
    updateValue(value: T): void;
    private searchEmit;
    getValueFromItems(value: T, items: T[]): T | undefined;
    getCurrentValue(value: T, items: T[]): string | Observable<string>;
    getFullObjectOfCurrent(value: T, items: T[]): T;
    stringifyForInner(i: T, outer?: boolean, label?: string | null, placeholder?: string, nullContent?: PolymorphContent): Observable<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmSelectInputComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmSelectInputComponent<any>, "prizm-input-select", ["prizmSelectInput"], { "prizmHintDirection": { "alias": "prizmHintDirection"; "required": false; }; "prizmHintCanShow": { "alias": "prizmHintCanShow"; "required": false; }; "items": { "alias": "items"; "required": false; }; "dropdownScroll": { "alias": "dropdownScroll"; "required": false; }; "dropdownStyles": { "alias": "dropdownStyles"; "required": false; }; "dropdownClasses": { "alias": "dropdownClasses"; "required": false; }; "searchable": { "alias": "searchable"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "minDropdownHeight": { "alias": "minDropdownHeight"; "required": false; }; "maxDropdownHeight": { "alias": "maxDropdownHeight"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "dropdownWidth": { "alias": "dropdownWidth"; "required": false; }; "search": { "alias": "search"; "required": false; }; "transformer": { "alias": "transformer"; "required": false; }; "searchMatcher": { "alias": "searchMatcher"; "required": false; }; "emptyContent": { "alias": "emptyContent"; "required": false; }; "nullContent": { "alias": "nullContent"; "required": false; }; "stringify": { "alias": "stringify"; "required": false; }; "identityMatcher": { "alias": "identityMatcher"; "required": false; }; "valueTemplate": { "alias": "valueTemplate"; "required": false; }; "listItemTemplate": { "alias": "listItemTemplate"; "required": false; }; }, { "searchChange": "searchChange"; }, ["customItemDataList"], never, true, never>;
}
