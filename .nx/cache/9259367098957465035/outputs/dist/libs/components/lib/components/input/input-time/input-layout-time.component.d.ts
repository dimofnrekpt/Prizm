import { ElementRef, Injector } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmTime } from '../../../@core/date-time/time';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmInputTimeOptions } from './input-time-options';
import { PrizmTimeMode } from '../../../types/time-mode';
import { PrizmDateButton } from '../../../types/date-button';
import { PrizmInputNgControl } from '../common';
import * as i0 from "@angular/core";
export declare class PrizmInputLayoutTimeComponent extends PrizmInputNgControl<PrizmTime | null> {
    private readonly timeTexts$;
    private readonly options;
    readonly hasClearButton = true;
    readonly nativeElementType = "input-layout-time";
    readonly focusableElement?: ElementRef<HTMLInputElement>;
    placeholder: string;
    disabledItemHandler: PrizmBooleanHandler<PrizmTime>;
    items: readonly PrizmTime[];
    itemSize: PrizmInputTimeOptions['itemSize'];
    strict: boolean;
    mode: PrizmInputTimeOptions['mode'];
    extraButtonInjector: Injector;
    readonly testId_ = "ui_input_time";
    open: boolean;
    rightButtons$: BehaviorSubject<PrizmDateButton[]>;
    constructor(timeTexts$: Observable<Record<PrizmTimeMode, string>>, injector: Injector, options: PrizmInputTimeOptions);
    ngOnInit(): void;
    get filtered(): readonly PrizmTime[];
    get textMaskOptions(): string;
    get computedValue(): string;
    get computedSearch(): string;
    get nativeValue(): string;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    set nativeValue(value: string);
    getFiller$(mode: PrizmTimeMode): Observable<string>;
    onValueChange(value: string): void;
    onArrowUp(event: Event): void;
    onArrowDown(event: Event): void;
    onMenuClick(item: PrizmTime): void;
    onOpen(open: boolean): void;
    writeValue(value: PrizmTime | null): void;
    private calculateMask;
    get stringValue(): string;
    get interactive(): boolean;
    private filter;
    private findNearestTimeFromItems;
    private getMatch;
    private processArrow;
    private calculateShift;
    private shiftTime;
    safeOpenModal(): void;
    clear(ev: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputLayoutTimeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputLayoutTimeComponent, "prizm-input-layout-time", never, { "placeholder": { "alias": "placeholder"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "items": { "alias": "items"; "required": false; }; "itemSize": { "alias": "itemSize"; "required": false; }; "strict": { "alias": "strict"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "extraButtonInjector": { "alias": "extraButtonInjector"; "required": false; }; }, {}, never, never, true, never>;
}
