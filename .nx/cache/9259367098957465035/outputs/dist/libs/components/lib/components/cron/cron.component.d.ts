import { EventEmitter, OnInit } from '@angular/core';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { PrizmSwitcherItem } from '../switcher';
import { UntypedFormControl } from '@angular/forms';
import { PrizmCronService } from '../../services';
import { PrizmCronUiSecondState } from './cron-ui-second.state';
import { PrizmCronUiMinuteState } from './cron-ui-minute.state';
import { PrizmCronUiHourState } from './cron-ui-hour.state';
import { PrizmCronUiMonthState } from './cron-ui-month.state';
import { PrizmCronUiYearState } from './cron-ui-year.state';
import { prizmIsTextOverflow } from '../../util';
import { PrizmCronPeriod, PrizmCronTabItem, PrizmCronTabSpecifiedList } from './model';
import { PrizmCronUiDayState } from './cron-ui-day.state';
import { Observable } from 'rxjs';
import { PrizmLanguage, PrizmLanguageCron } from '@prizm-ui/i18n';
import { PrizmAbstractTestId } from '../../abstract/interactive';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class PrizmCronComponent extends PrizmAbstractTestId implements OnInit {
    readonly language$: Observable<PrizmLanguage>;
    readonly cron: PrizmCronService;
    readonly cronI18n$: Observable<PrizmLanguageCron['cron']>;
    private readonly destroy$;
    private readonly cronUiSecondState;
    private readonly cronUiHourState;
    private readonly cronUiYearState;
    private readonly cronUiMonthState;
    private readonly cronUiMinuteState;
    private readonly cronUiDayState;
    set value(value: string);
    get value(): string;
    get disabled(): BooleanInput;
    set disabled(value: BooleanInput);
    private _disabled;
    autoSubmit: boolean;
    hidePeriod: boolean;
    hideResult: boolean;
    showHumanReadable: boolean;
    resetButton: boolean;
    readonly testId_ = "ui_cron";
    set period(period: PrizmCronPeriod);
    get period(): PrizmCronPeriod;
    readonly cronLanguage$: Observable<import("@prizm-ui/i18n").PrizmLanguageShortName>;
    readonly humanReadableStr$: Observable<string>;
    valueChange: EventEmitter<string>;
    periodChange: EventEmitter<PrizmCronPeriod>;
    selectedChange: EventEmitter<PrizmCronTabItem>;
    set selected(selected: PrizmCronTabItem);
    specifiedList: PrizmCronTabSpecifiedList | null;
    set tabs(tabs: PrizmCronTabItem[]);
    switchers: PrizmSwitcherItem<PrizmCronTabItem>[];
    initialValue: string;
    readonly value$: Observable<import("../../services").PrizmCronValueObject>;
    readonly valueAsString$: Observable<string>;
    readonly startDateControl: UntypedFormControl;
    readonly endDateControl: UntypedFormControl;
    readonly indefinitelyControl: UntypedFormControl;
    indefinitely: boolean;
    selectedSwitcherIdx: number;
    readonly prizmIsTextOverflow: typeof prizmIsTextOverflow;
    constructor(language$: Observable<PrizmLanguage>, cron: PrizmCronService, cronI18n$: Observable<PrizmLanguageCron['cron']>, destroy$: PrizmDestroyService, cronUiSecondState: PrizmCronUiSecondState, cronUiHourState: PrizmCronUiHourState, cronUiYearState: PrizmCronUiYearState, cronUiMonthState: PrizmCronUiMonthState, cronUiMinuteState: PrizmCronUiMinuteState, cronUiDayState: PrizmCronUiDayState);
    ngOnInit(): void;
    private endDateStateCorrector;
    private initEndDateStateChanger;
    private emitPeriod;
    private saveInitialValue;
    private initAutoSubmiter;
    private emit;
    submit(): void;
    reset(): void;
    copy(): void;
    copyHumanReadable(): void;
    indexChanged(index: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmCronComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmCronComponent, "prizm-cron", ["prizmCron"], { "value": { "alias": "value"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "autoSubmit": { "alias": "autoSubmit"; "required": false; }; "hidePeriod": { "alias": "hidePeriod"; "required": false; }; "hideResult": { "alias": "hideResult"; "required": false; }; "showHumanReadable": { "alias": "showHumanReadable"; "required": false; }; "resetButton": { "alias": "resetButton"; "required": false; }; "period": { "alias": "period"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "specifiedList": { "alias": "specifiedList"; "required": false; }; "tabs": { "alias": "tabs"; "required": false; }; }, { "valueChange": "valueChange"; "periodChange": "periodChange"; "selectedChange": "selectedChange"; }, never, never, true, never>;
}
