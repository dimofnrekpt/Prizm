import { AfterViewInit, Injector, TemplateRef } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { PrizmDay } from '../../../@core/date-time/day';
import { PrizmMonth } from '../../../@core/date-time/month';
import { PrizmTime } from '../../../@core/date-time/time';
import { PrizmContextWithImplicit } from '../../../types/context-with-implicit';
import { PrizmControlValueTransformer } from '../../../types/control-value-transformer';
import { PrizmDateMode } from '../../../types/date-mode';
import { PrizmBooleanHandler } from '../../../types/handler';
import { PrizmTimeMode } from '../../../types/time-mode';
import { PrizmDateButton } from '../../../types/date-button';
import { PrizmInputNgControl } from '../common';
import { PrizmInputZoneDirective } from '../../../directives/input-zone';
import { PrizmInputNativeValueNeedChange } from '../../../directives/native-value';
import * as i0 from "@angular/core";
export declare class PrizmInputLayoutDateTimeComponent extends PrizmInputNgControl<[PrizmDay | null, PrizmTime | null] | null> implements AfterViewInit {
    private document;
    readonly dateFormat: PrizmDateMode;
    readonly dateSeparator: string;
    readonly timeTexts$: Observable<Record<PrizmTimeMode, string>>;
    readonly dateTexts$: Observable<Record<PrizmDateMode, string>>;
    readonly nativeElementType = "input-date-time";
    readonly hasClearButton = true;
    private month;
    fallbackValue: [PrizmDay | null, PrizmTime | null];
    readonly focusableElement?: PrizmInputZoneDirective;
    timeItems: readonly PrizmTime[];
    placeholder: string;
    extraButtonInjector: Injector;
    min: PrizmDay | [PrizmDay, PrizmTime];
    max: PrizmDay | [PrizmDay, PrizmTime];
    timeStrict: boolean;
    disabledItemHandler: PrizmBooleanHandler<PrizmDay>;
    defaultActiveYearMonth: PrizmMonth;
    timeMode: PrizmTimeMode;
    readonly testId_ = "ui_input_date_time";
    openTimeTemplate: boolean;
    readonly nativeValue$$: BehaviorSubject<[string, string]>;
    open: boolean;
    readonly type: PrizmContextWithImplicit<unknown>;
    get empty(): Observable<boolean>;
    rightButtons$: BehaviorSubject<PrizmDateButton[]>;
    constructor(document: Document, dateFormat: PrizmDateMode, dateSeparator: string, timeTexts$: Observable<Record<PrizmTimeMode, string>>, injector: Injector, dateTexts$: Observable<Record<PrizmDateMode, string>>, valueTransformer: PrizmControlValueTransformer<[PrizmDay | null, PrizmTime | null] | null> | null);
    ngAfterViewInit(): void;
    private completeDateIfAreNotPending;
    private filterTime;
    ngOnInit(): void;
    get focused(): Observable<boolean>;
    get fillerLength(): number;
    get textMaskOptions(): string;
    get timeMaskOptions(): string;
    get stringValue(): string;
    computedDateValue(date?: PrizmDay | null | undefined): string;
    computedTimeValue(time?: PrizmTime | null | undefined): string;
    readonly needChangeNativeValue: PrizmInputNativeValueNeedChange<string>;
    get calendarValue(): PrizmDay | null;
    get calendarMinDay(): PrizmDay;
    get calendarMaxDay(): PrizmDay;
    get computedActiveYearMonth(): PrizmMonth;
    onDateValueChange(value: string): void;
    private updateWithCorrectDateAndTime;
    onTimeValueChange(value: string): void;
    timeLimit(value: [PrizmDay, PrizmTime] | null): PrizmTime | null;
    onDayClick(day: PrizmDay, time?: PrizmTime): void;
    getTemplate(openTimeTemplate: TemplateRef<unknown>, dropdownTimeTemplate: TemplateRef<unknown>): TemplateRef<any> | null;
    onMonthChange(month: PrizmMonth): void;
    onOpenChange(open: boolean): void;
    writeValue(value: [PrizmDay | null, PrizmTime | null] | null): void;
    private calculateMask;
    private calculateTimeMask;
    private getDateTimeString;
    private getTimeString;
    private getDateString;
    private findNearestTimeFromItems;
    private getMatch;
    onTimeMenuClick(item: PrizmTime, ev: Event): void;
    private prizmClampTime;
    openTimeDropdown(open: boolean): void;
    openDateDropdown(open: boolean): void;
    clear(ev: MouseEvent): void;
    referFocusToMain(referFocus?: boolean): void;
    private isValueMasked;
    static ɵfac: i0.ɵɵFactoryDeclaration<PrizmInputLayoutDateTimeComponent, [{ optional: true; }, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PrizmInputLayoutDateTimeComponent, "prizm-input-layout-date-time", never, { "timeItems": { "alias": "timeItems"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "extraButtonInjector": { "alias": "extraButtonInjector"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "timeStrict": { "alias": "timeStrict"; "required": false; }; "disabledItemHandler": { "alias": "disabledItemHandler"; "required": false; }; "defaultActiveYearMonth": { "alias": "defaultActiveYearMonth"; "required": false; }; "timeMode": { "alias": "timeMode"; "required": false; }; }, {}, never, never, true, never>;
}
