import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, HostBinding, Injector, ViewChild, ViewContainerRef, } from '@angular/core';
import { PrizmDestroyService, prizmStyleGetVars } from '@prizm-ui/helpers';
import { PrizmThemeModule, PrizmThemeService } from '@prizm-ui/theme';
import { timer } from 'rxjs';
import { startWith, takeUntil, tap } from 'rxjs/operators';
import { cssClass, EventBus, objToCss } from './utils';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@prizm-ui/theme";
import * as i2 from "@prizm-ui/helpers";
import * as i3 from "@angular/common";
export class PrizmOverlayComponent {
    get stylePosition() {
        return this.parentContainer ? 'absolute' : 'fixed';
    }
    constructor(inj, theme, cd, destroy$, compResolver, overlayElRef) {
        this.inj = inj;
        this.theme = theme;
        this.cd = cd;
        this.destroy$ = destroy$;
        this.compResolver = compResolver;
        this.overlayElRef = overlayElRef;
        this.content = {
            type: "s" /* PrizmOverlayContentType.STRING */,
            data: '',
            props: {},
        };
        this.parentInjector = Injector;
    }
    ngOnInit() {
        this.el = this.overlayElRef.nativeElement;
        this.wrapperEl = this.el.querySelector('.z-overlay-wrapper');
        const cls = [
            'z-container',
            ...(this.config.containerClass || 'z-overlay').split(' '),
            this.position.getClassName(),
        ];
        if (this.config.closeOnDocClick) {
            // cls = cls.concat(['no-pointers']);
        }
        this.el.setAttribute('data-zid', this.zid);
        cssClass('add', cls, `[data-zid='${[this.zid]}']`);
        cssClass('add', [this.config.bodyClass]);
        this.initStyleVars();
    }
    ngAfterViewInit() {
        this.listenPos().subscribe();
        if (this.content.type === "c" /* PrizmOverlayContentType.COMPONENT */) {
            this.compInstance = this.setComponent(this.content.props);
            EventBus.send(this.zid, 'z_compins', this.compInstance);
        }
    }
    initStyleVars() {
        if (this.config.styleVars) {
            Object.entries(prizmStyleGetVars(this.config.styleVars)).forEach(([key, value]) => {
                this.overlayElRef.nativeElement.style.setProperty(key, value);
            });
        }
    }
    setComponent(props) {
        const compRef = this.compOutlet.createComponent(this.compResolver.resolveComponentFactory(this.content.data));
        Object.assign(compRef.instance, props);
        compRef.changeDetectorRef.detectChanges();
        return compRef.instance;
    }
    updateTextContent(data) {
        if (this.content.type === "s" /* PrizmOverlayContentType.STRING */) {
            this.content.data = data;
            this.cd.detectChanges();
        }
    }
    ngOnDestroy() {
        cssClass('remove', [this.config.bodyClass]);
        EventBus.send(this.zid, 'z_detach');
    }
    listenPos() {
        return EventBus.listen(this.zid, 'z_dynpos').pipe(startWith(1), takeUntil(this.destroy$), tap(e => {
            if (!e || !e.x)
                return this.setPos();
            const coords = { left: e.x, top: e.y };
            this.wrapperEl.style = objToCss(coords);
        }));
    }
    updatePos() {
        const positions = this.position.getPositions(this.wrapperEl, this.parentContainer);
        const { extra, ...coords } = positions;
        if (this.extra !== extra) {
            this.extra = extra;
            this.cd.detectChanges();
        }
        Object.assign(coords, { visibility: 'visible', opacity: '1' });
        this.wrapperEl.style = objToCss(coords);
        this.position.savePosition(positions);
        EventBus.send(this.zid, 'z_posupdate');
        this.cd.markForCheck();
    }
    setPos() {
        this.updatePos();
        /** if position will be changed after render > we re-update position */
        timer(0)
            .pipe(tap(() => this.updatePos()), takeUntil(this.destroy$))
            .subscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmOverlayComponent, deps: [{ token: i0.Injector }, { token: i1.PrizmThemeService }, { token: i0.ChangeDetectorRef }, { token: i2.PrizmDestroyService }, { token: i0.ComponentFactoryResolver }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmOverlayComponent, isStandalone: true, selector: "prizm-overlay", host: { properties: { "style.zIndex": "this.zIndex", "style.position": "this.stylePosition" } }, providers: [PrizmDestroyService], viewQueries: [{ propertyName: "compOutlet", first: true, predicate: ["compOutlet"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: "<div class=\"z-backdrop\" *ngIf=\"config.backdrop\" [ngClass]=\"config.backdropClass\"></div>\n<div class=\"z-overlay-wrapper\" #wrapperEl [ngClass]=\"config.wrapperClass\" [class]=\"extra\" prizmTheme>\n  <ng-container [ngSwitch]=\"content.type\">\n    <ng-container *ngSwitchCase=\"'s'\">\n      <div [class]=\"content.props.class\">{{ content.data }}</div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'h'\"> <div [innerHTML]=\"content.data\"></div> </ng-container>\n    <ng-container *ngSwitchCase=\"'t'\">\n      <ng-container\n        *ngTemplateOutlet=\"$any(content.data); context: { $implicit: content.props }\"\n      ></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'c'\"> <ng-template #compOutlet></ng-template> </ng-container>\n  </ng-container>\n</div>\n", styles: [":host{left:0;top:0;width:100%;height:100%;pointer-events:none}:host.no-width{width:auto}:host.no-height{height:auto}:host.no-pointers{pointer-events:all}:host .z-backdrop{left:0;position:absolute;top:0;width:100%;height:100%;background:var(--prizm-overlay-backdrop-color, var(--prizm-v3-background-fill-blanket));opacity:var(--prizm-overlay-backdrop-opacity, 1)}:host .z-backdrop.no-pointers{pointer-events:all}:host>div.z-overlay-wrapper{position:relative;display:inline-flex;visibility:hidden;opacity:0;transition:opacity .2s ease;overflow:hidden;pointer-events:all}:host>div.z-overlay-wrapper.no-overflow{overflow:visible}.z-overlay-wrapper.no-width{width:auto}.z-overlay-wrapper.no-height{height:auto}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "ngmodule", type: PrizmThemeModule }, { kind: "directive", type: i1.PrizmThemeDirective, selector: "[prizmTheme]", inputs: ["prizmTheme"], outputs: ["prizmThemeChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmOverlayComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-overlay', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PrizmDestroyService], standalone: true, imports: [CommonModule, PrizmThemeModule], template: "<div class=\"z-backdrop\" *ngIf=\"config.backdrop\" [ngClass]=\"config.backdropClass\"></div>\n<div class=\"z-overlay-wrapper\" #wrapperEl [ngClass]=\"config.wrapperClass\" [class]=\"extra\" prizmTheme>\n  <ng-container [ngSwitch]=\"content.type\">\n    <ng-container *ngSwitchCase=\"'s'\">\n      <div [class]=\"content.props.class\">{{ content.data }}</div>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'h'\"> <div [innerHTML]=\"content.data\"></div> </ng-container>\n    <ng-container *ngSwitchCase=\"'t'\">\n      <ng-container\n        *ngTemplateOutlet=\"$any(content.data); context: { $implicit: content.props }\"\n      ></ng-container>\n    </ng-container>\n    <ng-container *ngSwitchCase=\"'c'\"> <ng-template #compOutlet></ng-template> </ng-container>\n  </ng-container>\n</div>\n", styles: [":host{left:0;top:0;width:100%;height:100%;pointer-events:none}:host.no-width{width:auto}:host.no-height{height:auto}:host.no-pointers{pointer-events:all}:host .z-backdrop{left:0;position:absolute;top:0;width:100%;height:100%;background:var(--prizm-overlay-backdrop-color, var(--prizm-v3-background-fill-blanket));opacity:var(--prizm-overlay-backdrop-opacity, 1)}:host .z-backdrop.no-pointers{pointer-events:all}:host>div.z-overlay-wrapper{position:relative;display:inline-flex;visibility:hidden;opacity:0;transition:opacity .2s ease;overflow:hidden;pointer-events:all}:host>div.z-overlay-wrapper.no-overflow{overflow:visible}.z-overlay-wrapper.no-width{width:auto}.z-overlay-wrapper.no-height{height:auto}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.PrizmThemeService }, { type: i0.ChangeDetectorRef }, { type: i2.PrizmDestroyService }, { type: i0.ComponentFactoryResolver }, { type: i0.ElementRef }]; }, propDecorators: { compOutlet: [{
                type: ViewChild,
                args: ['compOutlet', { read: ViewContainerRef }]
            }], zIndex: [{
                type: HostBinding,
                args: ['style.zIndex']
            }], stylePosition: [{
                type: HostBinding,
                args: ['style.position']
            }] } });
//# sourceMappingURL=data:application/json;base64,