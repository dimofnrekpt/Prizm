import { __decorate, __metadata, __param } from "tslib";
import { ApplicationRef, ComponentFactoryResolver, Inject, Injector, } from '@angular/core';
import { animationFrameScheduler, fromEvent, merge as mergeObs, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, observeOn, skipWhile, startWith, takeUntil, tap, } from 'rxjs/operators';
import { PrizmOverlayComponent } from './overlay.component';
import { BODY_ELEMENT, EventBus, getContent } from './utils';
import { WINDOW } from '@ng-web-apis/common';
import { raceEmit } from '@prizm-ui/helpers';
export let PrizmOverlayControl = class PrizmOverlayControl {
    constructor(appRef, compResolver, injector, window) {
        this.appRef = appRef;
        this.compResolver = compResolver;
        this.injector = injector;
        this.window = window;
        this.zIndex = 9999;
        this.updateTextContent = new Subject();
        this.isOpen = false;
        this.destroy$ = new Subject();
        this.updateTextContent.pipe(takeUntil(this.destroy$)).subscribe(content => {
            if (this.isOpen)
                this.comp?.updateTextContent(content);
        });
    }
    open() {
        if (this.isOpen)
            return;
        this.destroy$.next();
        this.attach();
        if (this.viewEl) {
            mergeObs(this.onDocumentClick(), this.onWindowResize(), this.onEscClick())
                .pipe(takeUntil(this.destroy$))
                .subscribe();
            setTimeout(() => EventBus.send(this.zid, 'z_dynpos'), 1);
        }
        EventBus.send(this.zid, 'z_open');
        this.isOpen = true;
    }
    close() {
        if (!this.isOpen)
            return;
        this.detach();
        this.destroy$.next();
        EventBus.send(this.zid, 'z_close');
        this.isOpen = false;
    }
    toggle() {
        return this.isOpen ? this.close() : this.open();
    }
    onEscClick() {
        return fromEvent(BODY_ELEMENT, 'keydown').pipe(takeUntil(this.destroy$), skipWhile(() => !this.config.closeOnEsc), filter((e) => (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) &&
            e.target.nodeName === 'BODY'), tap(e => e.preventDefault()), map(e => e.target), tap(() => this.close()));
    }
    onDocumentClick() {
        const insideClick = fromEvent(this.viewEl?.querySelector('.z-overlay-wrapper'), 'click').pipe(
        // first init for block closing
        startWith(null));
        const outsideClick = fromEvent(document.body, 'click');
        return raceEmit(100, insideClick.pipe(map((e) => [e, false])), outsideClick.pipe(map((e) => [e, true]))).pipe(filter(([, isOutsideClick]) => isOutsideClick), map(([e]) => e.target), skipWhile(() => !this.config.closeOnDocClick), tap(() => {
            this.config.docClickCallback();
            this.close();
        }));
    }
    onWindowResize() {
        const onResize = fromEvent(window, 'resize');
        const onScroll = fromEvent(window, 'scroll', { passive: true });
        return mergeObs(onResize, onScroll).pipe(skipWhile(() => !this.config.listenWindowEvents), takeUntil(this.destroy$), debounceTime(5), observeOn(animationFrameScheduler), distinctUntilChanged(), tap(() => {
            EventBus.send(this.zid, 'z_dynpos');
            this.reCalculatePositions();
            this.config.windowResizeCallback();
        }));
    }
    changePosition(newPosition) {
        this.position = newPosition;
    }
    updatePosition(positionConfig) {
        this.position.updateConfig(positionConfig);
    }
    updateContent(content, props = {}) {
        this.content = getContent(content, { ...this.content.props, ...props });
    }
    updateParentContainer(node) {
        this.parentContainer = node instanceof HTMLElement ? node : null;
    }
    listen(eventName) {
        return EventBus.listen(this.zid, eventName);
    }
    reCalculatePositions() {
        EventBus.send(this.zid, 'z_dynpos');
    }
    isNotHostElement(el) {
        const wrapperEl = this.viewEl?.querySelector('.z-overlay-wrapper');
        return el !== wrapperEl && !wrapperEl?.contains(el);
    }
    attach() {
        /* create component */
        this.compFac = this.compResolver.resolveComponentFactory(PrizmOverlayComponent);
        this.compRef = this.compFac.create(this.injector);
        this.comp = this.compRef.instance;
        /* assign props */
        const { position, content, config, zid, zIndex, parentContainer } = this;
        content.props.close = this.close.bind(this);
        Object.assign(this.comp, { position, content, config, zid: zid, zIndex: zIndex, parentContainer });
        /* attach view */
        this.hostView = this.compRef.hostView;
        this.appRef.attachView(this.hostView);
        this.viewEl = this.hostView.rootNodes[0];
        (parentContainer ?? BODY_ELEMENT).appendChild(this.viewEl);
    }
    detach() {
        if (!this.hostView)
            return;
        this.appRef.detachView(this.hostView);
        this.compRef.destroy();
        this.hostView = this.viewEl = this.comp = null;
    }
};
PrizmOverlayControl = __decorate([
    __param(3, Inject(WINDOW)),
    __metadata("design:paramtypes", [ApplicationRef,
        ComponentFactoryResolver,
        Injector,
        Window])
], PrizmOverlayControl);
//# sourceMappingURL=data:application/json;base64,