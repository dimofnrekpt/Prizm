import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { PrizmDestroyService } from '@prizm-ui/helpers';
import { BehaviorSubject, merge } from 'rxjs';
import { debounceTime, map, takeUntil, withLatestFrom } from 'rxjs/operators';
import { PrizmNavigationMenuService } from '../../services/prizm-navigation-menu.service';
import { PrizmNavigationMenuGroupService } from '../../services/prizm-navigation-menu-group.service';
import { PrizmNavigationMenuToolbarService } from '../../services/prizm-navigation-menu-toolbar.service';
import { PrizmNavigationMenuItemsComponent } from '../prizm-navigation-menu-items/prizm-navigation-menu-items.component';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { PolymorphOutletDirective } from '../../../../directives';
import { PrizmAccordionComponent, PrizmAccordionContentDirective, PrizmAccordionItemComponent, } from '../../../accordion';
import { PrizmNavigationMenuToolbarComponent } from '../prizm-navigation-menu-toolbar/prizm-navigation-menu-toolbar.component';
import * as i0 from "@angular/core";
import * as i1 from "@prizm-ui/helpers";
import * as i2 from "../../services/prizm-navigation-menu-group.service";
import * as i3 from "../../services/prizm-navigation-menu.service";
import * as i4 from "@angular/common";
export class PrizmNavigationMenuGroupComponent extends PrizmAbstractTestId {
    set items(items) {
        this.items$$.next(items);
    }
    set toolbarConfig(toolbarConfig) {
        this.groupService.setToolbarConfig(toolbarConfig);
    }
    set emptySearchResultMessageConfig(config) {
        this.groupService.setEmptySearchResultMessageConfig(config);
    }
    set emptyDataMessageConfig(config) {
        this.groupService.setEmptyDataMessageConfig(config);
    }
    set searchConfig(config) {
        this.groupService.setSearchConfig(config);
    }
    constructor(cdr, destroy$, groupService, menuService) {
        super();
        this.cdr = cdr;
        this.destroy$ = destroy$;
        this.groupService = groupService;
        this.menuService = menuService;
        this.itemExpandedChanged = new EventEmitter();
        this.groupExpandedChanged = new EventEmitter();
        this.testId_ = 'ui_navigation_menu_group';
        this.groupItems$ = this.groupService.groupItems$;
        this.expandedItemsMap$ = this.groupService.expandedItemsMap$;
        this.toolbarConfig$ = this.groupService.toolbarConfig$;
        this.searchConfig$ = this.groupService.searchConfig$;
        this.emptyMessageConfig$ = this.groupService.searchEnabled$.pipe(withLatestFrom(this.groupService.emptySearchResultMessageConfig$, this.groupService.emptyDataMessageConfig$), map(([searchEnabled, emptySearchResultMessageConfig, emptyDataMessageConfig]) => {
            return searchEnabled ? emptySearchResultMessageConfig : emptyDataMessageConfig;
        }));
        this.activeItem$ = this.menuService.activeItem$;
        this.mode$ = this.groupService.viewMode$;
        this.items$$ = new BehaviorSubject([]);
    }
    ngOnInit() {
        this.registerItems();
        this.setGroupIsExpanded();
        this.ensureViewUpdatesCorrectly();
    }
    handleActiveItemChange(item) {
        this.menuService.handleActiveItemChange(item);
    }
    handleItemExpandedChanged(event) {
        if (this.groupService.viewMode === 'rubricator')
            return;
        if (this.groupService.viewMode === 'folder') {
            return this.groupService.handleFolderExpanded(event.item);
        }
        this.menuService.handleExpandedChanged(event);
        this.itemExpandedChanged.emit({
            item: this.menuService.getUserItem(event.item),
            isExpanded: event.isExpanded,
        });
    }
    handleGroupExpandedChanged(isExpanded) {
        const event = {
            groupId: this.groupId,
            isExpanded,
        };
        this.menuService.handleGroupExpandedChanged(event);
        this.groupExpandedChanged.emit(event);
    }
    handleGoToParentItem(item) {
        this.groupService.goToParentFolder(item);
    }
    handleGoToRootItem(_item) {
        this.groupService.goToRootFolder();
    }
    registerItems() {
        const groupId = this.groupId || this.title;
        this.groupService.setGroupId(groupId);
        this.items$$.pipe(takeUntil(this.destroy$)).subscribe(items => {
            this.menuService.registerGroupItems(groupId, items);
        });
    }
    setGroupIsExpanded() {
        this.groupIsExpanded = this.menuService.getGroupIsExpanded(this.groupId);
    }
    ensureViewUpdatesCorrectly() {
        merge(this.activeItem$, this.groupService.closeAll$, this.groupService.viewMode$, this.menuService.itemExpandedChangedEvent$)
            .pipe(debounceTime(0), takeUntil(this.destroy$))
            .subscribe(() => {
            this.cdr.markForCheck();
            this.menuItemsComponent?.triggerCdr();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.PrizmDestroyService }, { token: i2.PrizmNavigationMenuGroupService }, { token: i3.PrizmNavigationMenuService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmNavigationMenuGroupComponent, isStandalone: true, selector: "prizm-navigation-menu-group", inputs: { groupId: "groupId", title: "title", hideGroupAppearance: "hideGroupAppearance", icon: "icon", toolbarExtraTemplate: "toolbarExtraTemplate", itemExtraTemplate: "itemExtraTemplate", items: "items", toolbarConfig: "toolbarConfig", emptySearchResultMessageConfig: "emptySearchResultMessageConfig", emptyDataMessageConfig: "emptyDataMessageConfig", searchConfig: "searchConfig", childrenHandler: "childrenHandler" }, outputs: { itemExpandedChanged: "itemExpandedChanged", groupExpandedChanged: "groupExpandedChanged" }, providers: [PrizmNavigationMenuToolbarService, PrizmNavigationMenuGroupService], viewQueries: [{ propertyName: "menuItemsComponent", first: true, predicate: PrizmNavigationMenuItemsComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"prizm-navigation-menu-group\" [class.prizm-navigation-menu-group_expanded]=\"groupIsExpanded\">\n  <prizm-accordion *ngIf=\"!hideGroupAppearance; else noGroupAppearanceTemplate\">\n    <prizm-accordion-item\n      [icon]=\"$any(icon)\"\n      [title]=\"$any(title)\"\n      [isExpanded]=\"groupIsExpanded\"\n      (isExpandedChange)=\"handleGroupExpandedChanged($event)\"\n    >\n      <ng-template prizmAccordionContent>\n        <ng-container [ngTemplateOutlet]=\"itemsTemplate\"></ng-container>\n      </ng-template>\n    </prizm-accordion-item>\n  </prizm-accordion>\n\n  <ng-template #noGroupAppearanceTemplate>\n    <ng-container [ngTemplateOutlet]=\"itemsTemplate\"></ng-container>\n  </ng-template>\n</div>\n\n<ng-template #itemsTemplate>\n  <prizm-navigation-menu-toolbar\n    [searchConfig]=\"$any(searchConfig$ | async)\"\n    [toolbarConfig]=\"$any(toolbarConfig$ | async)\"\n    [toolbarExtraTemplate]=\"toolbarExtraTemplate\"\n    [hideGroupAppearance]=\"$any(hideGroupAppearance)\"\n  ></prizm-navigation-menu-toolbar>\n  <ng-container *ngIf=\"groupItems$ | async as groupItems\">\n    <prizm-navigation-menu-items\n      [items]=\"groupItems\"\n      [itemExtraTemplate]=\"$any(itemExtraTemplate)\"\n      [childrenHandler]=\"childrenHandler\"\n      [expandedItemsMap]=\"$any(expandedItemsMap$ | async)\"\n      [activeItem]=\"$any(activeItem$ | async)\"\n      [mode]=\"$any(mode$ | async)\"\n      (activeItemChanged)=\"handleActiveItemChange($event)\"\n      (itemExpandedChanged)=\"handleItemExpandedChanged($event)\"\n      (goToParentItem)=\"handleGoToParentItem($event)\"\n      (goToRootItem)=\"handleGoToRootItem($event)\"\n    ></prizm-navigation-menu-items>\n\n    <ng-container *ngIf=\"!groupItems.length\">\n      <div\n        class=\"prizm-navigation-menu-group__no-items-content\"\n        *ngIf=\"emptyMessageConfig$ | async as emptyMessageConfig\"\n      >\n        <div class=\"empty-message\">\n          <span class=\"empty-message__main\">{{ emptyMessageConfig.title }}</span>\n          <span class=\"empty-message__sub\">{{ emptyMessageConfig.subtitle }}</span>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-template>\n", styles: [":host:last-of-type{flex:1;height:100%}:host .prizm-navigation-menu-group{--prizm-empty-message__padding: 16px 32px;border-bottom:1px solid var(--prizm-v3-background-stroke);height:100%}:host .prizm-navigation-menu-group_expanded:has(.empty-message){border-bottom:none}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion{border:none}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion__content{padding:0!important;background:var(--prizm-v3-background-fill-primary);cursor:default}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .prizm_accordion{border:0!important}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion{box-shadow:unset;border-top:unset}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion:hover:not(.accordion_disabled){box-shadow:unset;border-top:unset}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion__header{padding:var(--prizm-navigation-menu__item-padding);padding-left:12px;border-left:4px solid transparent}:host .prizm-navigation-menu-group__no-items-content{background:var(--prizm-v3-background-fill-primary);height:100%;display:flex;justify-content:center;align-items:center}:host .empty-message{display:flex;flex-direction:column;align-items:center;gap:16px;font-size:14px;line-height:20px;text-align:center;padding:var(--prizm-empty-message__padding)}:host .empty-message__main{font-weight:600;color:var(--prizm-v3-text-icon-primary);text-align:center}:host .empty-message__sub{font-weight:400;color:var(--prizm-v3-text-icon-secondary)}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "component", type: PrizmAccordionItemComponent, selector: "prizm-accordion-item", inputs: ["icon", "title", "isExpanded", "disabled"], outputs: ["isExpandedChange"] }, { kind: "component", type: PrizmAccordionComponent, selector: "prizm-accordion", inputs: ["onlyOneExpanded"] }, { kind: "component", type: PrizmNavigationMenuToolbarComponent, selector: "prizm-navigation-menu-toolbar", inputs: ["toolbarExtraTemplate", "toolbarConfig", "searchConfig", "hideGroupAppearance"] }, { kind: "component", type: PrizmNavigationMenuItemsComponent, selector: "prizm-navigation-menu-items", inputs: ["items", "mode", "activeItem", "itemExtraTemplate", "expandedItemsMap", "childrenHandler"], outputs: ["itemExpandedChanged", "activeItemChanged", "goToRootItem", "goToParentItem"] }, { kind: "directive", type: PrizmAccordionContentDirective, selector: "[prizmAccordionContent]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-navigation-menu-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [PrizmNavigationMenuToolbarService, PrizmNavigationMenuGroupService], standalone: true, imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        PrizmAccordionItemComponent,
                        PrizmAccordionComponent,
                        PrizmNavigationMenuToolbarComponent,
                        PrizmNavigationMenuItemsComponent,
                        PrizmAccordionContentDirective,
                        PolymorphOutletDirective,
                    ], template: "<div class=\"prizm-navigation-menu-group\" [class.prizm-navigation-menu-group_expanded]=\"groupIsExpanded\">\n  <prizm-accordion *ngIf=\"!hideGroupAppearance; else noGroupAppearanceTemplate\">\n    <prizm-accordion-item\n      [icon]=\"$any(icon)\"\n      [title]=\"$any(title)\"\n      [isExpanded]=\"groupIsExpanded\"\n      (isExpandedChange)=\"handleGroupExpandedChanged($event)\"\n    >\n      <ng-template prizmAccordionContent>\n        <ng-container [ngTemplateOutlet]=\"itemsTemplate\"></ng-container>\n      </ng-template>\n    </prizm-accordion-item>\n  </prizm-accordion>\n\n  <ng-template #noGroupAppearanceTemplate>\n    <ng-container [ngTemplateOutlet]=\"itemsTemplate\"></ng-container>\n  </ng-template>\n</div>\n\n<ng-template #itemsTemplate>\n  <prizm-navigation-menu-toolbar\n    [searchConfig]=\"$any(searchConfig$ | async)\"\n    [toolbarConfig]=\"$any(toolbarConfig$ | async)\"\n    [toolbarExtraTemplate]=\"toolbarExtraTemplate\"\n    [hideGroupAppearance]=\"$any(hideGroupAppearance)\"\n  ></prizm-navigation-menu-toolbar>\n  <ng-container *ngIf=\"groupItems$ | async as groupItems\">\n    <prizm-navigation-menu-items\n      [items]=\"groupItems\"\n      [itemExtraTemplate]=\"$any(itemExtraTemplate)\"\n      [childrenHandler]=\"childrenHandler\"\n      [expandedItemsMap]=\"$any(expandedItemsMap$ | async)\"\n      [activeItem]=\"$any(activeItem$ | async)\"\n      [mode]=\"$any(mode$ | async)\"\n      (activeItemChanged)=\"handleActiveItemChange($event)\"\n      (itemExpandedChanged)=\"handleItemExpandedChanged($event)\"\n      (goToParentItem)=\"handleGoToParentItem($event)\"\n      (goToRootItem)=\"handleGoToRootItem($event)\"\n    ></prizm-navigation-menu-items>\n\n    <ng-container *ngIf=\"!groupItems.length\">\n      <div\n        class=\"prizm-navigation-menu-group__no-items-content\"\n        *ngIf=\"emptyMessageConfig$ | async as emptyMessageConfig\"\n      >\n        <div class=\"empty-message\">\n          <span class=\"empty-message__main\">{{ emptyMessageConfig.title }}</span>\n          <span class=\"empty-message__sub\">{{ emptyMessageConfig.subtitle }}</span>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-template>\n", styles: [":host:last-of-type{flex:1;height:100%}:host .prizm-navigation-menu-group{--prizm-empty-message__padding: 16px 32px;border-bottom:1px solid var(--prizm-v3-background-stroke);height:100%}:host .prizm-navigation-menu-group_expanded:has(.empty-message){border-bottom:none}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion{border:none}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion__content{padding:0!important;background:var(--prizm-v3-background-fill-primary);cursor:default}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .prizm_accordion{border:0!important}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion{box-shadow:unset;border-top:unset}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion:hover:not(.accordion_disabled){box-shadow:unset;border-top:unset}:host .prizm-navigation-menu-group ::ng-deep prizm-accordion .accordion__header{padding:var(--prizm-navigation-menu__item-padding);padding-left:12px;border-left:4px solid transparent}:host .prizm-navigation-menu-group__no-items-content{background:var(--prizm-v3-background-fill-primary);height:100%;display:flex;justify-content:center;align-items:center}:host .empty-message{display:flex;flex-direction:column;align-items:center;gap:16px;font-size:14px;line-height:20px;text-align:center;padding:var(--prizm-empty-message__padding)}:host .empty-message__main{font-weight:600;color:var(--prizm-v3-text-icon-primary);text-align:center}:host .empty-message__sub{font-weight:400;color:var(--prizm-v3-text-icon-secondary)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.PrizmDestroyService }, { type: i2.PrizmNavigationMenuGroupService }, { type: i3.PrizmNavigationMenuService }]; }, propDecorators: { menuItemsComponent: [{
                type: ViewChild,
                args: [PrizmNavigationMenuItemsComponent]
            }], itemExpandedChanged: [{
                type: Output
            }], groupExpandedChanged: [{
                type: Output
            }], groupId: [{
                type: Input
            }], title: [{
                type: Input
            }], hideGroupAppearance: [{
                type: Input
            }], icon: [{
                type: Input
            }], toolbarExtraTemplate: [{
                type: Input
            }], itemExtraTemplate: [{
                type: Input
            }], items: [{
                type: Input
            }], toolbarConfig: [{
                type: Input
            }], emptySearchResultMessageConfig: [{
                type: Input
            }], emptyDataMessageConfig: [{
                type: Input
            }], searchConfig: [{
                type: Input
            }], childrenHandler: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,