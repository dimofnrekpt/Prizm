import { Component, ChangeDetectionStrategy, Input, TemplateRef, Output, EventEmitter, ChangeDetectorRef, ViewChildren, QueryList, Inject, } from '@angular/core';
import { PrizmNavigationMenuItemComponent } from '../prizm-navigation-menu-item/prizm-navigation-menu-item.component';
import { findItem } from '../../helpers/prizm-navigation-menu-items-helpers';
import { PRIZM_NAVIGATION_MENU_CHILDREN_HANDLER } from '../../tokens';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import { PrizmTreeModule } from '../../../tree';
import { NgFor } from '@angular/common';
import { prizmEmptyQueryList } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
import * as i1 from "../../../tree/components/tree/tree.component";
import * as i2 from "../../../tree/directives/tree-children.directive";
import * as i3 from "../../../tree/directives/tree-controller.directive";
export class PrizmNavigationMenuItemsComponent extends PrizmAbstractTestId {
    get menuItemsChildrenHandler() {
        return this.childrenHandler || this.childrenHandlerToken;
    }
    constructor(childrenHandlerToken, cdr) {
        super();
        this.childrenHandlerToken = childrenHandlerToken;
        this.cdr = cdr;
        this.menuItemsList = prizmEmptyQueryList();
        this.itemExpandedChanged = new EventEmitter();
        this.activeItemChanged = new EventEmitter();
        this.goToRootItem = new EventEmitter();
        this.goToParentItem = new EventEmitter();
        this.expandedItemsMap = new Map();
        this.testId_ = 'ui_navigation_menu_items';
    }
    handleInteraction(item, treeCtrl) {
        if (item.isGroup) {
            treeCtrl.toggleByItemValue(item);
        }
        else {
            this.activeItemChanged.emit(item);
        }
    }
    handleExpandedChanged({ value, isExpanded, }) {
        this.itemExpandedChanged.emit({
            item: value,
            isExpanded,
        });
    }
    getItemIsExpanded(item) {
        return this.expandedItemsMap.get(item) ?? false;
    }
    getItemIsActive(item) {
        if (item === this.activeItem)
            return true;
        if (!this.getItemIsExpanded(item) && item.children && this.mode !== 'rubricator') {
            const anyActiveChild = findItem(item.children, item => item === this.activeItem);
            return !!anyActiveChild;
        }
        return false;
    }
    triggerCdr() {
        this.cdr.markForCheck();
        this.menuItemsList?.forEach(itemComponent => itemComponent.cdr.markForCheck());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuItemsComponent, deps: [{ token: PRIZM_NAVIGATION_MENU_CHILDREN_HANDLER }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmNavigationMenuItemsComponent, isStandalone: true, selector: "prizm-navigation-menu-items", inputs: { items: "items", mode: "mode", activeItem: "activeItem", itemExtraTemplate: "itemExtraTemplate", expandedItemsMap: "expandedItemsMap", childrenHandler: "childrenHandler" }, outputs: { itemExpandedChanged: "itemExpandedChanged", activeItemChanged: "activeItemChanged", goToRootItem: "goToRootItem", goToParentItem: "goToParentItem" }, viewQueries: [{ propertyName: "menuItemsList", predicate: PrizmNavigationMenuItemComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<prizm-tree\n  #treeCtrl=\"prizmTreeController\"\n  *ngFor=\"let item of items\"\n  [prizmTreeController]=\"false\"\n  [map]=\"expandedItemsMap\"\n  [content]=\"content\"\n  [value]=\"item\"\n  [childrenHandler]=\"menuItemsChildrenHandler\"\n  (expandedChanged)=\"handleExpandedChanged($event)\"\n>\n  <ng-template #content let-item>\n    <prizm-navigation-menu-item\n      [item]=\"item\"\n      [mode]=\"mode\"\n      [itemExtraTemplate]=\"itemExtraTemplate\"\n      [isActive]=\"getItemIsActive(item)\"\n      [isExpandable]=\"menuItemsChildrenHandler(item).length > 0\"\n      [isExpanded]=\"getItemIsExpanded(item)\"\n      (toggleExpanded)=\"treeCtrl.toggleByItemValue($event)\"\n      (interaction)=\"handleInteraction($event, treeCtrl)\"\n      (goToParentItem)=\"goToParentItem.emit($event)\"\n      (goToRootItem)=\"goToRootItem.emit($event)\"\n    ></prizm-navigation-menu-item>\n  </ng-template>\n</prizm-tree>\n", styles: [":host ::ng-deep prizm-tree>prizm-tree-item>.prizm-tree-item__dynamic-content,:host ::ng-deep prizm-tree>prizm-tree-item>.prizm-tree-item__dynamic-content>prizm-tree-item-content,:host ::ng-deep prizm-tree>prizm-tree-item>prizm-expand{margin:0!important;padding:0!important}:host ::ng-deep prizm-tree prizm-tree-item-content>button[prizmiconbutton]{display:none}.prizm-menu-item-content{display:flex;flex:1;align-items:center;height:100%;width:calc(100% - var(--expand-item-width))}.prizm-menu-item-content__icon{flex-basis:24px;padding-left:8px}.prizm-menu-item-content__text{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1;padding:0 8px;outline:none}.prizm-menu-item-content__text_has-action{cursor:pointer}\n"], dependencies: [{ kind: "ngmodule", type: PrizmTreeModule }, { kind: "component", type: i1.PrizmTreeComponent, selector: "prizm-tree[value]", inputs: ["value", "usePaddingIndent", "content"], exportAs: ["prizmTree"] }, { kind: "directive", type: i2.PrizmTreeChildrenDirective, selector: "prizm-tree[childrenHandler]", inputs: ["childrenHandler"] }, { kind: "directive", type: i3.PrizmTreeControllerDirective, selector: "[prizmTreeController][map]", inputs: ["prizmTreeController", "map"], outputs: ["toggled", "expandedChanged"], exportAs: ["prizmTreeController"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: PrizmNavigationMenuItemComponent, selector: "prizm-navigation-menu-item", inputs: ["itemExtraTemplate", "isExpandable", "isExpanded", "isActive", "item", "mode", "showGoToButtons"], outputs: ["interaction", "toggleExpanded", "goToParentItem", "goToRootItem"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuItemsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-navigation-menu-items', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [PrizmTreeModule, NgFor, PrizmNavigationMenuItemComponent], template: "<prizm-tree\n  #treeCtrl=\"prizmTreeController\"\n  *ngFor=\"let item of items\"\n  [prizmTreeController]=\"false\"\n  [map]=\"expandedItemsMap\"\n  [content]=\"content\"\n  [value]=\"item\"\n  [childrenHandler]=\"menuItemsChildrenHandler\"\n  (expandedChanged)=\"handleExpandedChanged($event)\"\n>\n  <ng-template #content let-item>\n    <prizm-navigation-menu-item\n      [item]=\"item\"\n      [mode]=\"mode\"\n      [itemExtraTemplate]=\"itemExtraTemplate\"\n      [isActive]=\"getItemIsActive(item)\"\n      [isExpandable]=\"menuItemsChildrenHandler(item).length > 0\"\n      [isExpanded]=\"getItemIsExpanded(item)\"\n      (toggleExpanded)=\"treeCtrl.toggleByItemValue($event)\"\n      (interaction)=\"handleInteraction($event, treeCtrl)\"\n      (goToParentItem)=\"goToParentItem.emit($event)\"\n      (goToRootItem)=\"goToRootItem.emit($event)\"\n    ></prizm-navigation-menu-item>\n  </ng-template>\n</prizm-tree>\n", styles: [":host ::ng-deep prizm-tree>prizm-tree-item>.prizm-tree-item__dynamic-content,:host ::ng-deep prizm-tree>prizm-tree-item>.prizm-tree-item__dynamic-content>prizm-tree-item-content,:host ::ng-deep prizm-tree>prizm-tree-item>prizm-expand{margin:0!important;padding:0!important}:host ::ng-deep prizm-tree prizm-tree-item-content>button[prizmiconbutton]{display:none}.prizm-menu-item-content{display:flex;flex:1;align-items:center;height:100%;width:calc(100% - var(--expand-item-width))}.prizm-menu-item-content__icon{flex-basis:24px;padding-left:8px}.prizm-menu-item-content__text{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;flex:1;padding:0 8px;outline:none}.prizm-menu-item-content__text_has-action{cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_NAVIGATION_MENU_CHILDREN_HANDLER]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { menuItemsList: [{
                type: ViewChildren,
                args: [PrizmNavigationMenuItemComponent]
            }], itemExpandedChanged: [{
                type: Output
            }], activeItemChanged: [{
                type: Output
            }], goToRootItem: [{
                type: Output
            }], goToParentItem: [{
                type: Output
            }], items: [{
                type: Input
            }], mode: [{
                type: Input
            }], activeItem: [{
                type: Input
            }], itemExtraTemplate: [{
                type: Input
            }], expandedItemsMap: [{
                type: Input
            }], childrenHandler: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,