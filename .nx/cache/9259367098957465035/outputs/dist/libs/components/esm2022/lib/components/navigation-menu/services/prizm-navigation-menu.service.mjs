import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { traverseAllDeep } from '../helpers/prizm-navigation-menu-items-helpers';
import { DEFAULT_EMPTY_MESSAGE_CONFIG, DEFAULT_SEARCH_CONFIG, DEFAULT_SETTINGS, DEFAULT_TOOLBAR_CONFIG, } from '../defaults';
import { PRIZM_NAVIGATION_MENU_SEARCH_CONFIG, PRIZM_NAVIGATION_MENU_SETTINGS_CONFIG } from '../tokens';
import * as i0 from "@angular/core";
export class PrizmNavigationMenuService {
    get activeItem() {
        return this.activeItem$$.value;
    }
    get settingsConfig() {
        return this.settingsConfig$$.value;
    }
    get searchConfig() {
        return this.searchConfig$$.value;
    }
    get toolbarConfig() {
        return this.toolbarConfig$$.value;
    }
    constructor(searchConfigToken, settingsConfigToken) {
        this.searchConfigToken = searchConfigToken;
        this.settingsConfigToken = settingsConfigToken;
        this.internalItemsState$$ = new BehaviorSubject({});
        this.internalToUserMap = new Map();
        this.userToInternalMap = new Map();
        this.expandedGroupsMap$$ = new BehaviorSubject(new Map());
        this.userExpandedItemsMap$$ = new BehaviorSubject(new Map());
        this.activeItem$$ = new BehaviorSubject(null);
        this.activeItem$ = this.activeItem$$.asObservable();
        this.internalExpandedItemsMap = new Map();
        this.itemKeyName = 'id';
        /** CONFIGURATION */
        this.searchConfig$$ = new BehaviorSubject({
            ...DEFAULT_SEARCH_CONFIG,
            ...this.searchConfigToken,
        });
        this.toolbarConfig$$ = new BehaviorSubject(DEFAULT_TOOLBAR_CONFIG);
        this.settingsConfig$$ = new BehaviorSubject({
            ...DEFAULT_SETTINGS,
            ...this.settingsConfigToken,
            selectionMode: 'single',
        });
        this.emptySearchResultMessageConfig$$ = new BehaviorSubject(DEFAULT_EMPTY_MESSAGE_CONFIG);
        this.emptyDataMessageConfig$$ = new BehaviorSubject({
            title: '',
            subtitle: '',
        });
        this.searchConfig$ = this.searchConfig$$.asObservable();
        this.toolbarConfig$ = this.toolbarConfig$$.asObservable();
        this.emptySearchResultMessageConfig$ = this.emptySearchResultMessageConfig$$.asObservable();
        this.emptyDataMessageConfig$ = this.emptyDataMessageConfig$$.asObservable();
        /** FORWARD EVENTS */
        this.activeItemChangedEvent$ = new Subject();
        this.breadCrumbsChangedEvent$ = new Subject();
        this.expandedItemsMapChangedEvent$ = new Subject();
        this.expandedGroupsMapChangedEvent$ = new Subject();
        this.itemExpandedChangedEvent$ = new Subject();
        this.groupExpandedChangedEvent$ = new Subject();
    }
    /** ITEMS RELATED */
    registerGroupItems(groupId, items) {
        const internalItems = this.mapToInternalItemsAndUpdateSetMap(items, groupId);
        this.internalItemsState$$.next({
            ...this.internalItemsState$$.value,
            [groupId]: internalItems,
        });
        this.fillInternalExpandedItemsMapWithUser();
    }
    getGroupItems(groupId) {
        return this.internalItemsState$$.pipe(map(s => s[groupId] ?? []));
    }
    getUserItem(internalItem) {
        return this.internalToUserMap.get(internalItem);
    }
    getInternalItem(userItem) {
        return this.userToInternalMap.get(userItem);
    }
    /** EXPANDED RELATED */
    registerExpandedItemsMap(expandedItemsMap) {
        this.userExpandedItemsMap$$.next(expandedItemsMap);
    }
    registerExpandedGroupsMap(expandedGroupsMap) {
        this.expandedGroupsMap$$.next(expandedGroupsMap);
    }
    getGroupIsExpanded(groupId) {
        return Boolean(this.expandedGroupsMap$$.value.get(groupId));
    }
    handleExpandedChanged(event) {
        const userItem = this.getUserItem(event.item);
        this.userExpandedItemsMap$$.value.set(userItem, event.isExpanded);
        this.itemExpandedChangedEvent$.next({
            item: userItem,
            isExpanded: event.isExpanded,
        });
        this.expandedItemsMapChangedEvent$.next(this.userExpandedItemsMap$$.value);
    }
    handleGroupExpandedChanged(event) {
        this.expandedGroupsMap$$.value.set(event.groupId, event.isExpanded);
        this.groupExpandedChangedEvent$.next(event);
        this.expandedGroupsMapChangedEvent$.next(this.expandedGroupsMap$$.value);
    }
    clearExpandedItemsMap(groupId) {
        if (groupId) {
            const groupItems = this.internalItemsState$$.value[groupId];
            traverseAllDeep(groupItems, internalItem => {
                const userItem = this.getUserItem(internalItem);
                this.internalExpandedItemsMap.delete(internalItem);
                this.userExpandedItemsMap$$.value.delete(userItem);
            });
        }
        else {
            this.internalExpandedItemsMap.clear();
            this.userExpandedItemsMap$$.value.clear();
        }
        this.expandedItemsMapChangedEvent$.next(this.userExpandedItemsMap$$.value);
    }
    /** ACTIVE RELATED */
    setActiveItem(userItem) {
        const internal = this.getInternalItem(userItem);
        if (internal !== this.activeItem$$.value) {
            this.activeItem$$.next(internal);
        }
    }
    handleActiveItemChange(internalItem) {
        if (internalItem.isRubricator)
            return;
        const breadcrumbs = internalItem.breadcrumbs ?? [];
        const userItem = breadcrumbs[breadcrumbs.length - 1];
        this.activeItem$$.next(internalItem);
        this.activeItemChangedEvent$.next(userItem);
        this.breadCrumbsChangedEvent$.next(internalItem.breadcrumbs ?? []);
    }
    /** CONFIGURATION RELATED */
    setSettingsConfiguration(settingsConfig) {
        this.settingsConfig$$.next({ ...DEFAULT_SETTINGS, ...settingsConfig });
    }
    setSearchConfig(config) {
        this.searchConfig$$.next({ ...DEFAULT_SEARCH_CONFIG, ...config });
    }
    setToolbarConfig(config) {
        this.toolbarConfig$$.next({ ...DEFAULT_TOOLBAR_CONFIG, ...config, folderMode: false });
        this.toolbarIsNotEmpty = Object.values(this.toolbarConfig).some(Boolean);
    }
    setItemKeyName(itemKeyName) {
        this.itemKeyName = itemKeyName;
    }
    setEmptySearchResultMessageConfig(config) {
        this.emptySearchResultMessageConfig$$.next(config);
    }
    setEmptyDataMessageConfig(config) {
        this.emptyDataMessageConfig$$.next(config);
    }
    /** PRIVATE */
    fillInternalExpandedItemsMapWithUser() {
        const entries = this.userExpandedItemsMap$$.value.entries();
        for (const [userItem, isExpanded] of entries) {
            const internalItem = this.getInternalItem(userItem);
            this.internalExpandedItemsMap.set(internalItem, isExpanded);
        }
    }
    mapToInternalItemsAndUpdateSetMap(items, groupId) {
        return items.map(item => this.mapWithMetadataAndUpdateMaps(item, groupId, null));
    }
    mapWithMetadataAndUpdateMaps(item, groupId, parent) {
        if (!item.children) {
            const internal = {
                ...item,
                original: item,
                groupId,
                parent,
                breadcrumbs: parent ? [...(parent.breadcrumbs ?? []), item] : [item],
                children: undefined,
            };
            this.internalToUserMap.set(internal, item);
            this.userToInternalMap.set(item, internal);
            return internal;
        }
        const internalWithMappedChildren = {
            ...item,
            original: item,
            groupId,
            parent,
            breadcrumbs: parent ? [...(parent.breadcrumbs ?? []), item] : [item],
            children: [],
        };
        internalWithMappedChildren.children = item.children.map(child => this.mapWithMetadataAndUpdateMaps(child, groupId, internalWithMappedChildren));
        this.internalToUserMap.set(internalWithMappedChildren, item);
        this.userToInternalMap.set(item, internalWithMappedChildren);
        return internalWithMappedChildren;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuService, deps: [{ token: PRIZM_NAVIGATION_MENU_SEARCH_CONFIG }, { token: PRIZM_NAVIGATION_MENU_SETTINGS_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_NAVIGATION_MENU_SEARCH_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_NAVIGATION_MENU_SETTINGS_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,