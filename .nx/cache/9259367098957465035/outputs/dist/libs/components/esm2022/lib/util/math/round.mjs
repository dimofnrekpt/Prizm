import { prizmAssert } from '@prizm-ui/core';
const MAX_PRECISION = 292;
export function prizmRound(value, precision = 0) {
    return calculate(value, precision, Math.round);
}
export function prizmCeil(value, precision = 0) {
    return calculate(value, precision, Math.ceil);
}
export function prizmFloor(value, precision = 0) {
    return calculate(value, precision, Math.floor);
}
/**
 * Rounding number to the set precision
 *
 * @param value
 * @param precision number of digits in a float part
 * @param func rounding function (round, floor, ceil)
 */
function calculate(value, precision, func) {
    if (value === Infinity) {
        return value;
    }
    prizmAssert.assert(!isNaN(value), `Value must be number`);
    prizmAssert.assert(Number.isInteger(precision), `Precision must be integer`);
    precision = Math.min(precision, MAX_PRECISION);
    const pair = `${value}e`.split(`e`);
    const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));
    const processedPair = `${tempValue}e`.split(`e`);
    return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi91dGlsL21hdGgvcm91bmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQztBQUUxQixNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQWEsRUFBRSxTQUFTLEdBQUcsQ0FBQztJQUNyRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBUyxHQUFHLENBQUM7SUFDcEQsT0FBTyxTQUFTLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBYSxFQUFFLFNBQVMsR0FBRyxDQUFDO0lBQ3JELE9BQU8sU0FBUyxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFTLFNBQVMsQ0FBQyxLQUFhLEVBQUUsU0FBaUIsRUFBRSxJQUEyQjtJQUM5RSxJQUFJLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDdEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUMxRCxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUU3RSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFL0MsTUFBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sYUFBYSxHQUFHLEdBQUcsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWpELE9BQU8sTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQy9FLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcml6bUFzc2VydCB9IGZyb20gJ0Bwcml6bS11aS9jb3JlJztcblxuY29uc3QgTUFYX1BSRUNJU0lPTiA9IDI5MjtcblxuZXhwb3J0IGZ1bmN0aW9uIHByaXptUm91bmQodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC5yb3VuZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcml6bUNlaWwodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC5jZWlsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaXptRmxvb3IodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uID0gMCk6IG51bWJlciB7XG4gIHJldHVybiBjYWxjdWxhdGUodmFsdWUsIHByZWNpc2lvbiwgTWF0aC5mbG9vcik7XG59XG5cbi8qKlxuICogUm91bmRpbmcgbnVtYmVyIHRvIHRoZSBzZXQgcHJlY2lzaW9uXG4gKlxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gcHJlY2lzaW9uIG51bWJlciBvZiBkaWdpdHMgaW4gYSBmbG9hdCBwYXJ0XG4gKiBAcGFyYW0gZnVuYyByb3VuZGluZyBmdW5jdGlvbiAocm91bmQsIGZsb29yLCBjZWlsKVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGUodmFsdWU6IG51bWJlciwgcHJlY2lzaW9uOiBudW1iZXIsIGZ1bmM6ICh4OiBudW1iZXIpID0+IG51bWJlcik6IG51bWJlciB7XG4gIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwcml6bUFzc2VydC5hc3NlcnQoIWlzTmFOKHZhbHVlKSwgYFZhbHVlIG11c3QgYmUgbnVtYmVyYCk7XG4gIHByaXptQXNzZXJ0LmFzc2VydChOdW1iZXIuaXNJbnRlZ2VyKHByZWNpc2lvbiksIGBQcmVjaXNpb24gbXVzdCBiZSBpbnRlZ2VyYCk7XG5cbiAgcHJlY2lzaW9uID0gTWF0aC5taW4ocHJlY2lzaW9uLCBNQVhfUFJFQ0lTSU9OKTtcblxuICBjb25zdCBwYWlyID0gYCR7dmFsdWV9ZWAuc3BsaXQoYGVgKTtcbiAgY29uc3QgdGVtcFZhbHVlID0gZnVuYyhOdW1iZXIoYCR7cGFpclswXX1lJHtOdW1iZXIocGFpclsxXSkgKyBwcmVjaXNpb259YCkpO1xuICBjb25zdCBwcm9jZXNzZWRQYWlyID0gYCR7dGVtcFZhbHVlfWVgLnNwbGl0KGBlYCk7XG5cbiAgcmV0dXJuIE51bWJlcihgJHtwcm9jZXNzZWRQYWlyWzBdfWUke051bWJlcihwcm9jZXNzZWRQYWlyWzFdKSAtIHByZWNpc2lvbn1gKTtcbn1cbiJdfQ==