import { Inject, Injectable, Optional, Self, SkipSelf } from '@angular/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, switchMap, takeUntil, withLatestFrom } from 'rxjs/operators';
import { filterItems, toRubricatorItems, traverseAllDeep, } from '../helpers/prizm-navigation-menu-items-helpers';
import { PrizmNavigationMenuToolbarService } from './prizm-navigation-menu-toolbar.service';
import { PrizmNavigationMenuService } from './prizm-navigation-menu.service';
import { PRIZM_NAVIGATION_MENU_SEARCH_CONFIG } from '../tokens';
import { DEFAULT_TOOLBAR_CONFIG, DEFAULT_SEARCH_CONFIG, DEFAULT_EMPTY_MESSAGE_CONFIG } from '../defaults';
import * as i0 from "@angular/core";
import * as i1 from "./prizm-navigation-menu.service";
import * as i2 from "./prizm-navigation-menu-toolbar.service";
export class PrizmNavigationMenuGroupService {
    get groupId() {
        return this.groupId$$.value;
    }
    get searchConfig() {
        return this.searchConfig$$.value;
    }
    get viewMode() {
        return this.viewMode$$.value;
    }
    constructor(menuService, searchConfigToken, groupToolbarService, menuToolbarService) {
        this.menuService = menuService;
        this.searchConfigToken = searchConfigToken;
        this.groupToolbarService = groupToolbarService;
        this.menuToolbarService = menuToolbarService;
        this.groupId$$ = new BehaviorSubject(null);
        this.emptySearchResultMessageConfig$$ = new BehaviorSubject(DEFAULT_EMPTY_MESSAGE_CONFIG);
        this.emptyDataMessageConfig$$ = new BehaviorSubject({
            title: '',
            subtitle: '',
        });
        this.toolbarConfig$$ = new BehaviorSubject(DEFAULT_TOOLBAR_CONFIG);
        this.searchConfig$$ = new BehaviorSubject({
            ...DEFAULT_SEARCH_CONFIG,
            ...this.searchConfigToken,
        });
        this.searchState$$ = new BehaviorSubject({
            enabled: false,
            value: '',
        });
        this.viewMode$$ = new BehaviorSubject('hierarchy');
        this.folderItem$$ = new BehaviorSubject(null);
        this.persistentExpandedItemsMap$$ = new BehaviorSubject(this.menuService.internalExpandedItemsMap);
        this.temporaryExpandedItemsMap = new Map();
        this.internalItems$ = this.groupId$$.pipe(filter(groupId => !!groupId), switchMap(groupId => this.menuService.getGroupItems(groupId)));
        this.modeBasedItems$ = combineLatest([
            this.internalItems$,
            this.viewMode$$,
        ]).pipe(switchMap(([internalItems, viewMode]) => {
            if (viewMode === 'rubricator') {
                const rubricatorItems = toRubricatorItems(internalItems);
                rubricatorItems.forEach(rootLevelItem => this.temporaryExpandedItemsMap.set(rootLevelItem, false));
                return of(rubricatorItems);
            }
            if (viewMode === 'folder') {
                return this.folderItem$$.pipe(map(folderItem => {
                    if (folderItem) {
                        if (!folderItem.children) {
                            return [folderItem];
                        }
                        return folderItem.children || [];
                    }
                    return internalItems;
                }));
            }
            return of(internalItems);
        }));
        this.viewMode$ = this.viewMode$$.asObservable();
        this.groupItems$ = combineLatest([
            this.modeBasedItems$,
            this.searchState$$,
        ]).pipe(map(([modeBasedItems, searchState]) => {
            if (searchState.enabled && searchState.value === '') {
                return [];
            }
            if (searchState.enabled) {
                const filtered = filterItems(modeBasedItems, item => item.text.toLowerCase().includes(searchState.value.toLowerCase()));
                traverseAllDeep(filtered, item => this.temporaryExpandedItemsMap.set(item, true));
                return filtered;
            }
            return modeBasedItems;
        }));
        this.expandedItemsMap$ = combineLatest([
            this.viewMode$$,
            this.searchState$$,
            this.persistentExpandedItemsMap$$,
        ]).pipe(map(([viewMode, searchState, persistentExpandedItemsMap]) => {
            return viewMode === 'folder' || viewMode === 'rubricator' || searchState.enabled
                ? this.temporaryExpandedItemsMap
                : persistentExpandedItemsMap;
        }));
        this.closeAll$ = new Subject();
        this.searchEnabled$ = this.searchState$$.pipe(map(s => s.enabled));
        this.searchConfig$ = this.searchConfig$$.asObservable();
        this.toolbarConfig$ = this.toolbarConfig$$.asObservable();
        this.emptySearchResultMessageConfig$ = this.menuService.emptySearchResultMessageConfig$;
        this.emptyDataMessageConfig$ = this.menuService.emptyDataMessageConfig$;
        this.destroy$ = new Subject();
        this.filterItemsOnSearchChange();
        this.configureViewMode();
        this.clearExpandedItemsOnToolbarAction();
    }
    goToParentFolder(item) {
        item.breadcrumbs = item.breadcrumbs ?? [];
        const parentUserItem = item.breadcrumbs[item.breadcrumbs.length - 3];
        const parent = this.menuService.getInternalItem(parentUserItem);
        this.temporaryExpandedItemsMap.clear();
        this.folderItem$$.next(parent);
    }
    goToRootFolder() {
        this.temporaryExpandedItemsMap.clear();
        this.folderItem$$.next(null);
    }
    handleFolderExpanded(item) {
        this.folderItem$$.next(item);
    }
    setGroupId(groupId) {
        this.groupId$$.next(groupId);
    }
    setToolbarConfig(toolbarConfig) {
        this.toolbarConfig$$.next({ ...DEFAULT_TOOLBAR_CONFIG, ...toolbarConfig, folderMode: false });
    }
    setSearchConfig(config) {
        this.searchConfig$$.next({
            ...DEFAULT_SEARCH_CONFIG,
            ...config,
        });
    }
    setEmptySearchResultMessageConfig(config) {
        this.emptySearchResultMessageConfig$$.next(config);
    }
    setEmptyDataMessageConfig(config) {
        this.emptyDataMessageConfig$$.next(config);
    }
    applySearchState(value) {
        this.searchState$$.next(value);
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    filterItemsOnSearchChange() {
        this.searchConfig$
            .pipe(switchMap(config => {
            switch (config.searchSource) {
                case 'group':
                    return this.groupToolbarService.searchState$;
                case 'menu':
                    return this.menuToolbarService?.searchState$;
                case 'hierarchical':
                default:
                    return combineLatest([
                        this.groupToolbarService.searchState$,
                        ...(this.menuToolbarService?.searchState$ ? [this.menuToolbarService?.searchState$] : []),
                    ]).pipe(map(([groupValue, menuValue]) => {
                        if (groupValue?.enabled) {
                            return groupValue;
                        }
                        if (menuValue?.enabled) {
                            return menuValue;
                        }
                        return {
                            enabled: false,
                            value: '',
                        };
                    }));
            }
        }), distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(v => this.applySearchState(v));
    }
    configureViewMode() {
        const menuViewMode$ = this.menuToolbarService?.viewMode$.pipe(filter(menuViewMode => {
            if (menuViewMode === 'folder' && !this.toolbarConfig$$.value.folderMode)
                return false;
            if (menuViewMode === 'rubricator' && !this.toolbarConfig$$.value.rubricatorMode)
                return false;
            return true;
        }));
        menuViewMode$
            ?.pipe(withLatestFrom(this.viewMode$$), filter(([menuViewMode, currentViewMode]) => menuViewMode !== currentViewMode), takeUntil(this.destroy$))
            .subscribe(([menuViewMode]) => {
            this.viewMode$$.next(menuViewMode);
            this.groupToolbarService.changeViewMode(menuViewMode);
        });
        this.groupToolbarService.viewMode$
            .pipe(filter(groupViewMode => groupViewMode !== this.viewMode$$.value), takeUntil(this.destroy$))
            .subscribe(groupViewMode => {
            this.viewMode$$.next(groupViewMode);
        });
    }
    clearExpandedItemsOnToolbarAction() {
        this.menuToolbarService?.closeAll$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.temporaryExpandedItemsMap.clear();
            this.menuService.clearExpandedItemsMap();
            this.closeAll$.next();
        });
        this.groupToolbarService.closeAll$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.temporaryExpandedItemsMap.clear();
            this.menuService.clearExpandedItemsMap(this.groupId);
            this.closeAll$.next();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuGroupService, deps: [{ token: i1.PrizmNavigationMenuService }, { token: PRIZM_NAVIGATION_MENU_SEARCH_CONFIG }, { token: i2.PrizmNavigationMenuToolbarService, self: true }, { token: i2.PrizmNavigationMenuToolbarService, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuGroupService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationMenuGroupService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PrizmNavigationMenuService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_NAVIGATION_MENU_SEARCH_CONFIG]
                }] }, { type: i2.PrizmNavigationMenuToolbarService, decorators: [{
                    type: Self
                }] }, { type: i2.PrizmNavigationMenuToolbarService, decorators: [{
                    type: SkipSelf
                }, {
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,