import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
import { expandAnimation } from '../../../accordion/accordion.animation';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { ActiveNavigationItemService } from '../../services/active-navigation-item.service';
import { PrizmAbstractTestId } from '@prizm-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/active-navigation-item.service";
import * as i2 from "@angular/common";
import * as i3 from "../../../icon/icon.component";
import * as i4 from "../prizm-navigation-item-simple/prizm-navigation-item-simple.component";
export class PrizmNavigationItemExpandableComponent extends PrizmAbstractTestId {
    set data(tree) {
        this.data$.next(tree);
    }
    get menuItem() {
        return this.data$.getValue();
    }
    constructor(activeItemService) {
        super();
        this.activeItemService = activeItemService;
        this.isExpanded = false;
        this.testId_ = 'ui_navigation--item-expandable';
        this.data$ = new BehaviorSubject(null);
        this.isActive$ = combineLatest([
            this.activeItemService.activeItem$,
            this.data$,
        ]).pipe(map(([activeItem, data]) => activeItem === data));
    }
    toggle($event) {
        $event.stopPropagation();
        this.isExpanded = !this.isExpanded;
    }
    navClick() {
        const data = this.data$.getValue();
        const current = this.activeItemService.activeItem$.getValue();
        this.activeItemService.activeItem = current === data ? null : data;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationItemExpandableComponent, deps: [{ token: i1.ActiveNavigationItemService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmNavigationItemExpandableComponent, selector: "prizm-navigation-item-expandable", inputs: { data: "data", deep: "deep" }, usesInheritance: true, ngImport: i0, template: "<div class=\"container\">\n  <div class=\"nav\" [class.nav_active]=\"isActive$ | async\" (click)=\"navClick()\">\n    <div class=\"nav__icon\" [style.marginLeft.px]=\"deep > 0 ? 8 + 16 * deep : 0\">\n      <prizm-icon [iconClass]=\"menuItem?.icon || 'files-folder'\"></prizm-icon>\n    </div>\n    <span class=\"nav__title\">{{ menuItem?.title }}</span>\n\n    <div class=\"nav__status\">\n      <div\n        class=\"indicator {{\n          menuItem?.indicatorStatus && !isExpanded ? 'indicator_' + menuItem?.indicatorStatus : ''\n        }}\"\n      ></div>\n    </div>\n\n    <button class=\"nav__chevron\" [class.nav__chevron_expanded]=\"isExpanded\" (click)=\"toggle($event)\">\n      <prizm-icon class=\"icon\" iconClass=\"arrows-chevron-right\"></prizm-icon>\n    </button>\n  </div>\n\n  <div class=\"expandable\" [@expand]=\"isExpanded ? 'expanded' : 'init'\">\n    <ng-container *ngFor=\"let item of menuItem?.children ?? []\">\n      <prizm-navigation-item-simple\n        *ngIf=\"!item?.children\"\n        [data]=\"item\"\n        [deep]=\"deep + 1\"\n      ></prizm-navigation-item-simple>\n\n      <prizm-navigation-item-expandable\n        *ngIf=\"$any(item?.children?.length) > 0\"\n        [data]=\"item\"\n        [deep]=\"deep + 1\"\n      ></prizm-navigation-item-expandable>\n    </ng-container>\n  </div>\n</div>\n", styles: [":host button{border:none;outline:none;background:transparent;cursor:pointer}:host .container .nav{height:40px;padding:0 8px;display:flex;align-items:center;background:var(--prizm-v3-background-fill-primary);border-bottom:1px solid var(--prizm-v3-background-stroke);cursor:pointer}:host .container .nav__title{margin-right:8px;font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-primary);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}:host .container .nav__icon{height:16px;width:16px;margin:0 8px;display:inline-flex;align-items:center;color:var(--prizm-v3-status-info-primary-default)}:host .container .nav__chevron{height:100%;width:32px;display:inline-flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .nav__chevron .icon{transition:.3s}:host .container .nav__chevron_expanded .icon{transform:rotate(90deg)}:host .container .nav__status{height:100%;width:32px;margin-left:auto;display:inline-flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .nav__status .indicator{height:8px;width:8px;border-radius:50%}:host .container .nav__status .indicator_info{background:var(--prizm-v3-status-info-primary-default)}:host .container .nav__status .indicator_secondary{background:var(--prizm-v3-status-none-primary-default)}:host .container .nav__status .indicator_success{background:var(--prizm-v3-status-success-primary-default)}:host .container .nav__status .indicator_warning{background:var(--prizm-v3-status-warning-primary-default)}:host .container .nav__status .indicator_danger{background:var(--prizm-v3-status-alarm-primary-default)}:host .container .nav_active{background:var(--prizm-v3-table-fill-row-active)}:host .container .nav_active .nav__icon{color:var(--prizm-v3-text-icon-primary)}:host .container .expandable{overflow:hidden}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }, { kind: "component", type: i4.PrizmNavigationItemSimpleComponent, selector: "prizm-navigation-item-simple", inputs: ["data", "deep"] }, { kind: "component", type: PrizmNavigationItemExpandableComponent, selector: "prizm-navigation-item-expandable", inputs: ["data", "deep"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], animations: [expandAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmNavigationItemExpandableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-navigation-item-expandable', changeDetection: ChangeDetectionStrategy.OnPush, animations: [expandAnimation], template: "<div class=\"container\">\n  <div class=\"nav\" [class.nav_active]=\"isActive$ | async\" (click)=\"navClick()\">\n    <div class=\"nav__icon\" [style.marginLeft.px]=\"deep > 0 ? 8 + 16 * deep : 0\">\n      <prizm-icon [iconClass]=\"menuItem?.icon || 'files-folder'\"></prizm-icon>\n    </div>\n    <span class=\"nav__title\">{{ menuItem?.title }}</span>\n\n    <div class=\"nav__status\">\n      <div\n        class=\"indicator {{\n          menuItem?.indicatorStatus && !isExpanded ? 'indicator_' + menuItem?.indicatorStatus : ''\n        }}\"\n      ></div>\n    </div>\n\n    <button class=\"nav__chevron\" [class.nav__chevron_expanded]=\"isExpanded\" (click)=\"toggle($event)\">\n      <prizm-icon class=\"icon\" iconClass=\"arrows-chevron-right\"></prizm-icon>\n    </button>\n  </div>\n\n  <div class=\"expandable\" [@expand]=\"isExpanded ? 'expanded' : 'init'\">\n    <ng-container *ngFor=\"let item of menuItem?.children ?? []\">\n      <prizm-navigation-item-simple\n        *ngIf=\"!item?.children\"\n        [data]=\"item\"\n        [deep]=\"deep + 1\"\n      ></prizm-navigation-item-simple>\n\n      <prizm-navigation-item-expandable\n        *ngIf=\"$any(item?.children?.length) > 0\"\n        [data]=\"item\"\n        [deep]=\"deep + 1\"\n      ></prizm-navigation-item-expandable>\n    </ng-container>\n  </div>\n</div>\n", styles: [":host button{border:none;outline:none;background:transparent;cursor:pointer}:host .container .nav{height:40px;padding:0 8px;display:flex;align-items:center;background:var(--prizm-v3-background-fill-primary);border-bottom:1px solid var(--prizm-v3-background-stroke);cursor:pointer}:host .container .nav__title{margin-right:8px;font-size:14px;line-height:16px;color:var(--prizm-v3-text-icon-primary);overflow:hidden;white-space:nowrap;text-overflow:ellipsis}:host .container .nav__icon{height:16px;width:16px;margin:0 8px;display:inline-flex;align-items:center;color:var(--prizm-v3-status-info-primary-default)}:host .container .nav__chevron{height:100%;width:32px;display:inline-flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .nav__chevron .icon{transition:.3s}:host .container .nav__chevron_expanded .icon{transform:rotate(90deg)}:host .container .nav__status{height:100%;width:32px;margin-left:auto;display:inline-flex;align-items:center;justify-content:center;color:var(--prizm-v3-text-icon-tertiary)}:host .container .nav__status .indicator{height:8px;width:8px;border-radius:50%}:host .container .nav__status .indicator_info{background:var(--prizm-v3-status-info-primary-default)}:host .container .nav__status .indicator_secondary{background:var(--prizm-v3-status-none-primary-default)}:host .container .nav__status .indicator_success{background:var(--prizm-v3-status-success-primary-default)}:host .container .nav__status .indicator_warning{background:var(--prizm-v3-status-warning-primary-default)}:host .container .nav__status .indicator_danger{background:var(--prizm-v3-status-alarm-primary-default)}:host .container .nav_active{background:var(--prizm-v3-table-fill-row-active)}:host .container .nav_active .nav__icon{color:var(--prizm-v3-text-icon-primary)}:host .container .expandable{overflow:hidden}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ActiveNavigationItemService }]; }, propDecorators: { data: [{
                type: Input
            }], deep: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpem0tbmF2aWdhdGlvbi1pdGVtLWV4cGFuZGFibGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9uYXZpZ2F0aW9uL2NvbXBvbmVudHMvcHJpem0tbmF2aWdhdGlvbi1pdGVtLWV4cGFuZGFibGUvcHJpem0tbmF2aWdhdGlvbi1pdGVtLWV4cGFuZGFibGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9uYXZpZ2F0aW9uL2NvbXBvbmVudHMvcHJpem0tbmF2aWdhdGlvbi1pdGVtLWV4cGFuZGFibGUvcHJpem0tbmF2aWdhdGlvbi1pdGVtLWV4cGFuZGFibGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUM1RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBU3JELE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSxtQkFBbUI7SUFDN0UsSUFBb0IsSUFBSSxDQUFDLElBQXFCO1FBQzVDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFZRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxZQUFtQixpQkFBOEM7UUFDL0QsS0FBSyxFQUFFLENBQUM7UUFEUyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTZCO1FBYjFELGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDUixZQUFPLEdBQUcsZ0NBQWdDLENBQUM7UUFFdEQsVUFBSyxHQUFHLElBQUksZUFBZSxDQUF5QixJQUFJLENBQUMsQ0FBQztRQUMxRCxjQUFTLEdBQXdCLGFBQWEsQ0FBQztZQUNwRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVztZQUNsQyxJQUFJLENBQUMsS0FBSztTQUNYLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBUTFELENBQUM7SUFFTSxNQUFNLENBQUMsTUFBYTtRQUN6QixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDckMsQ0FBQztJQUVNLFFBQVE7UUFDYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ25DLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsR0FBRyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNyRSxDQUFDOzhHQWhDVSxzQ0FBc0M7a0dBQXRDLHNDQUFzQyx1SUNmbkQsMnpDQW9DQSw2MUVEckJhLHNDQUFzQyw4SUFGckMsQ0FBQyxlQUFlLENBQUM7OzJGQUVsQixzQ0FBc0M7a0JBUGxELFNBQVM7K0JBQ0Usa0NBQWtDLG1CQUczQix1QkFBdUIsQ0FBQyxNQUFNLGNBQ25DLENBQUMsZUFBZSxDQUFDO2tIQUdULElBQUk7c0JBQXZCLEtBQUs7Z0JBR1UsSUFBSTtzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJTmF2aWdhdGlvblRyZWUgfSBmcm9tICcuLy4uLy4uL25hdmlnYXRpb24uaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBleHBhbmRBbmltYXRpb24gfSBmcm9tICcuLi8uLi8uLi9hY2NvcmRpb24vYWNjb3JkaW9uLmFuaW1hdGlvbic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFjdGl2ZU5hdmlnYXRpb25JdGVtU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2FjdGl2ZS1uYXZpZ2F0aW9uLWl0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBQcml6bUFic3RyYWN0VGVzdElkIH0gZnJvbSAnQHByaXptLXVpL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwcml6bS1uYXZpZ2F0aW9uLWl0ZW0tZXhwYW5kYWJsZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wcml6bS1uYXZpZ2F0aW9uLWl0ZW0tZXhwYW5kYWJsZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3ByaXptLW5hdmlnYXRpb24taXRlbS1leHBhbmRhYmxlLmNvbXBvbmVudC5sZXNzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBhbmltYXRpb25zOiBbZXhwYW5kQW5pbWF0aW9uXSxcbn0pXG5leHBvcnQgY2xhc3MgUHJpem1OYXZpZ2F0aW9uSXRlbUV4cGFuZGFibGVDb21wb25lbnQgZXh0ZW5kcyBQcml6bUFic3RyYWN0VGVzdElkIHtcbiAgQElucHV0KCkgcHVibGljIHNldCBkYXRhKHRyZWU6IElOYXZpZ2F0aW9uVHJlZSkge1xuICAgIHRoaXMuZGF0YSQubmV4dCh0cmVlKTtcbiAgfVxuICBASW5wdXQoKSBwdWJsaWMgZGVlcCE6IG51bWJlcjtcblxuICBwdWJsaWMgaXNFeHBhbmRlZCA9IGZhbHNlO1xuICBvdmVycmlkZSByZWFkb25seSB0ZXN0SWRfID0gJ3VpX25hdmlnYXRpb24tLWl0ZW0tZXhwYW5kYWJsZSc7XG5cbiAgcHVibGljIGRhdGEkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxJTmF2aWdhdGlvblRyZWUgfCBudWxsPihudWxsKTtcbiAgcHVibGljIGlzQWN0aXZlJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IGNvbWJpbmVMYXRlc3QoW1xuICAgIHRoaXMuYWN0aXZlSXRlbVNlcnZpY2UuYWN0aXZlSXRlbSQsXG4gICAgdGhpcy5kYXRhJCxcbiAgXSkucGlwZShtYXAoKFthY3RpdmVJdGVtLCBkYXRhXSkgPT4gYWN0aXZlSXRlbSA9PT0gZGF0YSkpO1xuXG4gIHB1YmxpYyBnZXQgbWVudUl0ZW0oKTogSU5hdmlnYXRpb25UcmVlIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YSQuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhY3RpdmVJdGVtU2VydmljZTogQWN0aXZlTmF2aWdhdGlvbkl0ZW1TZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyB0b2dnbGUoJGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSAhdGhpcy5pc0V4cGFuZGVkO1xuICB9XG5cbiAgcHVibGljIG5hdkNsaWNrKCk6IHZvaWQge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEkLmdldFZhbHVlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuYWN0aXZlSXRlbVNlcnZpY2UuYWN0aXZlSXRlbSQuZ2V0VmFsdWUoKTtcbiAgICB0aGlzLmFjdGl2ZUl0ZW1TZXJ2aWNlLmFjdGl2ZUl0ZW0gPSBjdXJyZW50ID09PSBkYXRhID8gbnVsbCA6IGRhdGE7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgPGRpdiBjbGFzcz1cIm5hdlwiIFtjbGFzcy5uYXZfYWN0aXZlXT1cImlzQWN0aXZlJCB8IGFzeW5jXCIgKGNsaWNrKT1cIm5hdkNsaWNrKClcIj5cbiAgICA8ZGl2IGNsYXNzPVwibmF2X19pY29uXCIgW3N0eWxlLm1hcmdpbkxlZnQucHhdPVwiZGVlcCA+IDAgPyA4ICsgMTYgKiBkZWVwIDogMFwiPlxuICAgICAgPHByaXptLWljb24gW2ljb25DbGFzc109XCJtZW51SXRlbT8uaWNvbiB8fCAnZmlsZXMtZm9sZGVyJ1wiPjwvcHJpem0taWNvbj5cbiAgICA8L2Rpdj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdl9fdGl0bGVcIj57eyBtZW51SXRlbT8udGl0bGUgfX08L3NwYW4+XG5cbiAgICA8ZGl2IGNsYXNzPVwibmF2X19zdGF0dXNcIj5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3M9XCJpbmRpY2F0b3Ige3tcbiAgICAgICAgICBtZW51SXRlbT8uaW5kaWNhdG9yU3RhdHVzICYmICFpc0V4cGFuZGVkID8gJ2luZGljYXRvcl8nICsgbWVudUl0ZW0/LmluZGljYXRvclN0YXR1cyA6ICcnXG4gICAgICAgIH19XCJcbiAgICAgID48L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxidXR0b24gY2xhc3M9XCJuYXZfX2NoZXZyb25cIiBbY2xhc3MubmF2X19jaGV2cm9uX2V4cGFuZGVkXT1cImlzRXhwYW5kZWRcIiAoY2xpY2spPVwidG9nZ2xlKCRldmVudClcIj5cbiAgICAgIDxwcml6bS1pY29uIGNsYXNzPVwiaWNvblwiIGljb25DbGFzcz1cImFycm93cy1jaGV2cm9uLXJpZ2h0XCI+PC9wcml6bS1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiZXhwYW5kYWJsZVwiIFtAZXhwYW5kXT1cImlzRXhwYW5kZWQgPyAnZXhwYW5kZWQnIDogJ2luaXQnXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgaXRlbSBvZiBtZW51SXRlbT8uY2hpbGRyZW4gPz8gW11cIj5cbiAgICAgIDxwcml6bS1uYXZpZ2F0aW9uLWl0ZW0tc2ltcGxlXG4gICAgICAgICpuZ0lmPVwiIWl0ZW0/LmNoaWxkcmVuXCJcbiAgICAgICAgW2RhdGFdPVwiaXRlbVwiXG4gICAgICAgIFtkZWVwXT1cImRlZXAgKyAxXCJcbiAgICAgID48L3ByaXptLW5hdmlnYXRpb24taXRlbS1zaW1wbGU+XG5cbiAgICAgIDxwcml6bS1uYXZpZ2F0aW9uLWl0ZW0tZXhwYW5kYWJsZVxuICAgICAgICAqbmdJZj1cIiRhbnkoaXRlbT8uY2hpbGRyZW4/Lmxlbmd0aCkgPiAwXCJcbiAgICAgICAgW2RhdGFdPVwiaXRlbVwiXG4gICAgICAgIFtkZWVwXT1cImRlZXAgKyAxXCJcbiAgICAgID48L3ByaXptLW5hdmlnYXRpb24taXRlbS1leHBhbmRhYmxlPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19