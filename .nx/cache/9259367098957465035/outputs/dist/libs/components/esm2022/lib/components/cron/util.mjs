import { PrizmCronUiDayType } from './model';
import { PRIZM_CRON_UI_DAYS_OF_WEEK_CRON_KEYS } from './const';
import { prizmGetNumberWithZero } from '@prizm-ui/core';
import { PrizmInputCarouselArrayContent } from '../input/carousel';
export function getArrWithStringNumbers(length, start = 1, withZero = false) {
    return Array.from({ length }, (_, i) => {
        const sum = i + start;
        const result = withZero ? prizmGetNumberWithZero(sum) : sum;
        return result + '';
    });
}
export function getCarousel(length, start = 1) {
    return new PrizmInputCarouselArrayContent(getArrWithStringNumbers(length, start), (item, el) => item === el);
}
export function getArrWithWeekNumber() {
    return ['2', '3', '4', '5', '6', '7', '1'];
}
export function getCarouselWeek() {
    return new PrizmInputCarouselArrayContent(getArrWithWeekNumber(), (item, el) => item === el);
}
export function prizmConvertDayToType(day, dayOfWeek) {
    if (day === '*')
        return PrizmCronUiDayType.every;
    else if (day === '?') {
        if (dayOfWeek === '*')
            return PrizmCronUiDayType.every;
        if (dayOfWeek.includes('/'))
            return PrizmCronUiDayType.afterDayOfWeek;
        else if (dayOfWeek.endsWith('L'))
            return PrizmCronUiDayType.lastChosenDayOfWeek;
        else if (dayOfWeek.includes('#'))
            return PrizmCronUiDayType.onTheChosenDayOfWeek;
        else if (PRIZM_CRON_UI_DAYS_OF_WEEK_CRON_KEYS.find(a => dayOfWeek.includes(a)))
            return PrizmCronUiDayType.specifiedDayOfWeek;
    }
    else if (day.includes('/')) {
        return PrizmCronUiDayType.afterDayOfMonth;
    }
    else if (day.startsWith('L-')) {
        return PrizmCronUiDayType.lastChosenDaysOfMonth;
    }
    else if (day === 'L') {
        return PrizmCronUiDayType.lastDayOfMonth;
    }
    else if (day === 'LW') {
        return PrizmCronUiDayType.lastWeekDayOfMonth;
    }
    else if (day.includes('-')) {
        return PrizmCronUiDayType.between;
    }
    else if (day.endsWith('W')) {
        return PrizmCronUiDayType.nearestWeekDayToTheChosenDayOfMonth;
    }
    return PrizmCronUiDayType.specifiedDayOfMonth;
}
/**
 * Определяет, может ли элемент списка Cron отобразиться на основе переданных элементов и проверяемого элемента.
 *
 * @param {unknown[]} items - Массив элементов, которые могут быть отображены.
 * @param {unknown} item - Элемент, который необходимо проверить на возможность отображения.
 * @returns {boolean} Возвращает true, если список элементов пуст и проверяемый элемент содержится в нем, иначе false.
 */
export function canShowCronListItem(items, item) {
    return !items.length || items.includes(item);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvY3Jvbi91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkUsTUFBTSxVQUFVLHVCQUF1QixDQUFDLE1BQWMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxLQUFLO0lBQ2pGLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDdEIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQzVELE9BQU8sTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWMsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNuRCxPQUFPLElBQUksOEJBQThCLENBQ3ZDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFDdEMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUMxQixDQUFDO0FBQ0osQ0FBQztBQUNELE1BQU0sVUFBVSxvQkFBb0I7SUFDbEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZTtJQUM3QixPQUFPLElBQUksOEJBQThCLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEdBQVcsRUFBRSxTQUFpQjtJQUNsRSxJQUFJLEdBQUcsS0FBSyxHQUFHO1FBQUUsT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7U0FDNUMsSUFBSSxHQUFHLEtBQUssR0FBRyxFQUFFO1FBQ3BCLElBQUksU0FBUyxLQUFLLEdBQUc7WUFBRSxPQUFPLGtCQUFrQixDQUFDLEtBQUssQ0FBQztRQUN2RCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxrQkFBa0IsQ0FBQyxjQUFjLENBQUM7YUFDakUsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sa0JBQWtCLENBQUMsbUJBQW1CLENBQUM7YUFDM0UsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLE9BQU8sa0JBQWtCLENBQUMsb0JBQW9CLENBQUM7YUFDNUUsSUFBSSxvQ0FBb0MsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLE9BQU8sa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7S0FDaEQ7U0FBTSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDNUIsT0FBTyxrQkFBa0IsQ0FBQyxlQUFlLENBQUM7S0FDM0M7U0FBTSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0IsT0FBTyxrQkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQztLQUNqRDtTQUFNLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRTtRQUN0QixPQUFPLGtCQUFrQixDQUFDLGNBQWMsQ0FBQztLQUMxQztTQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtRQUN2QixPQUFPLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO0tBQzlDO1NBQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzVCLE9BQU8sa0JBQWtCLENBQUMsT0FBTyxDQUFDO0tBQ25DO1NBQU0sSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzVCLE9BQU8sa0JBQWtCLENBQUMsbUNBQW1DLENBQUM7S0FDL0Q7SUFFRCxPQUFPLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDO0FBQ2hELENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsS0FBZ0IsRUFBRSxJQUFhO0lBQ2pFLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXptQ3JvblVpRGF5VHlwZSB9IGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHsgUFJJWk1fQ1JPTl9VSV9EQVlTX09GX1dFRUtfQ1JPTl9LRVlTIH0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQgeyBwcml6bUdldE51bWJlcldpdGhaZXJvIH0gZnJvbSAnQHByaXptLXVpL2NvcmUnO1xuaW1wb3J0IHsgUHJpem1JbnB1dENhcm91c2VsQXJyYXlDb250ZW50IH0gZnJvbSAnLi4vaW5wdXQvY2Fyb3VzZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJyV2l0aFN0cmluZ051bWJlcnMobGVuZ3RoOiBudW1iZXIsIHN0YXJ0ID0gMSwgd2l0aFplcm8gPSBmYWxzZSk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oeyBsZW5ndGggfSwgKF8sIGkpID0+IHtcbiAgICBjb25zdCBzdW0gPSBpICsgc3RhcnQ7XG4gICAgY29uc3QgcmVzdWx0ID0gd2l0aFplcm8gPyBwcml6bUdldE51bWJlcldpdGhaZXJvKHN1bSkgOiBzdW07XG4gICAgcmV0dXJuIHJlc3VsdCArICcnO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhcm91c2VsKGxlbmd0aDogbnVtYmVyLCBzdGFydCA9IDEpOiBQcml6bUlucHV0Q2Fyb3VzZWxBcnJheUNvbnRlbnQ8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJpem1JbnB1dENhcm91c2VsQXJyYXlDb250ZW50KFxuICAgIGdldEFycldpdGhTdHJpbmdOdW1iZXJzKGxlbmd0aCwgc3RhcnQpLFxuICAgIChpdGVtLCBlbCkgPT4gaXRlbSA9PT0gZWxcbiAgKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcnJXaXRoV2Vla051bWJlcigpOiBzdHJpbmdbXSB7XG4gIHJldHVybiBbJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzEnXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhcm91c2VsV2VlaygpOiBQcml6bUlucHV0Q2Fyb3VzZWxBcnJheUNvbnRlbnQ8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgUHJpem1JbnB1dENhcm91c2VsQXJyYXlDb250ZW50KGdldEFycldpdGhXZWVrTnVtYmVyKCksIChpdGVtLCBlbCkgPT4gaXRlbSA9PT0gZWwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpem1Db252ZXJ0RGF5VG9UeXBlKGRheTogc3RyaW5nLCBkYXlPZldlZWs6IHN0cmluZyk6IFByaXptQ3JvblVpRGF5VHlwZSB7XG4gIGlmIChkYXkgPT09ICcqJykgcmV0dXJuIFByaXptQ3JvblVpRGF5VHlwZS5ldmVyeTtcbiAgZWxzZSBpZiAoZGF5ID09PSAnPycpIHtcbiAgICBpZiAoZGF5T2ZXZWVrID09PSAnKicpIHJldHVybiBQcml6bUNyb25VaURheVR5cGUuZXZlcnk7XG4gICAgaWYgKGRheU9mV2Vlay5pbmNsdWRlcygnLycpKSByZXR1cm4gUHJpem1Dcm9uVWlEYXlUeXBlLmFmdGVyRGF5T2ZXZWVrO1xuICAgIGVsc2UgaWYgKGRheU9mV2Vlay5lbmRzV2l0aCgnTCcpKSByZXR1cm4gUHJpem1Dcm9uVWlEYXlUeXBlLmxhc3RDaG9zZW5EYXlPZldlZWs7XG4gICAgZWxzZSBpZiAoZGF5T2ZXZWVrLmluY2x1ZGVzKCcjJykpIHJldHVybiBQcml6bUNyb25VaURheVR5cGUub25UaGVDaG9zZW5EYXlPZldlZWs7XG4gICAgZWxzZSBpZiAoUFJJWk1fQ1JPTl9VSV9EQVlTX09GX1dFRUtfQ1JPTl9LRVlTLmZpbmQoYSA9PiBkYXlPZldlZWsuaW5jbHVkZXMoYSkpKVxuICAgICAgcmV0dXJuIFByaXptQ3JvblVpRGF5VHlwZS5zcGVjaWZpZWREYXlPZldlZWs7XG4gIH0gZWxzZSBpZiAoZGF5LmluY2x1ZGVzKCcvJykpIHtcbiAgICByZXR1cm4gUHJpem1Dcm9uVWlEYXlUeXBlLmFmdGVyRGF5T2ZNb250aDtcbiAgfSBlbHNlIGlmIChkYXkuc3RhcnRzV2l0aCgnTC0nKSkge1xuICAgIHJldHVybiBQcml6bUNyb25VaURheVR5cGUubGFzdENob3NlbkRheXNPZk1vbnRoO1xuICB9IGVsc2UgaWYgKGRheSA9PT0gJ0wnKSB7XG4gICAgcmV0dXJuIFByaXptQ3JvblVpRGF5VHlwZS5sYXN0RGF5T2ZNb250aDtcbiAgfSBlbHNlIGlmIChkYXkgPT09ICdMVycpIHtcbiAgICByZXR1cm4gUHJpem1Dcm9uVWlEYXlUeXBlLmxhc3RXZWVrRGF5T2ZNb250aDtcbiAgfSBlbHNlIGlmIChkYXkuaW5jbHVkZXMoJy0nKSkge1xuICAgIHJldHVybiBQcml6bUNyb25VaURheVR5cGUuYmV0d2VlbjtcbiAgfSBlbHNlIGlmIChkYXkuZW5kc1dpdGgoJ1cnKSkge1xuICAgIHJldHVybiBQcml6bUNyb25VaURheVR5cGUubmVhcmVzdFdlZWtEYXlUb1RoZUNob3NlbkRheU9mTW9udGg7XG4gIH1cblxuICByZXR1cm4gUHJpem1Dcm9uVWlEYXlUeXBlLnNwZWNpZmllZERheU9mTW9udGg7XG59XG5cbi8qKlxuICog0J7Qv9GA0LXQtNC10LvRj9C10YIsINC80L7QttC10YIg0LvQuCDRjdC70LXQvNC10L3RgiDRgdC/0LjRgdC60LAgQ3JvbiDQvtGC0L7QsdGA0LDQt9C40YLRjNGB0Y8g0L3QsCDQvtGB0L3QvtCy0LUg0L/QtdGA0LXQtNCw0L3QvdGL0YUg0Y3Qu9C10LzQtdC90YLQvtCyINC4INC/0YDQvtCy0LXRgNGP0LXQvNC+0LPQviDRjdC70LXQvNC10L3RgtCwLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBpdGVtcyAtINCc0LDRgdGB0LjQsiDRjdC70LXQvNC10L3RgtC+0LIsINC60L7RgtC+0YDRi9C1INC80L7Qs9GD0YIg0LHRi9GC0Ywg0L7RgtC+0LHRgNCw0LbQtdC90YsuXG4gKiBAcGFyYW0ge3Vua25vd259IGl0ZW0gLSDQrdC70LXQvNC10L3Rgiwg0LrQvtGC0L7RgNGL0Lkg0L3QtdC+0LHRhdC+0LTQuNC80L4g0L/RgNC+0LLQtdGA0LjRgtGMINC90LAg0LLQvtC30LzQvtC20L3QvtGB0YLRjCDQvtGC0L7QsdGA0LDQttC10L3QuNGPLlxuICogQHJldHVybnMge2Jvb2xlYW59INCS0L7Qt9Cy0YDQsNGJ0LDQtdGCIHRydWUsINC10YHQu9C4INGB0L/QuNGB0L7QuiDRjdC70LXQvNC10L3RgtC+0LIg0L/Rg9GB0YIg0Lgg0L/RgNC+0LLQtdGA0Y/QtdC80YvQuSDRjdC70LXQvNC10L3RgiDRgdC+0LTQtdGA0LbQuNGC0YHRjyDQsiDQvdC10LwsINC40L3QsNGH0LUgZmFsc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYW5TaG93Q3Jvbkxpc3RJdGVtKGl0ZW1zOiB1bmtub3duW10sIGl0ZW06IHVua25vd24pOiBib29sZWFuIHtcbiAgcmV0dXJuICFpdGVtcy5sZW5ndGggfHwgaXRlbXMuaW5jbHVkZXMoaXRlbSk7XG59XG4iXX0=