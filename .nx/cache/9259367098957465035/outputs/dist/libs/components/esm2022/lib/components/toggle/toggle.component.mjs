import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { PRIZM_TOGGLE_OPTIONS } from './toggle-options';
import { prizmDefaultProp } from '@prizm-ui/core';
import { AbstractPrizmControl } from '../../abstract/control';
import { prizmIsNativeFocused } from '../../util';
import { CommonModule } from '@angular/common';
import { PolymorphModule, PrizmCheckedModule, PrizmFocusableModule, PrizmFocusedModule, PrizmFocusVisibleModule, PrizmHoveredModule, PrizmPressedModule, PrizmWrapperModule, } from '../../directives';
import { PrizmLoaderModule } from '../loader';
import { PrizmIconModule } from '../icon';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../directives/focused/focused.directive";
import * as i3 from "../../directives/focusable/focusable.directive";
import * as i4 from "../../directives/focus-visible/focus-visible.directive";
import * as i5 from "../../directives/hovered/hovered.directive";
import * as i6 from "../../directives/pressed/pressed.directive";
import * as i7 from "../../directives/checked/checked.directive";
import * as i8 from "../../directives/wrapper/wrapper.component";
import * as i9 from "../loader/loader.component";
import * as i10 from "../../directives/polymorph/directives/outlet";
import * as i11 from "../icon/icon.component";
import * as i12 from "@angular/forms";
export class PrizmToggleComponent extends AbstractPrizmControl {
    constructor(control, changeDetectorRef, options) {
        super(control, changeDetectorRef);
        this.options = options;
        this.singleColor = this.options.singleColor;
        this.iconOn = this.options.icons.toggleOn;
        this.iconOff = this.options.icons.toggleOff;
        this.showLoader = false;
        this.size = this.options.size;
        this.testId_ = 'ui_checkbox';
    }
    get nativeFocusableElement() {
        return this.focusableElement ? this.focusableElement.nativeElement : null;
    }
    get focused() {
        return prizmIsNativeFocused(this.nativeFocusableElement);
    }
    get appearance() {
        return this.singleColor || this.checked ? 'primary' : 'secondary';
    }
    get sizeM() {
        return this.size === 'm';
    }
    get checked() {
        return this.value;
    }
    get loaderSize() {
        return this.sizeM ? 'xs' : 's';
    }
    onChecked(checked) {
        this.updateValue(checked);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onHovered(hovered) {
        this.updateHovered(hovered);
    }
    onPressed(pressed) {
        this.updatePressed(pressed);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
    getFallbackValue() {
        return false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmToggleComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: PRIZM_TOGGLE_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmToggleComponent, isStandalone: true, selector: "prizm-toggle", inputs: { singleColor: "singleColor", iconOn: "iconOn", iconOff: "iconOff", showLoader: "showLoader", size: "size" }, host: { properties: { "class._loading": "this.showLoader", "attr.data-size": "this.size", "class._checked": "this.checked" } }, viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<prizm-wrapper\n  [attr.checked]=\"value\"\n  [appearance]=\"appearance\"\n  [readOnly]=\"readOnly\"\n  [disabled]=\"computedDisabled\"\n  [focused]=\"computedFocusVisible\"\n  [hovered]=\"computedHovered\"\n  [pressed]=\"computedPressed\"\n  [invalid]=\"computedInvalid\"\n  pseudoState=\"toggle\"\n>\n  <prizm-loader\n    class=\"z-loader\"\n    *ngIf=\"showLoader\"\n    [size]=\"loaderSize\"\n    [inheritColor]=\"true\"\n    [showLoader]=\"showLoader\"\n  ></prizm-loader>\n  <div class=\"toggle\">\n    <span class=\"icon-wrapper\">\n      <ng-container *polymorphOutlet=\"iconOn as content; context: { $implicit: size }\">\n        <prizm-icon class=\"icon\" *ngIf=\"content\" [iconClass]=\"$any(content)\" size=\"16\"></prizm-icon>\n      </ng-container>\n    </span>\n    <div class=\"circle\"></div>\n    <span class=\"icon-wrapper\">\n      <ng-container *polymorphOutlet=\"iconOff as content; context: { $implicit: size }\">\n        <prizm-icon class=\"icon\" *ngIf=\"content\" [iconClass]=\"$any(content)\" size=\"16\"></prizm-icon>\n      </ng-container>\n    </span>\n  </div>\n  <input\n    class=\"checkbox\"\n    #focusableElement\n    [attr.aria-checked]=\"value\"\n    [disabled]=\"disabled\"\n    [prizmChecked]=\"checked\"\n    [prizmFocusable]=\"focusable\"\n    (prizmCheckedChange)=\"onChecked($event)\"\n    (prizmFocusedChange)=\"onFocused($event)\"\n    (prizmHoveredChange)=\"onHovered($event)\"\n    (prizmPressedChange)=\"onPressed($event)\"\n    (prizmFocusVisibleChange)=\"onFocusVisible($event)\"\n    type=\"checkbox\"\n    role=\"switch\"\n  />\n</prizm-wrapper>\n", styles: [":host{position:relative;display:inline-block;vertical-align:middle;border-radius:16px;outline:1px solid transparent}:host prizm-wrapper{overflow:hidden;border-radius:16px;background-color:var(--prizm-v3-form-active)}:host:hover:not(._disabled) prizm-wrapper{background-color:var(--prizm-v3-form-active-hover);transition:.3s}:host:focus-within:not(._disabled){box-shadow:0 0 0 2px var(--prizm-v3-background-stroke-focus);transition:.3s}:host:not(._checked){outline:1px solid var(--prizm-v3-form-stroke-default)}:host:not(._checked) prizm-wrapper{background-color:var(--prizm-v3-form-fill-default)}:host:not(._checked) .icon{color:var(--prizm-v3-text-icon-tertiary)}:host:not(._checked):hover:not(._disabled){outline:1px solid var(--prizm-v3-form-stroke-hover)}:host:not(._checked):hover:not(._disabled) prizm-wrapper{background-color:var(--prizm-v3-form-fill-default)}:host:not(._checked):hover:not(._disabled) .circle{border-color:var(--prizm-v3-form-stroke-hover)}:host:not(._checked) .z-loader{color:var(--prizm-v3-text-icon-tertiary)}:host._disabled{opacity:.4}:host._disabled:not(._checked) .icon{color:var(--prizm-v3-text-icon-disable)}:host._disabled._checked prizm-wrapper{background-color:var(--prizm-v3-form-active-disable)}:host._disabled prizm-wrapper{background-color:var(--prizm-v3-form-fill-disable);cursor:not-allowed}:host[data-size=m]{width:32px;height:16px}:host[data-size=l]{width:40px;height:20px}.checkbox{padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.checkbox:-webkit-autofill,.checkbox:-webkit-autofill:hover,.checkbox:-webkit-autofill:focus{border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:black!important;border-color:#fff5c0;-webkit-box-shadow:0 0 0 100rem #fff5c0ff inset!important}:host._disabled .checkbox{pointer-events:inherit;cursor:inherit}.toggle{transition-property:transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}:host[data-size=m] .toggle{width:48px;height:16px;transform:translate(-16px)}:host[data-size=l] .toggle{width:60px;height:20px;transform:translate(-20px)}:host._checked .toggle{transform:translate(0)}.circle{flex-shrink:0;border-radius:100%;background-color:var(--prizm-v3-text-icon-exception);border:1px solid var(--prizm-v3-form-stroke-default)}:host._checked .circle{background-color:var(--prizm-v3-text-icon-exception);border-color:var(--prizm-v3-button-primary-solid-default)}:host[data-size=m] .circle{width:16px;height:16px}:host[data-size=l] .circle{width:20px;height:20px}.z-loader{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default;background:inherit;z-index:1;color:var(--prizm-v3-text-icon-exception)}.icon-wrapper{display:flex;overflow:hidden;align-items:center;justify-content:center}:host[data-size=m] .icon-wrapper{width:16px;height:16px}:host[data-size=l] .icon-wrapper{width:24px;height:24px}.icon-wrapper>*{max-width:100%;max-height:100%}:host[data-size=m] .icon-wrapper>*{transform:scale(.75)}:host[data-size=l] .icon-wrapper>*{margin:0 .125rem}.icon{opacity:.8;display:flex;align-items:center;justify-content:center}:host:hover .icon{opacity:1}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: PrizmFocusedModule }, { kind: "directive", type: i2.PrizmFocusedDirective, selector: "[prizmFocusedChange]", outputs: ["prizmFocusedChange"] }, { kind: "ngmodule", type: PrizmFocusableModule }, { kind: "directive", type: i3.PrizmFocusableDirective, selector: "[prizmFocusable]", inputs: ["prizmFocusable"] }, { kind: "ngmodule", type: PrizmFocusVisibleModule }, { kind: "directive", type: i4.PrizmFocusVisibleDirective, selector: "[prizmFocusVisibleChange]", outputs: ["prizmFocusVisibleChange"] }, { kind: "ngmodule", type: PrizmHoveredModule }, { kind: "directive", type: i5.PrizmHoveredDirective, selector: "[prizmHoveredChange]", outputs: ["prizmHoveredChange"] }, { kind: "ngmodule", type: PrizmPressedModule }, { kind: "directive", type: i6.PrizmPressedDirective, selector: "[prizmPressedChange]", outputs: ["prizmPressedChange"] }, { kind: "ngmodule", type: PrizmCheckedModule }, { kind: "directive", type: i7.PrizmCheckedDirective, selector: "input[prizmChecked], input[prizmCheckedChange]", inputs: ["prizmChecked"], outputs: ["prizmCheckedChange"] }, { kind: "ngmodule", type: PrizmWrapperModule }, { kind: "component", type: i8.PrizmWrapperComponent, selector: "prizm-wrapper", inputs: ["disabled", "readOnly", "pseudoState", "hovered", "pressed", "focused", "invalid", "appearance"] }, { kind: "ngmodule", type: PrizmLoaderModule }, { kind: "component", type: i9.PrizmLoaderComponent, selector: "prizm-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { kind: "ngmodule", type: PolymorphModule }, { kind: "directive", type: i10.PolymorphOutletDirective, selector: "[polymorphOutlet]", inputs: ["polymorphOutlet", "polymorphOutletContext", "polymorphOutletInjector"] }, { kind: "ngmodule", type: PrizmIconModule }, { kind: "component", type: i11.PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmToggleComponent.prototype, "singleColor", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmToggleComponent.prototype, "iconOn", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmToggleComponent.prototype, "iconOff", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmToggleComponent.prototype, "showLoader", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", String)
], PrizmToggleComponent.prototype, "size", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-toggle', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        CommonModule,
                        PrizmFocusedModule,
                        PrizmFocusableModule,
                        PrizmFocusVisibleModule,
                        PrizmHoveredModule,
                        PrizmPressedModule,
                        PrizmCheckedModule,
                        PrizmWrapperModule,
                        PrizmLoaderModule,
                        PolymorphModule,
                        PrizmIconModule,
                    ], template: "<prizm-wrapper\n  [attr.checked]=\"value\"\n  [appearance]=\"appearance\"\n  [readOnly]=\"readOnly\"\n  [disabled]=\"computedDisabled\"\n  [focused]=\"computedFocusVisible\"\n  [hovered]=\"computedHovered\"\n  [pressed]=\"computedPressed\"\n  [invalid]=\"computedInvalid\"\n  pseudoState=\"toggle\"\n>\n  <prizm-loader\n    class=\"z-loader\"\n    *ngIf=\"showLoader\"\n    [size]=\"loaderSize\"\n    [inheritColor]=\"true\"\n    [showLoader]=\"showLoader\"\n  ></prizm-loader>\n  <div class=\"toggle\">\n    <span class=\"icon-wrapper\">\n      <ng-container *polymorphOutlet=\"iconOn as content; context: { $implicit: size }\">\n        <prizm-icon class=\"icon\" *ngIf=\"content\" [iconClass]=\"$any(content)\" size=\"16\"></prizm-icon>\n      </ng-container>\n    </span>\n    <div class=\"circle\"></div>\n    <span class=\"icon-wrapper\">\n      <ng-container *polymorphOutlet=\"iconOff as content; context: { $implicit: size }\">\n        <prizm-icon class=\"icon\" *ngIf=\"content\" [iconClass]=\"$any(content)\" size=\"16\"></prizm-icon>\n      </ng-container>\n    </span>\n  </div>\n  <input\n    class=\"checkbox\"\n    #focusableElement\n    [attr.aria-checked]=\"value\"\n    [disabled]=\"disabled\"\n    [prizmChecked]=\"checked\"\n    [prizmFocusable]=\"focusable\"\n    (prizmCheckedChange)=\"onChecked($event)\"\n    (prizmFocusedChange)=\"onFocused($event)\"\n    (prizmHoveredChange)=\"onHovered($event)\"\n    (prizmPressedChange)=\"onPressed($event)\"\n    (prizmFocusVisibleChange)=\"onFocusVisible($event)\"\n    type=\"checkbox\"\n    role=\"switch\"\n  />\n</prizm-wrapper>\n", styles: [":host{position:relative;display:inline-block;vertical-align:middle;border-radius:16px;outline:1px solid transparent}:host prizm-wrapper{overflow:hidden;border-radius:16px;background-color:var(--prizm-v3-form-active)}:host:hover:not(._disabled) prizm-wrapper{background-color:var(--prizm-v3-form-active-hover);transition:.3s}:host:focus-within:not(._disabled){box-shadow:0 0 0 2px var(--prizm-v3-background-stroke-focus);transition:.3s}:host:not(._checked){outline:1px solid var(--prizm-v3-form-stroke-default)}:host:not(._checked) prizm-wrapper{background-color:var(--prizm-v3-form-fill-default)}:host:not(._checked) .icon{color:var(--prizm-v3-text-icon-tertiary)}:host:not(._checked):hover:not(._disabled){outline:1px solid var(--prizm-v3-form-stroke-hover)}:host:not(._checked):hover:not(._disabled) prizm-wrapper{background-color:var(--prizm-v3-form-fill-default)}:host:not(._checked):hover:not(._disabled) .circle{border-color:var(--prizm-v3-form-stroke-hover)}:host:not(._checked) .z-loader{color:var(--prizm-v3-text-icon-tertiary)}:host._disabled{opacity:.4}:host._disabled:not(._checked) .icon{color:var(--prizm-v3-text-icon-disable)}:host._disabled._checked prizm-wrapper{background-color:var(--prizm-v3-form-active-disable)}:host._disabled prizm-wrapper{background-color:var(--prizm-v3-form-fill-disable);cursor:not-allowed}:host[data-size=m]{width:32px;height:16px}:host[data-size=l]{width:40px;height:20px}.checkbox{padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.checkbox:-webkit-autofill,.checkbox:-webkit-autofill:hover,.checkbox:-webkit-autofill:focus{border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:black!important;border-color:#fff5c0;-webkit-box-shadow:0 0 0 100rem #fff5c0ff inset!important}:host._disabled .checkbox{pointer-events:inherit;cursor:inherit}.toggle{transition-property:transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}:host[data-size=m] .toggle{width:48px;height:16px;transform:translate(-16px)}:host[data-size=l] .toggle{width:60px;height:20px;transform:translate(-20px)}:host._checked .toggle{transform:translate(0)}.circle{flex-shrink:0;border-radius:100%;background-color:var(--prizm-v3-text-icon-exception);border:1px solid var(--prizm-v3-form-stroke-default)}:host._checked .circle{background-color:var(--prizm-v3-text-icon-exception);border-color:var(--prizm-v3-button-primary-solid-default)}:host[data-size=m] .circle{width:16px;height:16px}:host[data-size=l] .circle{width:20px;height:20px}.z-loader{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default;background:inherit;z-index:1;color:var(--prizm-v3-text-icon-exception)}.icon-wrapper{display:flex;overflow:hidden;align-items:center;justify-content:center}:host[data-size=m] .icon-wrapper{width:16px;height:16px}:host[data-size=l] .icon-wrapper{width:24px;height:24px}.icon-wrapper>*{max-width:100%;max-height:100%}:host[data-size=m] .icon-wrapper>*{transform:scale(.75)}:host[data-size=l] .icon-wrapper>*{margin:0 .125rem}.icon{opacity:.8;display:flex;align-items:center;justify-content:center}:host:hover .icon{opacity:1}\n"] }]
        }], ctorParameters: function () { return [{ type: i12.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRIZM_TOGGLE_OPTIONS]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], singleColor: [{
                type: Input
            }], iconOn: [{
                type: Input
            }], iconOff: [{
                type: Input
            }], showLoader: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._loading']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], checked: [{
                type: HostBinding,
                args: ['class._checked']
            }] } });
//# sourceMappingURL=data:application/json;base64,