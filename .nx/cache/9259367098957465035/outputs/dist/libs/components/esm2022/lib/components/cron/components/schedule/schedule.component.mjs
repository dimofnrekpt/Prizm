import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, Input, Output, TemplateRef, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../../directives/polymorph/directives/outlet";
export class PrizmCronScheduleComponent {
    constructor() {
        this.items = [];
        this.selected = [];
        this.selectedChange = new EventEmitter();
    }
    isSelected(item) {
        return this.selected.indexOf(item.key) !== -1;
    }
    select(item) {
        const isSelected = this.isSelected(item);
        if (isSelected) {
            this.selected = this.selected.filter(i => i !== item.key);
        }
        else {
            this.selected.push(item.key);
        }
        this.emit();
    }
    emit() {
        this.selectedChange.emit((this.selected = this.selected.length ? this.selected : [this.items[0].key]));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmCronScheduleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmCronScheduleComponent, selector: "prizm-cron-schedule", inputs: { items: "items", selected: "selected" }, outputs: { selectedChange: "selectedChange" }, queries: [{ propertyName: "template", first: true, predicate: ["content"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<div class=\"block\">\n  <div\n    class=\"item prizm-font-btn-links-14\"\n    *ngFor=\"let item of items; let idx = index\"\n    [class.selected]=\"isSelected(item)\"\n    (click)=\"select(item)\"\n  >\n    <ng-container *polymorphOutlet=\"template; context: { item: item, idx: idx }\">\n      {{ item.value }}\n    </ng-container>\n  </div>\n</div>\n", styles: [".block{display:grid;grid-template-columns:repeat(8,1fr);gap:6px}.block .item{min-width:40px;height:40px;display:flex;border-radius:2px;align-items:center;cursor:pointer;justify-content:center;padding:0 4px;color:var(--prizm-v3-text-icon-secondary)}.block .item.item.selected{background-color:var(--prizm-v3-button-primary-solid-default);color:var(--prizm-v3-text-icon-exception)}.block .item:hover{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover);border:1px solid var(--prizm-v3-button-primary-solid-hover)}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.PolymorphOutletDirective, selector: "[polymorphOutlet]", inputs: ["polymorphOutlet", "polymorphOutletContext", "polymorphOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmCronScheduleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-cron-schedule', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"block\">\n  <div\n    class=\"item prizm-font-btn-links-14\"\n    *ngFor=\"let item of items; let idx = index\"\n    [class.selected]=\"isSelected(item)\"\n    (click)=\"select(item)\"\n  >\n    <ng-container *polymorphOutlet=\"template; context: { item: item, idx: idx }\">\n      {{ item.value }}\n    </ng-container>\n  </div>\n</div>\n", styles: [".block{display:grid;grid-template-columns:repeat(8,1fr);gap:6px}.block .item{min-width:40px;height:40px;display:flex;border-radius:2px;align-items:center;cursor:pointer;justify-content:center;padding:0 4px;color:var(--prizm-v3-text-icon-secondary)}.block .item.item.selected{background-color:var(--prizm-v3-button-primary-solid-default);color:var(--prizm-v3-text-icon-exception)}.block .item:hover{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover);border:1px solid var(--prizm-v3-button-primary-solid-hover)}\n"] }]
        }], propDecorators: { items: [{
                type: Input
            }], selected: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], template: [{
                type: ContentChild,
                args: ['content', { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9jcm9uL2NvbXBvbmVudHMvc2NoZWR1bGUvc2NoZWR1bGUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy9jcm9uL2NvbXBvbmVudHMvc2NoZWR1bGUvc2NoZWR1bGUuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxFQUNOLFdBQVcsR0FDWixNQUFNLGVBQWUsQ0FBQzs7OztBQVV2QixNQUFNLE9BQU8sMEJBQTBCO0lBTnZDO1FBUVMsVUFBSyxHQUEwQixFQUFFLENBQUM7UUFHbEMsYUFBUSxHQUFhLEVBQUUsQ0FBQztRQUd4QixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFZLENBQUM7S0F3QnREO0lBakJRLFVBQVUsQ0FBQyxJQUF5QjtRQUN6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQXlCO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekcsQ0FBQzs4R0EvQlUsMEJBQTBCO2tHQUExQiwwQkFBMEIsd09BVUosV0FBVyw2QkM3QjlDLGtXQVlBOzsyRkRPYSwwQkFBMEI7a0JBTnRDLFNBQVM7K0JBQ0UscUJBQXFCLG1CQUdkLHVCQUF1QixDQUFDLE1BQU07OEJBSXhDLEtBQUs7c0JBRFgsS0FBSztnQkFJQyxRQUFRO3NCQURkLEtBQUs7Z0JBSUMsY0FBYztzQkFEcEIsTUFBTTtnQkFHeUMsUUFBUTtzQkFBdkQsWUFBWTt1QkFBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJpem1Dcm9uVWlMaXN0SXRlbSB9IGZyb20gJy4uLy4uL21vZGVsJztcbmltcG9ydCB7IFBvbHltb3JwaENvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi9kaXJlY3RpdmVzL3BvbHltb3JwaCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ByaXptLWNyb24tc2NoZWR1bGUnLFxuICBzdHlsZVVybHM6IFsnLi9zY2hlZHVsZS5jb21wb25lbnQubGVzcyddLFxuICB0ZW1wbGF0ZVVybDogJy4vc2NoZWR1bGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUHJpem1Dcm9uU2NoZWR1bGVDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBwdWJsaWMgaXRlbXM6IFByaXptQ3JvblVpTGlzdEl0ZW1bXSA9IFtdO1xuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZWxlY3RlZDogc3RyaW5nW10gPSBbXTtcblxuICBAT3V0cHV0KClcbiAgcHVibGljIHNlbGVjdGVkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmdbXT4oKTtcblxuICBAQ29udGVudENoaWxkKCdjb250ZW50JywgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KSB0ZW1wbGF0ZSE6IFBvbHltb3JwaENvbnRlbnQ8e1xuICAgIGl0ZW06IFByaXptQ3JvblVpTGlzdEl0ZW07XG4gICAgaWR4OiBudW1iZXI7XG4gIH0+O1xuXG4gIHB1YmxpYyBpc1NlbGVjdGVkKGl0ZW06IFByaXptQ3JvblVpTGlzdEl0ZW0pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3RlZC5pbmRleE9mKGl0ZW0ua2V5KSAhPT0gLTE7XG4gIH1cblxuICBwdWJsaWMgc2VsZWN0KGl0ZW06IFByaXptQ3JvblVpTGlzdEl0ZW0pOiB2b2lkIHtcbiAgICBjb25zdCBpc1NlbGVjdGVkID0gdGhpcy5pc1NlbGVjdGVkKGl0ZW0pO1xuICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZC5maWx0ZXIoaSA9PiBpICE9PSBpdGVtLmtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaChpdGVtLmtleSk7XG4gICAgfVxuICAgIHRoaXMuZW1pdCgpO1xuICB9XG5cbiAgcHVibGljIGVtaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zZWxlY3RlZENoYW5nZS5lbWl0KCh0aGlzLnNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZC5sZW5ndGggPyB0aGlzLnNlbGVjdGVkIDogW3RoaXMuaXRlbXNbMF0ua2V5XSkpO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYmxvY2tcIj5cbiAgPGRpdlxuICAgIGNsYXNzPVwiaXRlbSBwcml6bS1mb250LWJ0bi1saW5rcy0xNFwiXG4gICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpZHggPSBpbmRleFwiXG4gICAgW2NsYXNzLnNlbGVjdGVkXT1cImlzU2VsZWN0ZWQoaXRlbSlcIlxuICAgIChjbGljayk9XCJzZWxlY3QoaXRlbSlcIlxuICA+XG4gICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoT3V0bGV0PVwidGVtcGxhdGU7IGNvbnRleHQ6IHsgaXRlbTogaXRlbSwgaWR4OiBpZHggfVwiPlxuICAgICAge3sgaXRlbS52YWx1ZSB9fVxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19