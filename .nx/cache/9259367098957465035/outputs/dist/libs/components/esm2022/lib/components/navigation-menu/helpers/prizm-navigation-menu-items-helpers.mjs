export function filterItems(items, filterPredicate) {
    const getChildren = (acc, item) => {
        if (filterPredicate(item)) {
            acc.push(item);
            return acc;
        }
        if (Array.isArray(item.children)) {
            const children = item.children?.reduce((acc, item) => {
                return getChildren(acc, item);
            }, []) ?? [];
            if (children.length)
                acc.push({ ...item, children });
        }
        return acc;
    };
    return items.reduce(getChildren, []);
}
export function findItem(items, filterPredicate) {
    for (const item of items) {
        if (filterPredicate(item))
            return item;
        if (item.children) {
            const targetItem = findItem(item.children, filterPredicate);
            if (targetItem)
                return targetItem;
        }
    }
    return null;
}
export function toRubricatorItems(nodes) {
    const sortedNodes = flatItems(nodes).sort((a, b) => sortByText(a, b));
    const letters = new Set(sortedNodes.map(({ text }) => text.charAt(0).toUpperCase()));
    const rubricatorNodes = [];
    letters.forEach(letter => {
        rubricatorNodes.push({
            isRubricator: true,
            text: letter,
            children: sortedNodes.filter(({ text }) => text.charAt(0).toUpperCase() === letter),
            original: null,
            groupId: null,
            parent: null,
            icon: null,
            breadcrumbs: null,
            extraTemplate: null,
        });
    });
    return rubricatorNodes;
}
export function flatItems(items) {
    const flat = [];
    function extract(item) {
        if (item.children) {
            item.children.forEach(extract);
            flat.push(item);
        }
        else {
            flat.push(item);
        }
    }
    items.forEach(extract);
    return flat;
}
export function sortByText(a, b) {
    if (a.text > b.text)
        return 1;
    if (a.text < b.text)
        return -1;
    return 0;
}
export function traverseAllDeep(items, callback) {
    return items.forEach(item => {
        callback(item);
        if (item.children) {
            traverseAllDeep(item.children, callback);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpem0tbmF2aWdhdGlvbi1tZW51LWl0ZW1zLWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9jb21wb25lbnRzL25hdmlnYXRpb24tbWVudS9oZWxwZXJzL3ByaXptLW5hdmlnYXRpb24tbWVudS1pdGVtcy1oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sVUFBVSxXQUFXLENBQ3pCLEtBQWEsRUFDYixlQUFzQztJQUV0QyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFVLEVBQVUsRUFBRTtRQUN0RCxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN6QixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2YsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxRQUFRLEdBQ1osSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFXLEVBQUUsSUFBVSxFQUFFLEVBQUU7Z0JBQ2hELE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQVcsQ0FBQztZQUMxQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRWYsSUFBSSxRQUFRLENBQUMsTUFBTTtnQkFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUN0RDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxDQUFDO0lBRUYsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsS0FBYSxFQUNiLGVBQXNDO0lBRXRD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SCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnRlcm5hbFByaXptTmF2aWdhdGlvbk1lbnVJdGVtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCB0eXBlIFNpbXBsZUl0ZW08VCA9IGFueT4gPSB7IHRleHQ6IHN0cmluZzsgY2hpbGRyZW4/OiBUW10gfTtcblxuZXhwb3J0IHR5cGUgRmlsdGVyUHJlZGljYXRlPEl0ZW0gZXh0ZW5kcyBTaW1wbGVJdGVtPEl0ZW0+PiA9IChpdGVtOiBJdGVtKSA9PiBib29sZWFuO1xuXG5leHBvcnQgdHlwZSBNYXBwZXJQcmVkaWNhdGU8SXRlbSBleHRlbmRzIFNpbXBsZUl0ZW08SXRlbT4sIFJlc3VsdFR5cGU+ID0gKGl0ZW06IEl0ZW0pID0+IFJlc3VsdFR5cGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJJdGVtczxJdGVtIGV4dGVuZHMgU2ltcGxlSXRlbTxJdGVtPj4oXG4gIGl0ZW1zOiBJdGVtW10sXG4gIGZpbHRlclByZWRpY2F0ZTogRmlsdGVyUHJlZGljYXRlPEl0ZW0+XG4pOiBJdGVtW10ge1xuICBjb25zdCBnZXRDaGlsZHJlbiA9IChhY2M6IEl0ZW1bXSwgaXRlbTogSXRlbSk6IEl0ZW1bXSA9PiB7XG4gICAgaWYgKGZpbHRlclByZWRpY2F0ZShpdGVtKSkge1xuICAgICAgYWNjLnB1c2goaXRlbSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0uY2hpbGRyZW4pKSB7XG4gICAgICBjb25zdCBjaGlsZHJlbjogSXRlbVtdID1cbiAgICAgICAgaXRlbS5jaGlsZHJlbj8ucmVkdWNlKChhY2M6IEl0ZW1bXSwgaXRlbTogSXRlbSkgPT4ge1xuICAgICAgICAgIHJldHVybiBnZXRDaGlsZHJlbihhY2MsIGl0ZW0pIGFzIEl0ZW1bXTtcbiAgICAgICAgfSwgW10pID8/IFtdO1xuXG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSBhY2MucHVzaCh7IC4uLml0ZW0sIGNoaWxkcmVuIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIHJldHVybiBpdGVtcy5yZWR1Y2UoZ2V0Q2hpbGRyZW4sIFtdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRJdGVtPEl0ZW0gZXh0ZW5kcyBTaW1wbGVJdGVtPEl0ZW0+PihcbiAgaXRlbXM6IEl0ZW1bXSxcbiAgZmlsdGVyUHJlZGljYXRlOiBGaWx0ZXJQcmVkaWNhdGU8SXRlbT5cbik6IEl0ZW0gfCBudWxsIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgaWYgKGZpbHRlclByZWRpY2F0ZShpdGVtKSkgcmV0dXJuIGl0ZW07XG5cbiAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgY29uc3QgdGFyZ2V0SXRlbSA9IGZpbmRJdGVtKGl0ZW0uY2hpbGRyZW4sIGZpbHRlclByZWRpY2F0ZSk7XG4gICAgICBpZiAodGFyZ2V0SXRlbSkgcmV0dXJuIHRhcmdldEl0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9SdWJyaWNhdG9ySXRlbXM8VXNlckl0ZW0+KFxuICBub2RlczogSW50ZXJuYWxQcml6bU5hdmlnYXRpb25NZW51SXRlbTxVc2VySXRlbT5bXVxuKTogSW50ZXJuYWxQcml6bU5hdmlnYXRpb25NZW51SXRlbTxVc2VySXRlbT5bXSB7XG4gIGNvbnN0IHNvcnRlZE5vZGVzID0gZmxhdEl0ZW1zKG5vZGVzKS5zb3J0KChhLCBiKSA9PiBzb3J0QnlUZXh0KGEsIGIpKTtcbiAgY29uc3QgbGV0dGVycyA9IG5ldyBTZXQoc29ydGVkTm9kZXMubWFwKCh7IHRleHQgfSkgPT4gdGV4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSkpO1xuICBjb25zdCBydWJyaWNhdG9yTm9kZXM6IEludGVybmFsUHJpem1OYXZpZ2F0aW9uTWVudUl0ZW08VXNlckl0ZW0+W10gPSBbXTtcblxuICBsZXR0ZXJzLmZvckVhY2gobGV0dGVyID0+IHtcbiAgICBydWJyaWNhdG9yTm9kZXMucHVzaCh7XG4gICAgICBpc1J1YnJpY2F0b3I6IHRydWUsXG4gICAgICB0ZXh0OiBsZXR0ZXIsXG4gICAgICBjaGlsZHJlbjogc29ydGVkTm9kZXMuZmlsdGVyKCh7IHRleHQgfSkgPT4gdGV4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSA9PT0gbGV0dGVyKSxcbiAgICAgIG9yaWdpbmFsOiBudWxsLFxuICAgICAgZ3JvdXBJZDogbnVsbCxcbiAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgIGljb246IG51bGwsXG4gICAgICBicmVhZGNydW1iczogbnVsbCxcbiAgICAgIGV4dHJhVGVtcGxhdGU6IG51bGwsXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcnVicmljYXRvck5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdEl0ZW1zPEl0ZW0gZXh0ZW5kcyBTaW1wbGVJdGVtPGFueT4+KGl0ZW1zOiBJdGVtW10pOiBJdGVtW10ge1xuICBjb25zdCBmbGF0OiBJdGVtW10gPSBbXTtcblxuICBmdW5jdGlvbiBleHRyYWN0KGl0ZW06IEl0ZW0pOiB2b2lkIHtcbiAgICBpZiAoaXRlbS5jaGlsZHJlbikge1xuICAgICAgaXRlbS5jaGlsZHJlbi5mb3JFYWNoKGV4dHJhY3QpO1xuICAgICAgZmxhdC5wdXNoKGl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbGF0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgaXRlbXMuZm9yRWFjaChleHRyYWN0KTtcblxuICByZXR1cm4gZmxhdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRCeVRleHQ8SXRlbSBleHRlbmRzIFNpbXBsZUl0ZW08SXRlbT4+KGE6IEl0ZW0sIGI6IEl0ZW0pOiBudW1iZXIge1xuICBpZiAoYS50ZXh0ID4gYi50ZXh0KSByZXR1cm4gMTtcbiAgaWYgKGEudGV4dCA8IGIudGV4dCkgcmV0dXJuIC0xO1xuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYXZlcnNlQWxsRGVlcDxJdGVtIGV4dGVuZHMgU2ltcGxlSXRlbTxJdGVtPj4oXG4gIGl0ZW1zOiBJdGVtW10sXG4gIGNhbGxiYWNrOiAoaXRlbTogSXRlbSkgPT4gdm9pZFxuKTogdm9pZCB7XG4gIHJldHVybiBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGNhbGxiYWNrKGl0ZW0pO1xuXG4gICAgaWYgKGl0ZW0uY2hpbGRyZW4pIHtcbiAgICAgIHRyYXZlcnNlQWxsRGVlcChpdGVtLmNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==