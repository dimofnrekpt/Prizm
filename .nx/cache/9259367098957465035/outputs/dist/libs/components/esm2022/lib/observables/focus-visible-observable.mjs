import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, mapTo, repeat, shareReplay, startWith, switchMapTo, take, withLatestFrom, } from 'rxjs/operators';
import { prizmIsAlive } from './is-alive';
import { PrizmOwnerDocumentException } from '../exceptions';
import { prizmIsNativeFocused } from '../util';
import { prizmTypedFromEvent } from './typed-from-event';
let documentMouseUpIsAlive$;
let documentMouseDownIsAlive$;
export function prizmFocusVisibleObservable(element) {
    const elementBlur$ = prizmTypedFromEvent(element, 'blur');
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new PrizmOwnerDocumentException();
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = prizmTypedFromEvent(ownerDocument, 'mouseup', {
            capture: true,
        }).pipe(prizmIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
        documentMouseDownIsAlive$ = prizmTypedFromEvent(ownerDocument, 'mousedown', {
            capture: true,
        }).pipe(prizmIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(prizmTypedFromEvent(element, 'focus').pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(() => !prizmIsNativeFocused(element)), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, (_event, elementActual, documentActual) => elementActual || documentActual), filter(isUserFocus => !isUserFocus))).pipe(switchMapTo(elementBlur$.pipe(mapTo(false), take(1), startWith(true))), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvb2JzZXJ2YWJsZXMvZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFDTCxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLGNBQWMsRUFDZCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsV0FBVyxFQUNYLElBQUksRUFDSixjQUFjLEdBQ2YsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFekQsSUFBSSx1QkFBNEMsQ0FBQztBQUNqRCxJQUFJLHlCQUE4QyxDQUFDO0FBRW5ELE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxPQUFnQjtJQUMxRCxNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDMUQsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUVsQyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ2xCLE1BQU0sSUFBSSwyQkFBMkIsRUFBRSxDQUFDO0tBQ3pDO0lBRUQsSUFBSSxDQUFDLHlCQUF5QixJQUFJLENBQUMsdUJBQXVCLEVBQUU7UUFDMUQsdUJBQXVCLEdBQUcsbUJBQW1CLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRTtZQUN0RSxPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxRix5QkFBeUIsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFO1lBQzFFLE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNGO0lBRUQsT0FBTyxLQUFLO0lBQ1YsaUVBQWlFO0lBQ2pFLE1BQU0sQ0FDSixtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxrR0FBa0c7SUFDbEcsWUFBWSxDQUFDLElBQUksQ0FDZixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUM1QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsY0FBYyxFQUFFLENBQ2pCLENBQ0YsQ0FBQyxJQUFJLENBQ0osTUFBTSxFQUFFLEVBQ1IsY0FBYyxDQUNaLHlCQUF5QixFQUN6Qix1QkFBdUIsRUFDdkIsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLGNBQWMsRUFBRSxFQUFFLENBQUMsYUFBYSxJQUFJLGNBQWMsQ0FDM0UsRUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUNwQyxDQUNGLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7QUFDekcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmNhdCwgbWVyZ2UsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICBmaWx0ZXIsXG4gIGlnbm9yZUVsZW1lbnRzLFxuICBtYXBUbyxcbiAgcmVwZWF0LFxuICBzaGFyZVJlcGxheSxcbiAgc3RhcnRXaXRoLFxuICBzd2l0Y2hNYXBUbyxcbiAgdGFrZSxcbiAgd2l0aExhdGVzdEZyb20sXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHByaXptSXNBbGl2ZSB9IGZyb20gJy4vaXMtYWxpdmUnO1xuaW1wb3J0IHsgUHJpem1Pd25lckRvY3VtZW50RXhjZXB0aW9uIH0gZnJvbSAnLi4vZXhjZXB0aW9ucyc7XG5pbXBvcnQgeyBwcml6bUlzTmF0aXZlRm9jdXNlZCB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgcHJpem1UeXBlZEZyb21FdmVudCB9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmxldCBkb2N1bWVudE1vdXNlVXBJc0FsaXZlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcbmxldCBkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpem1Gb2N1c1Zpc2libGVPYnNlcnZhYmxlKGVsZW1lbnQ6IEVsZW1lbnQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgY29uc3QgZWxlbWVudEJsdXIkID0gcHJpem1UeXBlZEZyb21FdmVudChlbGVtZW50LCAnYmx1cicpO1xuICBjb25zdCB7IG93bmVyRG9jdW1lbnQgfSA9IGVsZW1lbnQ7XG5cbiAgaWYgKCFvd25lckRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IFByaXptT3duZXJEb2N1bWVudEV4Y2VwdGlvbigpO1xuICB9XG5cbiAgaWYgKCFkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkIHx8ICFkb2N1bWVudE1vdXNlVXBJc0FsaXZlJCkge1xuICAgIGRvY3VtZW50TW91c2VVcElzQWxpdmUkID0gcHJpem1UeXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCAnbW91c2V1cCcsIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfSkucGlwZShwcml6bUlzQWxpdmUoKSwgc3RhcnRXaXRoKGZhbHNlKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCA9IHByaXptVHlwZWRGcm9tRXZlbnQob3duZXJEb2N1bWVudCwgJ21vdXNlZG93bicsIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfSkucGlwZShwcml6bUlzQWxpdmUoKSwgc3RhcnRXaXRoKGZhbHNlKSwgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KSk7XG4gIH1cblxuICByZXR1cm4gbWVyZ2UoXG4gICAgLy8gZm9jdXMgZXZlbnRzIGV4Y2x1ZGluZyBvbmVzIHRoYXQgY2FtZSByaWdodCBhZnRlciBtb3VzZSBhY3Rpb25cbiAgICBjb25jYXQoXG4gICAgICBwcml6bVR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsICdmb2N1cycpLnBpcGUodGFrZSgxKSksXG4gICAgICAvLyBmaWx0ZXJpbmcgb3V0IGJsdXIgZXZlbnRzIHdoZW4gZWxlbWVudCByZW1haW5zIGZvY3VzZWQgc28gdGhhdCB3ZSBpZ25vcmUgYnJvd3NlciB0YWIgZm9jdXMgbG9zc1xuICAgICAgZWxlbWVudEJsdXIkLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiAhcHJpem1Jc05hdGl2ZUZvY3VzZWQoZWxlbWVudCkpLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICBpZ25vcmVFbGVtZW50cygpXG4gICAgICApXG4gICAgKS5waXBlKFxuICAgICAgcmVwZWF0KCksXG4gICAgICB3aXRoTGF0ZXN0RnJvbShcbiAgICAgICAgZG9jdW1lbnRNb3VzZURvd25Jc0FsaXZlJCxcbiAgICAgICAgZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQsXG4gICAgICAgIChfZXZlbnQsIGVsZW1lbnRBY3R1YWwsIGRvY3VtZW50QWN0dWFsKSA9PiBlbGVtZW50QWN0dWFsIHx8IGRvY3VtZW50QWN0dWFsXG4gICAgICApLFxuICAgICAgZmlsdGVyKGlzVXNlckZvY3VzID0+ICFpc1VzZXJGb2N1cylcbiAgICApXG4gICkucGlwZShzd2l0Y2hNYXBUbyhlbGVtZW50Qmx1ciQucGlwZShtYXBUbyhmYWxzZSksIHRha2UoMSksIHN0YXJ0V2l0aCh0cnVlKSkpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbn1cbiJdfQ==