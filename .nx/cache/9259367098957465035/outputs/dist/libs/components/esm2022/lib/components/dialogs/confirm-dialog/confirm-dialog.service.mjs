import { AbstractPrizmDialogService } from '../../../abstract/dialog.service';
import { Injectable } from '@angular/core';
import { PrizmOverlayInsidePlacement } from '../../../modules/overlay';
import { PrizmDialogConfirmComponent } from './confirm-dialog.component';
import { PrizmConfirmDialogResultDefaultType, } from './confirm-dialog.models';
import * as i0 from "@angular/core";
const DEFAULT_OPTIONS = {
    position: PrizmOverlayInsidePlacement.CENTER,
    dismissible: true,
    showByVertical: true,
    confirmButton: null,
    supportButton: null,
    cancelButton: null,
};
export class PrizmConfirmDialogService extends AbstractPrizmDialogService {
    constructor() {
        super(...arguments);
        this.component = PrizmDialogConfirmComponent;
        this.defaultOptions = DEFAULT_OPTIONS;
    }
    open(title, options, cb) {
        options = {
            ...options,
            title,
            dismissible: options.dismissible ?? false,
            backdrop: options.backdrop ?? true,
        };
        this.safeUpdateButtonsWithDefaultStyles(options);
        return super.open(title, options, cb);
    }
    safeUpdateButtonsWithDefaultStyles(options) {
        const supportButton = options.supportButton &&
            this.generateButton(options, options.supportButton, 'Продолжить', PrizmConfirmDialogResultDefaultType.confirmed, 'danger', 'ghost');
        const confirmButton = this.generateButton(options, options.confirmButton, 'Подтвердить', PrizmConfirmDialogResultDefaultType.confirmed, 'primary');
        const cancelButton = this.generateButton(options, options.cancelButton, 'Отмена', PrizmConfirmDialogResultDefaultType.cancel, 'secondary', 'ghost');
        options.confirmButton = confirmButton;
        options.cancelButton = cancelButton;
        options.supportButton = supportButton;
    }
    generateButton(options, button, defaultText, defaultComplete, defaultAppearance, defaultAppearanceType) {
        const buttonText = (typeof button === 'string' ? button : button?.text) ?? defaultText;
        const btn = ((typeof button === 'string' ? {} : button) ?? {});
        return {
            ...btn,
            text: buttonText,
            size: btn.size ?? options.size,
            action: btn.action ?? ((c) => c.completeWith(defaultComplete)),
            appearance: btn.appearance ?? defaultAppearance,
            appearanceType: btn.appearanceType ?? defaultAppearanceType,
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmConfirmDialogService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmConfirmDialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmConfirmDialogService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,