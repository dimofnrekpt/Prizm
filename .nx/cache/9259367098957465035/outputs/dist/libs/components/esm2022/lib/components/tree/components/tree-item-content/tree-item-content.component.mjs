import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject } from '@angular/core';
import { POLYMORPH_CONTEXT } from '../../../../directives';
import { PRIZM_DEFAULT_TREE_CONTROLLER } from '../../misc/tree.constants';
import { PRIZM_TREE_CONTROLLER } from '../../misc/tree.tokens';
import { PrizmAbstractTestId } from '../../../../abstract/interactive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../button/button.component";
export class PrizmTreeItemContentComponent extends PrizmAbstractTestId {
    constructor(context, controller) {
        super();
        this.context = context;
        this.controller = controller;
        this.testId_ = 'ui_tree_item_content';
    }
    get isExpanded() {
        return this.context.$implicit.isExpanded;
    }
    get isExpandable() {
        return this.context.$implicit.isExpandable && this.controller !== PRIZM_DEFAULT_TREE_CONTROLLER;
    }
    onClick() {
        this.controller.toggle(this.context.$implicit);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmTreeItemContentComponent, deps: [{ token: POLYMORPH_CONTEXT }, { token: forwardRef(() => PRIZM_TREE_CONTROLLER) }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmTreeItemContentComponent, selector: "prizm-tree-item-content", host: { properties: { "class._expandable": "this.isExpandable" } }, usesInheritance: true, ngImport: i0, template: "<button\n  class=\"z-button\"\n  *ngIf=\"isExpandable\"\n  [icon]=\"(context.$implicit.expanded$ | async) ? 'chevrons-down' : 'chevrons-right'\"\n  [class.t-button_expanded]=\"isExpanded\"\n  (click)=\"onClick()\"\n  prizmIconButton\n  appearance=\"secondary\"\n  appearanceType=\"ghost\"\n  size=\"xs\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(prizm-tree-item._expandable):not(._expandable){padding-left:28px}.z-button{transition-property:transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out;margin-right:8px;font-weight:600}.z-button_expanded{transform:rotate(90deg)}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.PrizmButtonComponent, selector: "button[prizmButton], button[prizmIconButton], a[prizmButton], a[prizmIconButton]", inputs: ["size", "icon", "iconRight", "appearance", "appearanceType", "disabled", "showLoader"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmTreeItemContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-tree-item-content', changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  class=\"z-button\"\n  *ngIf=\"isExpandable\"\n  [icon]=\"(context.$implicit.expanded$ | async) ? 'chevrons-down' : 'chevrons-right'\"\n  [class.t-button_expanded]=\"isExpanded\"\n  (click)=\"onClick()\"\n  prizmIconButton\n  appearance=\"secondary\"\n  appearanceType=\"ghost\"\n  size=\"xs\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(prizm-tree-item._expandable):not(._expandable){padding-left:28px}.z-button{transition-property:transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out;margin-right:8px;font-weight:600}.z-button_expanded{transform:rotate(90deg)}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPH_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => PRIZM_TREE_CONTROLLER)]
                }] }]; }, propDecorators: { isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy90cmVlL2NvbXBvbmVudHMvdHJlZS1pdGVtLWNvbnRlbnQvdHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb21wb25lbnRzL3NyYy9saWIvY29tcG9uZW50cy90cmVlL2NvbXBvbmVudHMvdHJlZS1pdGVtLWNvbnRlbnQvdHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUUxRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQVF2RSxNQUFNLE9BQU8sNkJBQThCLFNBQVEsbUJBQW1CO0lBR3BFLFlBQ3NDLE9BQTZCLEVBRWhELFVBQStCO1FBRWhELEtBQUssRUFBRSxDQUFDO1FBSjRCLFlBQU8sR0FBUCxPQUFPLENBQXNCO1FBRWhELGVBQVUsR0FBVixVQUFVLENBQXFCO1FBTGhDLFlBQU8sR0FBRyxzQkFBc0IsQ0FBQztJQVFuRCxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzNDLENBQUM7SUFFRCxJQUNXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyw2QkFBNkIsQ0FBQztJQUNsRyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsQ0FBQzs4R0F0QlUsNkJBQTZCLGtCQUk5QixpQkFBaUIsYUFDakIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHFCQUFxQixDQUFDO2tHQUx0Qyw2QkFBNkIsMEpDZDFDLHNZQVlBOzsyRkRFYSw2QkFBNkI7a0JBTnpDLFNBQVM7K0JBQ0UseUJBQXlCLG1CQUdsQix1QkFBdUIsQ0FBQyxNQUFNOzswQkFNNUMsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUN4QixNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzs0Q0FXdEMsWUFBWTtzQkFEdEIsV0FBVzt1QkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBmb3J3YXJkUmVmLCBIb3N0QmluZGluZywgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQT0xZTU9SUEhfQ09OVEVYVCB9IGZyb20gJy4uLy4uLy4uLy4uL2RpcmVjdGl2ZXMnO1xuXG5pbXBvcnQgeyBQUklaTV9ERUZBVUxUX1RSRUVfQ09OVFJPTExFUiB9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5jb25zdGFudHMnO1xuaW1wb3J0IHsgUHJpem1UcmVlQ29udHJvbGxlciwgUHJpem1UcmVlSXRlbUNvbnRleHQgfSBmcm9tICcuLi8uLi9taXNjL3RyZWUuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBQUklaTV9UUkVFX0NPTlRST0xMRVIgfSBmcm9tICcuLi8uLi9taXNjL3RyZWUudG9rZW5zJztcbmltcG9ydCB7IFByaXptQWJzdHJhY3RUZXN0SWQgfSBmcm9tICcuLi8uLi8uLi8uLi9hYnN0cmFjdC9pbnRlcmFjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3ByaXptLXRyZWUtaXRlbS1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RyZWUtaXRlbS1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50Lmxlc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFByaXptVHJlZUl0ZW1Db250ZW50Q29tcG9uZW50IGV4dGVuZHMgUHJpem1BYnN0cmFjdFRlc3RJZCB7XG4gIG92ZXJyaWRlIHJlYWRvbmx5IHRlc3RJZF8gPSAndWlfdHJlZV9pdGVtX2NvbnRlbnQnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUE9MWU1PUlBIX0NPTlRFWFQpIHJlYWRvbmx5IGNvbnRleHQ6IFByaXptVHJlZUl0ZW1Db250ZXh0LFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBQUklaTV9UUkVFX0NPTlRST0xMRVIpKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlcjogUHJpem1UcmVlQ29udHJvbGxlclxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIGdldCBpc0V4cGFuZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQuJGltcGxpY2l0LmlzRXhwYW5kZWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9leHBhbmRhYmxlJylcbiAgcHVibGljIGdldCBpc0V4cGFuZGFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC4kaW1wbGljaXQuaXNFeHBhbmRhYmxlICYmIHRoaXMuY29udHJvbGxlciAhPT0gUFJJWk1fREVGQVVMVF9UUkVFX0NPTlRST0xMRVI7XG4gIH1cblxuICBwdWJsaWMgb25DbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIudG9nZ2xlKHRoaXMuY29udGV4dC4kaW1wbGljaXQpO1xuICB9XG59XG4iLCI8YnV0dG9uXG4gIGNsYXNzPVwiei1idXR0b25cIlxuICAqbmdJZj1cImlzRXhwYW5kYWJsZVwiXG4gIFtpY29uXT1cIihjb250ZXh0LiRpbXBsaWNpdC5leHBhbmRlZCQgfCBhc3luYykgPyAnY2hldnJvbnMtZG93bicgOiAnY2hldnJvbnMtcmlnaHQnXCJcbiAgW2NsYXNzLnQtYnV0dG9uX2V4cGFuZGVkXT1cImlzRXhwYW5kZWRcIlxuICAoY2xpY2spPVwib25DbGljaygpXCJcbiAgcHJpem1JY29uQnV0dG9uXG4gIGFwcGVhcmFuY2U9XCJzZWNvbmRhcnlcIlxuICBhcHBlYXJhbmNlVHlwZT1cImdob3N0XCJcbiAgc2l6ZT1cInhzXCJcbj48L2J1dHRvbj5cbjxuZy1jb250YWluZXIgW25nVGVtcGxhdGVPdXRsZXRdPVwiY29udGV4dC50ZW1wbGF0ZVwiPjwvbmctY29udGFpbmVyPlxuIl19