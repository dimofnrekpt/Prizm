import { forwardRef, Optional, Self } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractPrizmControl } from '../../../abstract/control';
import { PRIZM_LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER } from '../../../providers/specific-dropdown-controllers';
import { PRIZM_CALENDAR_DATA_STREAM } from '../../../tokens/calendar-data-stream';
import { PRIZM_DATE_TIME_VALUE_TRANSFORMER } from '../../../tokens/date-inputs-value-transformers';
import { PRIZM_FOCUSABLE_ITEM_ACCESSOR } from '../../../tokens/focusable-item-accessor';
import { prizmReplayControlValueChangesFactory } from '../../../util/common/replay-control-value-changes-factory';
import { PrizmInputDateTimeComponent } from './input-date-time.component';
import { PrizmDestroyService } from '@prizm-ui/helpers';
export const TIME_STREAM_FACTORY = (control, valueTransformer) => prizmReplayControlValueChangesFactory(control, valueTransformer);
export const PRIZM_INPUT_DATE_TIME_PROVIDERS = [
    PrizmDestroyService,
    {
        provide: AbstractPrizmControl,
        useExisting: forwardRef(() => PrizmInputDateTimeComponent),
    },
    {
        provide: PRIZM_FOCUSABLE_ITEM_ACCESSOR,
        useExisting: forwardRef(() => PrizmInputDateTimeComponent),
    },
    {
        provide: PRIZM_CALENDAR_DATA_STREAM,
        deps: [
            [new Optional(), new Self(), NgControl],
            [new Optional(), forwardRef(() => PRIZM_DATE_TIME_VALUE_TRANSFORMER)],
        ],
        useFactory: TIME_STREAM_FACTORY,
    },
    PRIZM_LEFT_ALIGNED_DROPDOWN_CONTROLLER_PROVIDER,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGF0ZS10aW1lLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29tcG9uZW50cy9zcmMvbGliL2NvbXBvbmVudHMvaW5wdXQvaW5wdXQtZGF0ZS10aW1lL2lucHV0LWRhdGUtdGltZS5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUkzQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsK0NBQStDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUNuSCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUV4RixPQUFPLEVBQUUscUNBQXFDLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUNsSCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUNqQyxPQUF5QixFQUN6QixnQkFBaUQsRUFDcEIsRUFBRSxDQUFDLHFDQUFxQyxDQUFJLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRXRHLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHO0lBQzdDLG1CQUFtQjtJQUNuQjtRQUNFLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztLQUMzRDtJQUNEO1FBQ0UsT0FBTyxFQUFFLDZCQUE2QjtRQUN0QyxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUEyQixDQUFDO0tBQzNEO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsMEJBQTBCO1FBQ25DLElBQUksRUFBRTtZQUNKLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFNBQVMsQ0FBQztZQUN2QyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDdEU7UUFDRCxVQUFVLEVBQUUsbUJBQW1CO0tBQ2hDO0lBQ0QsK0NBQStDO0NBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3J3YXJkUmVmLCBPcHRpb25hbCwgU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJpem1EYXkgfSBmcm9tICcuLi8uLi8uLi9AY29yZS9kYXRlLXRpbWUvZGF5JztcbmltcG9ydCB7IFByaXptVGltZSB9IGZyb20gJy4uLy4uLy4uL0Bjb3JlL2RhdGUtdGltZS90aW1lJztcbmltcG9ydCB7IEFic3RyYWN0UHJpem1Db250cm9sIH0gZnJvbSAnLi4vLi4vLi4vYWJzdHJhY3QvY29udHJvbCc7XG5pbXBvcnQgeyBQUklaTV9MRUZUX0FMSUdORURfRFJPUERPV05fQ09OVFJPTExFUl9QUk9WSURFUiB9IGZyb20gJy4uLy4uLy4uL3Byb3ZpZGVycy9zcGVjaWZpYy1kcm9wZG93bi1jb250cm9sbGVycyc7XG5pbXBvcnQgeyBQUklaTV9DQUxFTkRBUl9EQVRBX1NUUkVBTSB9IGZyb20gJy4uLy4uLy4uL3Rva2Vucy9jYWxlbmRhci1kYXRhLXN0cmVhbSc7XG5pbXBvcnQgeyBQUklaTV9EQVRFX1RJTUVfVkFMVUVfVFJBTlNGT1JNRVIgfSBmcm9tICcuLi8uLi8uLi90b2tlbnMvZGF0ZS1pbnB1dHMtdmFsdWUtdHJhbnNmb3JtZXJzJztcbmltcG9ydCB7IFBSSVpNX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SIH0gZnJvbSAnLi4vLi4vLi4vdG9rZW5zL2ZvY3VzYWJsZS1pdGVtLWFjY2Vzc29yJztcbmltcG9ydCB7IFByaXptQ29udHJvbFZhbHVlVHJhbnNmb3JtZXIgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9jb250cm9sLXZhbHVlLXRyYW5zZm9ybWVyJztcbmltcG9ydCB7IHByaXptUmVwbGF5Q29udHJvbFZhbHVlQ2hhbmdlc0ZhY3RvcnkgfSBmcm9tICcuLi8uLi8uLi91dGlsL2NvbW1vbi9yZXBsYXktY29udHJvbC12YWx1ZS1jaGFuZ2VzLWZhY3RvcnknO1xuaW1wb3J0IHsgUHJpem1JbnB1dERhdGVUaW1lQ29tcG9uZW50IH0gZnJvbSAnLi9pbnB1dC1kYXRlLXRpbWUuY29tcG9uZW50JztcbmltcG9ydCB7IFByaXptRGVzdHJveVNlcnZpY2UgfSBmcm9tICdAcHJpem0tdWkvaGVscGVycyc7XG5cbmV4cG9ydCBjb25zdCBUSU1FX1NUUkVBTV9GQUNUT1JZID0gPFQgZXh0ZW5kcyBbUHJpem1EYXkgfCBudWxsLCBQcml6bVRpbWUgfCBudWxsXT4oXG4gIGNvbnRyb2w6IE5nQ29udHJvbCB8IG51bGwsXG4gIHZhbHVlVHJhbnNmb3JtZXI6IFByaXptQ29udHJvbFZhbHVlVHJhbnNmb3JtZXI8VD5cbik6IE9ic2VydmFibGU8VCB8IG51bGw+IHwgbnVsbCA9PiBwcml6bVJlcGxheUNvbnRyb2xWYWx1ZUNoYW5nZXNGYWN0b3J5PFQ+KGNvbnRyb2wsIHZhbHVlVHJhbnNmb3JtZXIpO1xuXG5leHBvcnQgY29uc3QgUFJJWk1fSU5QVVRfREFURV9USU1FX1BST1ZJREVSUyA9IFtcbiAgUHJpem1EZXN0cm95U2VydmljZSxcbiAge1xuICAgIHByb3ZpZGU6IEFic3RyYWN0UHJpem1Db250cm9sLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFByaXptSW5wdXREYXRlVGltZUNvbXBvbmVudCksXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBQUklaTV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQcml6bUlucHV0RGF0ZVRpbWVDb21wb25lbnQpLFxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogUFJJWk1fQ0FMRU5EQVJfREFUQV9TVFJFQU0sXG4gICAgZGVwczogW1xuICAgICAgW25ldyBPcHRpb25hbCgpLCBuZXcgU2VsZigpLCBOZ0NvbnRyb2xdLFxuICAgICAgW25ldyBPcHRpb25hbCgpLCBmb3J3YXJkUmVmKCgpID0+IFBSSVpNX0RBVEVfVElNRV9WQUxVRV9UUkFOU0ZPUk1FUildLFxuICAgIF0sXG4gICAgdXNlRmFjdG9yeTogVElNRV9TVFJFQU1fRkFDVE9SWSxcbiAgfSxcbiAgUFJJWk1fTEVGVF9BTElHTkVEX0RST1BET1dOX0NPTlRST0xMRVJfUFJPVklERVIsXG5dO1xuIl19