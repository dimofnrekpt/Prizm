import { canShowCronListItem, getArrWithStringNumbers, getCarousel } from './util';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, filter, first, map, takeUntil, tap } from 'rxjs/operators';
import { UntypedFormControl } from '@angular/forms';
import { PrizmCronUiBaseType } from './model';
export class PrizmCronUiBaseState {
    constructor(current$, initialType, TYPES, between = {
        value: {
            start: '0',
            end: '1',
        },
        list: {
            start: getCarousel(60, 0),
            end: getCarousel(60, 0),
        },
    }, specified = {
        value: ['0'],
        list: getArrWithStringNumbers(60, 1, false).map((i, idx) => ({
            key: idx.toString(),
            value: idx.toString(),
        })),
    }, everyChosenTimesAfterChosen = {
        list: {
            on: getCarousel(60, 1),
            after: getCarousel(60, 0),
        },
        value: {
            on: '1',
            after: '0',
        },
    }) {
        this.current$ = current$;
        this.initialType = initialType;
        this.TYPES = TYPES;
        this.between = between;
        this.specified = specified;
        this.everyChosenTimesAfterChosen = everyChosenTimesAfterChosen;
        this.list = {
            everyChosenTimesAfterChosen: this.everyChosenTimesAfterChosen.list,
            specified: this.specified.list,
            between: this.between.list,
        };
        this.defaultState = {
            type: this.initialType,
            everyChosenTimesAfterChosen: this.everyChosenTimesAfterChosen.value,
            specified: this.specified.value,
            between: this.between.value,
        };
        this.state$ = new BehaviorSubject(this.defaultState);
        this.canShowCronListItem = canShowCronListItem;
        this.typeControl = new UntypedFormControl();
        this.type$ = this.current$.pipe(map(i => this.getTypeByValue(i, this.cron.value)));
        this.initialType = initialType;
    }
    init() {
        this.initLocalStateChanger();
        this.initLocalTypeChanger();
    }
    initLocalStateChanger() {
        /* add change when base changes */
        this.current$
            .pipe(distinctUntilChanged(this.isBaseChanged), tap(value => this.updateLocalState(value, this.getTypeByValue(value, this.cron.value))), takeUntil(this.destroy$))
            .subscribe();
    }
    isBaseChanged(a, b) {
        return a === b;
    }
    initLocalTypeChanger() {
        this.type$
            .pipe(filter(i => i != this.typeControl.value), tap(type => {
            this.typeControl.setValue(type);
        }), takeUntil(this.destroy$))
            .subscribe();
    }
    getTypeByValueByDefault(value, cron) {
        if (value === '*') {
            return PrizmCronUiBaseType.every;
        }
        else if (value.includes('/')) {
            return PrizmCronUiBaseType.after;
        }
        else if (value.includes('-')) {
            return PrizmCronUiBaseType.between;
        }
        return PrizmCronUiBaseType.specified;
    }
    getTypeByValue(hour, cron) {
        return this.getTypeByValueByDefault(hour, cron);
    }
    updatePartial(state) {
        this.state$.next({
            ...this.state$.value,
            ...state,
        });
    }
    updateMainIfChanged(newState) {
        this.current$
            .pipe(first(), tap(old => {
            if (old !== newState) {
                this.updateMainState(newState);
            }
        }))
            .subscribe();
    }
    /**
     * update between
     * */
    updateBetween({ start, end, } = {}) {
        start = start ?? this.state$.value.between.start;
        end = end ?? this.state$.value.between.end;
        this.updateMainIfChanged(`${start}-${end}`);
    }
    /**
     * update on # after #
     * */
    updateOn(options = {}) {
        let { on, after } = options;
        on = on ?? this.state$.value.everyChosenTimesAfterChosen.on;
        after = after ?? this.state$.value.everyChosenTimesAfterChosen.after;
        this.updateMainIfChanged(`${after}/${on}`);
    }
    /**
     * update on
     * */
    updateSpecified(specified) {
        this.updateMainIfChanged(`${specified?.join(',') ?? 0}`);
    }
    /**
     * set every *
     * */
    setEvery() {
        this.updateMainIfChanged('*');
    }
    /**
     * TODO fix type casting
     * */
    updateLocalState(value, type) {
        switch (type) {
            case this.TYPES.between:
                {
                    const arr = value.split('-');
                    const start = arr[0] ?? '0';
                    const end = arr[1] ?? '0';
                    this.updatePartial({
                        type: PrizmCronUiBaseType.between,
                        between: {
                            start: start,
                            end: end,
                        },
                    });
                }
                break;
            case this.TYPES.every:
                this.updatePartial({
                    type: PrizmCronUiBaseType.every,
                });
                break;
            case this.TYPES.specified:
                this.updatePartial({
                    type: PrizmCronUiBaseType.specified,
                    specified: value.split(','),
                });
                break;
            case this.TYPES.after:
                {
                    const arr = value.split('/');
                    const on = arr[1] ?? '0';
                    const after = arr[0] ?? '0';
                    this.updatePartial({
                        type: PrizmCronUiBaseType.after,
                        everyChosenTimesAfterChosen: {
                            on: on,
                            after: after,
                        },
                    });
                }
                break;
        }
    }
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.destroy$.unsubscribe();
    }
}
//# sourceMappingURL=data:application/json;base64,