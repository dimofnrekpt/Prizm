import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, forwardRef, inject, Inject, Injector, Input, Output, ViewChild, } from '@angular/core';
import { Compare, PrizmCallFuncPipe, PrizmDestroyService, PrizmLetDirective, PrizmToObservablePipe, } from '@prizm-ui/helpers';
import { FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';
import { isPolymorphPrimitive, PolymorphOutletDirective, } from '../../../directives/polymorph';
import { PRIZM_SELECT_OPTIONS, } from './select.options';
import { PrizmInputControl, PrizmInputTextModule } from '../../input';
import { prizmIsNativeFocused, prizmIsTextOverflow$ } from '../../../util';
import { debounceTime, distinctUntilChanged, map, shareReplay, startWith, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { BehaviorSubject, concat, defer, fromEvent, isObservable, merge, of, Subject, timer, } from 'rxjs';
import { prizmDefaultProp } from '@prizm-ui/core';
import { PrizmDropdownHostComponent, } from '../dropdown-host';
import { PrizmOverlayOutsidePlacement } from '../../../modules/overlay';
import { PrizmInputNgControl } from '../../input/common/base/input-ng-control.class';
import { PrizmInputSelectOptionDirective } from './input-select-option.directive';
import { PrizmInputSelectOptionService } from './input-select-option.service';
import { PrizmChipsModule } from '../../chips';
import { CommonModule } from '@angular/common';
import { PrizmAutoFocusModule, PrizmDropdownControllerModule, PrizmHintDirective, PrizmLifecycleDirective, } from '../../../directives';
import { PrizmIconComponent } from '../../icon';
import { PrizmDataListComponent } from '../../data-list';
import { prizmWatch } from '../../../observables';
import { PrizmSelectInputItemComponent } from './input-select-item.component';
import { PrizmInputSelectDataListDirective } from './input-select-data-list.directive';
import { PrizmScrollbarDirective } from '../../scrollbar/scrollbar.directive';
import { PrizmOverlayComponent } from '../../../modules/overlay/overlay.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../input/common/input-hint/input-hint.directive";
import * as i3 from "../../input/common/input-layout/input-layout.component";
import * as i4 from "../../input/common/input-icon-button/input-icon-button.component";
import * as i5 from "../../input/common/input-layout/input-layout-right.directive";
import * as i6 from "../../input/input-text/input-text.component";
import * as i7 from "../../input/input-text/input-block.component";
import * as i8 from "@angular/forms";
import * as i9 from "../../../directives/auto-focus/autofocus.directive";
import * as i10 from "../../../directives/dropdown-controller/dropdown-controller.directive";
export class PrizmSelectInputComponent extends PrizmInputNgControl {
    set items(data) {
        this.items$.next(data);
    }
    get items() {
        return this.items$.value;
    }
    constructor(options, injector) {
        super(injector);
        this.options = options;
        this.prizmHintDirection = 't';
        this.dropdownScroll = 'auto';
        this.searchable = this.options.searchable;
        this.icon = this.options.icon;
        this.minDropdownHeight = this.options.minDropdownHeight;
        this.maxDropdownHeight = this.options.maxDropdownHeight;
        this.placeholder = this.options.placeholder;
        this.dropdownWidth = this.options.dropdownWidth;
        this.search = this.options.search;
        this.transformer = this.options.transformer;
        this.searchMatcher = this.options.searchMatcher;
        this.emptyContent = this.options.emptyContent;
        this.nullContent = this.options.nullContent;
        this.isPolymorphPrimitive = isPolymorphPrimitive;
        this.prizmIsTextOverflow$ = prizmIsTextOverflow$;
        this.printing$ = new BehaviorSubject('');
        /**
         * need only clear function
         * */
        this.stringify = this.options.stringify;
        this.identityMatcher = this.options.identityMatcher;
        this.valueTemplate = this.options.valueContent;
        this.listItemTemplate = this.options.listItemTemplate;
        this.testId_ = 'ui_select';
        this.isNotNullish = Compare.isNotNullish;
        this.searchChange = new EventEmitter();
        this.defaultLabel = this.options.label;
        this.direction = PrizmOverlayOutsidePlacement.RIGHT;
        this.items$ = new BehaviorSubject([]);
        this.defaultIcon = 'chevrons-dropdown';
        this.nativeElementType = 'select';
        this.hasClearButton = true;
        this.isNullish = Compare.isNullish;
        this.filteredItems = [];
        this.focused$$ = new Subject();
        this.focused$ = this.focused$$.asObservable();
        this.opened$$ = new BehaviorSubject(false);
        this.opened$ = this.opened$$.asObservable();
        this.inputSelectOptionService = inject(PrizmInputSelectOptionService, {
            self: true,
        });
    }
    initSelectListener() {
        this.inputSelectOptionService.selected$
            .pipe(tap(item => {
            this.select(item);
        }), prizmWatch(this.changeDetectorRef), takeUntil(this.destroy$))
            .subscribe();
    }
    ngOnInit() {
        super.ngOnInit();
        this.initSelectListener();
        fromEvent(this.layoutComponent?.el.nativeElement ?? this.elRef_.nativeElement, 'click')
            .pipe(tap(() => {
            this.safeOpenModal();
        }), takeUntil(this.destroy$))
            .subscribe();
        this.filteredItems$ = concat(this.printing$.pipe()).pipe(tap(value => this.searchEmit(value)), distinctUntilChanged(), switchMap(value => {
            return this.items$.pipe(map(items => {
                if (!this.searchable || !value?.toString().replace(/[ ]+/g, ''))
                    return items;
                const searchValue = (this.searchValue = value.toString().trim());
                return items?.filter(item => this.searchMatcher(searchValue, item)) ?? [];
            }), map(items => {
                if (this.nullContent && items?.length && items[0] !== null) {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore
                    items = [null, ...items];
                }
                return items;
            }), tap(items => {
                this.filteredItems = items;
                this.dropdownHostElement?.reCalculatePositions(1000 / 60);
            }), debounceTime(0), shareReplay(1));
        }));
    }
    get empty() {
        return this.value$.pipe(map(value => value == null));
    }
    get nativeFocusableElement() {
        return this.focusableElement ? this.focusableElement.nativeElement : null;
    }
    get focused() {
        return prizmIsNativeFocused(this.nativeFocusableElement);
    }
    onClear() {
        timer(0)
            .pipe(tap(() => {
            this.select(null);
            this.changeDetectorRef.markForCheck();
        }))
            .subscribe();
    }
    clear(ev) {
        ev.stopImmediatePropagation();
        this.updateValue(null);
        this.markAsTouched();
        this.changeDetectorRef.markForCheck();
    }
    select(item) {
        this.markAsTouched();
        const selectedValue = item && this.transformer(item);
        if (!this.identityMatcher(selectedValue, this.value)) {
            this.updateValue(selectedValue);
        }
        this.opened$$.next(false);
    }
    safeOpenModal() {
        if (this.disabled)
            return;
        this.printing$.next('');
        const open = !this.opened$$.value && !this.disabled; // && inputElement && prizmIsNativeFocused(inputElement);
        this.opened$$.next(open);
        this.changeDetectorRef.markForCheck();
    }
    updateValue(value) {
        super.updateValue(value);
        // set touched on change value
        this.ngControl.control?.markAsTouched();
    }
    searchEmit(value) {
        if (this.search === value)
            return;
        this.search = value;
        this.searchChange.emit(value);
    }
    getValueFromItems(value, items) {
        const newItem = items.find(i => this.identityMatcher(this.transformer(i), value));
        return newItem;
    }
    getCurrentValue(value, items) {
        const newItem = this.getFullObjectOfCurrent(this.value, items);
        if (Compare.isNullish(newItem))
            return '';
        return this.stringify(newItem ?? value);
    }
    getFullObjectOfCurrent(value, items) {
        if (Compare.isNullish(value))
            return null;
        const newItem = this.getValueFromItems(this.value, items);
        return newItem;
    }
    stringifyForInner(i, outer, label, placeholder, nullContent) {
        if (!this.layoutComponent) {
            return defer(() => {
                const result = this.stringify(i, nullContent);
                return isObservable(result) ? result : of(result);
            });
        }
        let hideNullContent;
        return merge(this.value$, this.layoutComponent.changes$).pipe(startWith(), switchMap(() => {
            hideNullContent = (outer && placeholder) || !outer;
            const flow$ = this.stringify(i, hideNullContent ? null : nullContent);
            return isObservable(flow$) ? flow$ : of(flow$);
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmSelectInputComponent, deps: [{ token: PRIZM_SELECT_OPTIONS }, { token: Injector }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmSelectInputComponent, isStandalone: true, selector: "prizm-input-select", inputs: { prizmHintDirection: "prizmHintDirection", prizmHintCanShow: "prizmHintCanShow", items: "items", dropdownScroll: "dropdownScroll", dropdownStyles: "dropdownStyles", dropdownClasses: "dropdownClasses", searchable: "searchable", icon: "icon", minDropdownHeight: "minDropdownHeight", maxDropdownHeight: "maxDropdownHeight", placeholder: "placeholder", dropdownWidth: "dropdownWidth", search: "search", transformer: "transformer", searchMatcher: "searchMatcher", emptyContent: "emptyContent", nullContent: "nullContent", stringify: "stringify", identityMatcher: "identityMatcher", valueTemplate: "valueTemplate", listItemTemplate: "listItemTemplate" }, outputs: { searchChange: "searchChange" }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PrizmSelectInputComponent),
                multi: true,
            },
            PrizmDestroyService,
            PrizmInputSelectOptionService,
            { provide: PrizmInputControl, useExisting: PrizmSelectInputComponent },
        ], queries: [{ propertyName: "customItemDataList", first: true, predicate: PrizmInputSelectDataListDirective, descendants: true }], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElementRef"], descendants: true, read: ElementRef }, { propertyName: "dropdownHostElement", first: true, predicate: ["dropdownHostRef"], descendants: true }], exportAs: ["prizmSelectInput"], usesInheritance: true, ngImport: i0, template: "<ng-container *prizmLet=\"items$ | async as itemList\">\n  <prizm-dropdown-host\n    #dropdownHostRef\n    *prizmLet=\"items && value | prizmCallFunc : getFullObjectOfCurrent : itemList as val\"\n    [content]=\"dropdown\"\n    [isOpen]=\"$any(opened$ | async)\"\n    [prizmDropdownHost]=\"layoutComponent?.el?.nativeElement\"\n    [prizmDropdownHostWidth]=\"dropdownWidth\"\n    [prizmDropdownMinHeight]=\"minDropdownHeight\"\n    [prizmDropdownMaxHeight]=\"maxDropdownHeight\"\n    [dropdownStyles]=\"dropdownStyles\"\n    [dropdownClasses]=\"dropdownClasses\"\n    (isOpenChange)=\"opened$$.next($event)\"\n  >\n    <ng-container>\n      <ng-container\n        *polymorphOutlet=\"\n          valueTemplate && editableTemplate as content;\n          context: {\n            $implicit: $any(val),\n            value: val | prizmCallFunc : transformer,\n            stringify: $any(val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async)\n          }\n        \"\n      >\n        <ng-container\n          *prizmLet=\"\n            val\n              | prizmCallFunc\n                : stringifyForInner\n                : layoutComponent?.outer\n                : layoutComponent?.label\n                : placeholder\n                : nullContent\n              | async as text\n          \"\n        >\n          <input\n            class=\"input-search\"\n            #focusableElementRef\n            [placeholder]=\"placeholder\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"!disabled ? 0 : -1\"\n            [title]=\"val\"\n            [readonly]=\"true\"\n            [prizmHintDirection]=\"prizmHintDirection\"\n            [prizmHintCanShow]=\"prizmHintCanShow\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"text ?? ''\"\n            (focus)=\"focused$$.next(true)\"\n            (blur)=\"focused$$.next(false)\"\n            prizmInput\n          />\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #editableTemplate>\n      <div\n        #focusableElementRef\n        *prizmLet=\"value | prizmCallFunc : getFullObjectOfCurrent : itemList as val\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        [ngModel]=\"(value | prizmCallFunc : getCurrentValue : itemList) ?? ''\"\n        [attr.contenteditable]=\"false\"\n        [tabIndex]=\"!disabled ? 1 : -1\"\n        [disabled]=\"disabled\"\n        (focus)=\"focused$$.next(true)\"\n        (blur)=\"focused$$.next(false)\"\n        prizmInput\n      >\n        <ng-container *ngIf=\"isNotNullish(val); else placeholderTemplate\">\n          <ng-container\n            *polymorphOutlet=\"\n              valueTemplate as content;\n              context: {\n                $implicit: $any(val),\n                value: val | prizmCallFunc : transformer,\n                stringify: $any(\n                  val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async\n                )\n              }\n            \"\n          >\n            <ng-container\n              *prizmLet=\"\n                val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async as text\n              \"\n            >\n              {{ text }}\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <ng-template #placeholderTemplate>\n          <div class=\"placeholder\">{{ placeholder }}</div>\n        </ng-template>\n      </div>\n    </ng-template>\n\n    <ng-template #dropdown>\n      <ng-container> </ng-container>\n      <prizm-data-list\n        class=\"block\"\n        *prizmLet=\"(filteredItems$ | async) ?? [] as items\"\n        [scroll]=\"customItemDataList ? 'none' : dropdownScroll\"\n        [style.--prizm-data-list-border]=\"0\"\n      >\n        <div class=\"list-search-item\" *ngIf=\"searchable\">\n          <prizm-input-layout size=\"m\" label=\"\u041F\u043E\u0438\u0441\u043A\">\n            <input\n              class=\"input-search\"\n              [ngModel]=\"printing$.value\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (ngModelChange)=\"dropdownHostRef.reCalculatePositions(1000 / 16); printing$.next($event)\"\n              prizmInput\n              prizmAutoFocus\n            />\n            <button [interactive]=\"true\" prizmInputIconButton=\"sort-zoom-in\" prizm-input-right></button>\n          </prizm-input-layout>\n        </div>\n        <ng-container *ngIf=\"items?.length; else emptyTemplate\">\n          <ng-container *polymorphOutlet=\"customItemDataList?.template\">\n            <prizm-input-select-item *ngFor=\"let item of items\" [item]=\"item\"></prizm-input-select-item>\n          </ng-container>\n          <!--          <div-->\n          <!--            class=\"item\"-->\n          <!--            #hostHint-->\n          <!--            *ngFor=\"let item of items; let idx = index\"-->\n          <!--            [class.most-relevant]=\"isMostRelevant(idx, items)\"-->\n          <!--            [class.selected]=\"-->\n          <!--              item === value ||-->\n          <!--              (item && value && (transformer(item) | prizmCallFunc : identityMatcher : value))-->\n          <!--            \"-->\n          <!--            prizmInputSelectOption-->\n          <!--            [value]='item'-->\n          <!--          >-->\n          <!--            <ng-container *ngIf=\"!isNullish(item); else nullContentTemplate\">-->\n          <!--              <span-->\n          <!--                class=\"text\"-->\n          <!--                #elem-->\n          <!--                *prizmLet=\"-->\n          <!--                  item | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async as text-->\n          <!--                \"-->\n          <!--                [prizmHint]=\"text\"-->\n          <!--                [prizmHintHost]=\"hostHint\"-->\n          <!--                [prizmHintDirection]=\"direction\"-->\n          <!--                [prizmHintCanShow]=\"$any(elem | prizmCallFunc : prizmIsTextOverflow$ | async)\"-->\n          <!--              >-->\n          <!--                <ng-container-->\n          <!--                  *polymorphOutlet=\"-->\n          <!--                    listItemTemplate ?? valueTemplate as content;-->\n          <!--                    context: {-->\n          <!--                      $implicit: item,-->\n          <!--                      value: item | prizmCallFunc : transformer,-->\n          <!--                      stringify: text-->\n          <!--                    }-->\n          <!--                  \"-->\n          <!--                >-->\n          <!--                  {{ text }}-->\n          <!--                </ng-container>-->\n          <!--              </span>-->\n          <!--            </ng-container>-->\n\n          <!--            <ng-template #nullContentTemplate>-->\n          <!--              <ng-container *ngIf=\"nullContent\">-->\n          <!--                <ng-container *polymorphOutlet=\"nullContent as content\">-->\n          <!--                  {{ content }}-->\n          <!--                </ng-container>-->\n          <!--              </ng-container>-->\n          <!--            </ng-template>-->\n          <!--          </div>-->\n        </ng-container>\n        <ng-template #emptyTemplate>\n          <div class=\"empty-template\">\n            <ng-container *polymorphOutlet=\"emptyContent as content\">\n              {{ content }}\n            </ng-container>\n          </div>\n        </ng-template>\n      </prizm-data-list>\n    </ng-template>\n  </prizm-dropdown-host>\n\n  <ng-container *prizmInputLayoutRight>\n    <ng-container\n      *polymorphOutlet=\"\n        icon || defaultIcon as iconName;\n        context: $any({ opened: opened$ | async, disabled: disabled })\n      \"\n    >\n      <prizm-icon\n        [class.disabled]=\"disabled\"\n        [class.opened]=\"opened$ | async\"\n        [class.active]=\"(focused$ | async) || (opened$ | async)\"\n        [class.icon-dropdown]=\"iconName === defaultIcon\"\n        [iconClass]=\"$any(iconName)\"\n        (click)=\"(!disabled)\"\n      >\n      </prizm-icon>\n    </ng-container>\n  </ng-container>\n</ng-container>\n", styles: [":host{position:relative;z-index:0;display:block;width:100%}:host-context(span){display:inline}.placeholder:empty:before{content:\"-\";visibility:hidden}.item{display:flex;align-items:center;padding:var(--prizm-select-item-padding, 8px 16px);background:var(--prizm-select-item-background, var(--prizm-bg-body));cursor:pointer;font-weight:var(--prizm-select-item-font-weight, 400);font-size:var(--prizm-select-item-font-size, 14px);color:var(--prizm-select-item-text, var(--prizm-text-contrast, #20222b))}.item:empty{display:none}.item .text{max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.item.selected,.item.most-relevant{background:var(--prizm-select-item-selected-background, var(--prizm-lite-b130-20));color:var(--prizm-text-contrast)}.item:not(.selected):not(.most-relevant):hover{background:var(--prizm-select-item-hover-background, var(--prizm-g2-g11));color:var(--prizm-text-contrast)}.block{background:var(--prizm-select-background, var(--prizm-bg-body));border-radius:2px;border:none;padding:var(--prizm-select-padding, 8px 0)}.input-chips[readonly]{cursor:pointer}.empty-template{padding:var(--prizm-select-item-padding, 8px 16px);background:var(--prizm-select-item-background, var(--prizm-bg-body));font-weight:var(--prizm-select-item-font-weight, 400);font-size:var(--prizm-select-item-font-size, 14px);color:var(--prizm-select-empty-text, var(--prizm-text-subscript, #20222b))}.icon-dropdown{color:#777b92;cursor:pointer;transition-property:transform;transition-property:all;transition-property:color,transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out}.icon-dropdown.opened{transform:rotate(180deg)}.icon-dropdown.active{color:#337eff}prizm-icon{color:var(--prizm-text-subscript)}.disabled{cursor:not-allowed;pointer-events:none}.list-search-item{padding:var(--prizm-select-item-padding, 8px 16px)}.list-search-item prizm-input-layout{width:100%}prizm-dropdown-host{display:flex}\n"], dependencies: [{ kind: "directive", type: PolymorphOutletDirective, selector: "[polymorphOutlet]", inputs: ["polymorphOutlet", "polymorphOutletContext", "polymorphOutletInjector"] }, { kind: "ngmodule", type: PrizmInputTextModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.PrizmInputHintDirective, selector: "input[prizmHintDirection], input[prizmHintCanShow]", inputs: ["prizmHintDirection", "prizmHintCanShow"], exportAs: ["prizmInputHint"] }, { kind: "component", type: i3.PrizmInputLayoutComponent, selector: "prizm-input-layout", inputs: ["label", "size", "status", "outer", "clearButton", "border", "position", "forceClear"], outputs: ["clear"] }, { kind: "component", type: i4.PrizmInputIconButtonComponent, selector: "button[prizmInputIconButton]", inputs: ["size", "prizmInputIconButton", "interactive", "disabled", "type"] }, { kind: "directive", type: i5.PrizmInputLayoutRightDirective, selector: "ng-template[prizmInputLayoutRight]" }, { kind: "component", type: i6.PrizmInputTextComponent, selector: "input[prizmInput]:not([type=number]), textarea[prizmInput], input[prizmInputPassword]", inputs: ["disabled", "placeholder", "required", "value"], outputs: ["enter", "onClear", "valueChanged"], exportAs: ["prizmInput"] }, { kind: "component", type: i7.PrizmInputBlockComponent, selector: "div[prizmInput]", exportAs: ["prizmInputBlock"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: PrizmChipsModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: PrizmLetDirective, selector: "[prizmLet]", inputs: ["prizmLet"], exportAs: ["prizmLet"] }, { kind: "ngmodule", type: PrizmAutoFocusModule }, { kind: "directive", type: i9.PrizmAutoFocusDirective, selector: "[prizmAutoFocus]", inputs: ["autoFocus"] }, { kind: "component", type: PrizmIconComponent, selector: "prizm-icon", inputs: ["iconClass", "size"] }, { kind: "pipe", type: PrizmCallFuncPipe, name: "prizmCallFunc" }, { kind: "ngmodule", type: PrizmDropdownControllerModule }, { kind: "directive", type: i10.PrizmDropdownControllerDirective, selector: "[prizmDropdownMinHeight], [prizmDropdownMaxHeight], [prizmDropdownAlign], [prizmDropdownLimitWidth]", inputs: ["prizmDropdownMinHeight", "prizmDropdownAlign", "prizmDropdownLimitWidth", "prizmDropdownMaxHeight"] }, { kind: "component", type: PrizmDataListComponent, selector: "prizm-data-list", inputs: ["defaultStyle", "iconOff", "content", "scroll"] }, { kind: "component", type: PrizmSelectInputItemComponent, selector: "prizm-input-select-item", inputs: ["item"], exportAs: ["prizmSelectInputItem"] }, { kind: "component", type: PrizmDropdownHostComponent, selector: "prizm-dropdown-host", inputs: ["content", "prizmDropdownHostId", "prizmDropdownCustomContext", "delay", "canOpen", "closeByEsc", "closeOnOutsideClick", "prizmDropdownHost", "prizmDropdownHostWidth", "autoReposition", "placement", "isOpen", "dropdownStyles", "dropdownClasses"], outputs: ["isOpenChange"], exportAs: ["prizm-dropdown-host"] }, { kind: "pipe", type: PrizmToObservablePipe, name: "prizmToObservable" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", String)
], PrizmSelectInputComponent.prototype, "dropdownScroll", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "searchable", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "icon", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "minDropdownHeight", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "maxDropdownHeight", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "placeholder", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "dropdownWidth", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "search", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmSelectInputComponent.prototype, "transformer", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmSelectInputComponent.prototype, "searchMatcher", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "emptyContent", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "nullContent", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmSelectInputComponent.prototype, "stringify", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmSelectInputComponent.prototype, "identityMatcher", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "valueTemplate", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmSelectInputComponent.prototype, "listItemTemplate", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmSelectInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'prizm-input-select', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [
                        PrizmOverlayComponent,
                        PrizmInputSelectOptionDirective,
                        PolymorphOutletDirective,
                        PrizmInputTextModule,
                        PrizmChipsModule,
                        FormsModule,
                        ReactiveFormsModule,
                        CommonModule,
                        PrizmLetDirective,
                        PrizmAutoFocusModule,
                        PrizmHintDirective,
                        PrizmIconComponent,
                        PrizmCallFuncPipe,
                        PrizmScrollbarDirective,
                        PrizmDropdownControllerModule,
                        PrizmLifecycleDirective,
                        PrizmDataListComponent,
                        PrizmSelectInputItemComponent,
                        PrizmDropdownHostComponent,
                        PrizmToObservablePipe,
                        PrizmInputSelectOptionDirective,
                    ], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PrizmSelectInputComponent),
                            multi: true,
                        },
                        PrizmDestroyService,
                        PrizmInputSelectOptionService,
                        { provide: PrizmInputControl, useExisting: PrizmSelectInputComponent },
                    ], exportAs: 'prizmSelectInput', template: "<ng-container *prizmLet=\"items$ | async as itemList\">\n  <prizm-dropdown-host\n    #dropdownHostRef\n    *prizmLet=\"items && value | prizmCallFunc : getFullObjectOfCurrent : itemList as val\"\n    [content]=\"dropdown\"\n    [isOpen]=\"$any(opened$ | async)\"\n    [prizmDropdownHost]=\"layoutComponent?.el?.nativeElement\"\n    [prizmDropdownHostWidth]=\"dropdownWidth\"\n    [prizmDropdownMinHeight]=\"minDropdownHeight\"\n    [prizmDropdownMaxHeight]=\"maxDropdownHeight\"\n    [dropdownStyles]=\"dropdownStyles\"\n    [dropdownClasses]=\"dropdownClasses\"\n    (isOpenChange)=\"opened$$.next($event)\"\n  >\n    <ng-container>\n      <ng-container\n        *polymorphOutlet=\"\n          valueTemplate && editableTemplate as content;\n          context: {\n            $implicit: $any(val),\n            value: val | prizmCallFunc : transformer,\n            stringify: $any(val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async)\n          }\n        \"\n      >\n        <ng-container\n          *prizmLet=\"\n            val\n              | prizmCallFunc\n                : stringifyForInner\n                : layoutComponent?.outer\n                : layoutComponent?.label\n                : placeholder\n                : nullContent\n              | async as text\n          \"\n        >\n          <input\n            class=\"input-search\"\n            #focusableElementRef\n            [placeholder]=\"placeholder\"\n            [disabled]=\"disabled\"\n            [tabIndex]=\"!disabled ? 0 : -1\"\n            [title]=\"val\"\n            [readonly]=\"true\"\n            [prizmHintDirection]=\"prizmHintDirection\"\n            [prizmHintCanShow]=\"prizmHintCanShow\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"text ?? ''\"\n            (focus)=\"focused$$.next(true)\"\n            (blur)=\"focused$$.next(false)\"\n            prizmInput\n          />\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #editableTemplate>\n      <div\n        #focusableElementRef\n        *prizmLet=\"value | prizmCallFunc : getFullObjectOfCurrent : itemList as val\"\n        [ngModelOptions]=\"{ standalone: true }\"\n        [ngModel]=\"(value | prizmCallFunc : getCurrentValue : itemList) ?? ''\"\n        [attr.contenteditable]=\"false\"\n        [tabIndex]=\"!disabled ? 1 : -1\"\n        [disabled]=\"disabled\"\n        (focus)=\"focused$$.next(true)\"\n        (blur)=\"focused$$.next(false)\"\n        prizmInput\n      >\n        <ng-container *ngIf=\"isNotNullish(val); else placeholderTemplate\">\n          <ng-container\n            *polymorphOutlet=\"\n              valueTemplate as content;\n              context: {\n                $implicit: $any(val),\n                value: val | prizmCallFunc : transformer,\n                stringify: $any(\n                  val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async\n                )\n              }\n            \"\n          >\n            <ng-container\n              *prizmLet=\"\n                val | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async as text\n              \"\n            >\n              {{ text }}\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <ng-template #placeholderTemplate>\n          <div class=\"placeholder\">{{ placeholder }}</div>\n        </ng-template>\n      </div>\n    </ng-template>\n\n    <ng-template #dropdown>\n      <ng-container> </ng-container>\n      <prizm-data-list\n        class=\"block\"\n        *prizmLet=\"(filteredItems$ | async) ?? [] as items\"\n        [scroll]=\"customItemDataList ? 'none' : dropdownScroll\"\n        [style.--prizm-data-list-border]=\"0\"\n      >\n        <div class=\"list-search-item\" *ngIf=\"searchable\">\n          <prizm-input-layout size=\"m\" label=\"\u041F\u043E\u0438\u0441\u043A\">\n            <input\n              class=\"input-search\"\n              [ngModel]=\"printing$.value\"\n              [ngModelOptions]=\"{ standalone: true }\"\n              (ngModelChange)=\"dropdownHostRef.reCalculatePositions(1000 / 16); printing$.next($event)\"\n              prizmInput\n              prizmAutoFocus\n            />\n            <button [interactive]=\"true\" prizmInputIconButton=\"sort-zoom-in\" prizm-input-right></button>\n          </prizm-input-layout>\n        </div>\n        <ng-container *ngIf=\"items?.length; else emptyTemplate\">\n          <ng-container *polymorphOutlet=\"customItemDataList?.template\">\n            <prizm-input-select-item *ngFor=\"let item of items\" [item]=\"item\"></prizm-input-select-item>\n          </ng-container>\n          <!--          <div-->\n          <!--            class=\"item\"-->\n          <!--            #hostHint-->\n          <!--            *ngFor=\"let item of items; let idx = index\"-->\n          <!--            [class.most-relevant]=\"isMostRelevant(idx, items)\"-->\n          <!--            [class.selected]=\"-->\n          <!--              item === value ||-->\n          <!--              (item && value && (transformer(item) | prizmCallFunc : identityMatcher : value))-->\n          <!--            \"-->\n          <!--            prizmInputSelectOption-->\n          <!--            [value]='item'-->\n          <!--          >-->\n          <!--            <ng-container *ngIf=\"!isNullish(item); else nullContentTemplate\">-->\n          <!--              <span-->\n          <!--                class=\"text\"-->\n          <!--                #elem-->\n          <!--                *prizmLet=\"-->\n          <!--                  item | prizmCallFunc : stringify : $any(nullContent) | prizmToObservable | async as text-->\n          <!--                \"-->\n          <!--                [prizmHint]=\"text\"-->\n          <!--                [prizmHintHost]=\"hostHint\"-->\n          <!--                [prizmHintDirection]=\"direction\"-->\n          <!--                [prizmHintCanShow]=\"$any(elem | prizmCallFunc : prizmIsTextOverflow$ | async)\"-->\n          <!--              >-->\n          <!--                <ng-container-->\n          <!--                  *polymorphOutlet=\"-->\n          <!--                    listItemTemplate ?? valueTemplate as content;-->\n          <!--                    context: {-->\n          <!--                      $implicit: item,-->\n          <!--                      value: item | prizmCallFunc : transformer,-->\n          <!--                      stringify: text-->\n          <!--                    }-->\n          <!--                  \"-->\n          <!--                >-->\n          <!--                  {{ text }}-->\n          <!--                </ng-container>-->\n          <!--              </span>-->\n          <!--            </ng-container>-->\n\n          <!--            <ng-template #nullContentTemplate>-->\n          <!--              <ng-container *ngIf=\"nullContent\">-->\n          <!--                <ng-container *polymorphOutlet=\"nullContent as content\">-->\n          <!--                  {{ content }}-->\n          <!--                </ng-container>-->\n          <!--              </ng-container>-->\n          <!--            </ng-template>-->\n          <!--          </div>-->\n        </ng-container>\n        <ng-template #emptyTemplate>\n          <div class=\"empty-template\">\n            <ng-container *polymorphOutlet=\"emptyContent as content\">\n              {{ content }}\n            </ng-container>\n          </div>\n        </ng-template>\n      </prizm-data-list>\n    </ng-template>\n  </prizm-dropdown-host>\n\n  <ng-container *prizmInputLayoutRight>\n    <ng-container\n      *polymorphOutlet=\"\n        icon || defaultIcon as iconName;\n        context: $any({ opened: opened$ | async, disabled: disabled })\n      \"\n    >\n      <prizm-icon\n        [class.disabled]=\"disabled\"\n        [class.opened]=\"opened$ | async\"\n        [class.active]=\"(focused$ | async) || (opened$ | async)\"\n        [class.icon-dropdown]=\"iconName === defaultIcon\"\n        [iconClass]=\"$any(iconName)\"\n        (click)=\"(!disabled)\"\n      >\n      </prizm-icon>\n    </ng-container>\n  </ng-container>\n</ng-container>\n", styles: [":host{position:relative;z-index:0;display:block;width:100%}:host-context(span){display:inline}.placeholder:empty:before{content:\"-\";visibility:hidden}.item{display:flex;align-items:center;padding:var(--prizm-select-item-padding, 8px 16px);background:var(--prizm-select-item-background, var(--prizm-bg-body));cursor:pointer;font-weight:var(--prizm-select-item-font-weight, 400);font-size:var(--prizm-select-item-font-size, 14px);color:var(--prizm-select-item-text, var(--prizm-text-contrast, #20222b))}.item:empty{display:none}.item .text{max-width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.item.selected,.item.most-relevant{background:var(--prizm-select-item-selected-background, var(--prizm-lite-b130-20));color:var(--prizm-text-contrast)}.item:not(.selected):not(.most-relevant):hover{background:var(--prizm-select-item-hover-background, var(--prizm-g2-g11));color:var(--prizm-text-contrast)}.block{background:var(--prizm-select-background, var(--prizm-bg-body));border-radius:2px;border:none;padding:var(--prizm-select-padding, 8px 0)}.input-chips[readonly]{cursor:pointer}.empty-template{padding:var(--prizm-select-item-padding, 8px 16px);background:var(--prizm-select-item-background, var(--prizm-bg-body));font-weight:var(--prizm-select-item-font-weight, 400);font-size:var(--prizm-select-item-font-size, 14px);color:var(--prizm-select-empty-text, var(--prizm-text-subscript, #20222b))}.icon-dropdown{color:#777b92;cursor:pointer;transition-property:transform;transition-property:all;transition-property:color,transform;transition-duration:var(--prizm-duration, .3s);transition-timing-function:ease-in-out}.icon-dropdown.opened{transform:rotate(180deg)}.icon-dropdown.active{color:#337eff}prizm-icon{color:var(--prizm-text-subscript)}.disabled{cursor:not-allowed;pointer-events:none}.list-search-item{padding:var(--prizm-select-item-padding, 8px 16px)}.list-search-item prizm-input-layout{width:100%}prizm-dropdown-host{display:flex}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_SELECT_OPTIONS]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElementRef', { read: ElementRef }]
            }], dropdownHostElement: [{
                type: ViewChild,
                args: ['dropdownHostRef']
            }], customItemDataList: [{
                type: ContentChild,
                args: [PrizmInputSelectDataListDirective]
            }], prizmHintDirection: [{
                type: Input
            }], prizmHintCanShow: [{
                type: Input
            }], items: [{
                type: Input
            }], dropdownScroll: [{
                type: Input
            }], dropdownStyles: [{
                type: Input
            }], dropdownClasses: [{
                type: Input
            }], searchable: [{
                type: Input
            }], icon: [{
                type: Input
            }], minDropdownHeight: [{
                type: Input
            }], maxDropdownHeight: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], dropdownWidth: [{
                type: Input
            }], search: [{
                type: Input
            }], transformer: [{
                type: Input
            }], searchMatcher: [{
                type: Input
            }], emptyContent: [{
                type: Input
            }], nullContent: [{
                type: Input
            }], stringify: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], valueTemplate: [{
                type: Input
            }], listItemTemplate: [{
                type: Input
            }], searchChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,