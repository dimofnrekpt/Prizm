import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { PrizmAbstractTestId, prizmDefaultProp, prizmPure } from '@prizm-ui/core';
import { Observable } from 'rxjs';
import { PrizmDay } from '../../@core/date-time/day';
import { PRIZM_FIRST_DAY, PRIZM_LAST_DAY } from '../../@core/date-time/days.const';
import { PrizmMonth } from '../../@core/date-time/month';
import { PrizmMonthRange } from '../../@core/date-time/month-range';
import { PrizmYear } from '../../@core/date-time/year';
import { PRIZM_ALWAYS_FALSE_HANDLER } from '../../constants/always-false-handler';
import { PrizmInteractiveState } from '../../directives/wrapper/wrapper.component';
import { PRIZM_CALENDAR_MONTHS } from '../../tokens/i18n';
import { prizmNullableSame } from '../../util/common/nullable-same';
import { prizmI18nInitWithKey } from '../../services';
import { CommonModule } from '@angular/common';
import { PrizmFocusableModule, PrizmHoveredDirective, PrizmPressedModule, PrizmStopPropagationModule, } from '../../directives';
import { PrizmPrimitiveSpinButtonModule, PrizmPrimitiveYearPickerComponent } from '../internal';
import { PrizmScrollbarComponent } from '../scrollbar';
import { PrizmLetDirective } from '@prizm-ui/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../directives/stop-propagation/stop-propagation.directive";
import * as i3 from "../internal/primitive-spin-button/primitive-spin-button.component";
import * as i4 from "../../directives/pressed/pressed.directive";
import * as i5 from "../../directives/focusable/focusable.directive";
import * as i6 from "rxjs";
const TODAY = PrizmDay.currentLocal();
export class PrizmCalendarMonthComponent extends PrizmAbstractTestId {
    constructor(months$) {
        super();
        this.months$ = months$;
        this.value = null;
        this.year = TODAY;
        this.disabledItemHandler = PRIZM_ALWAYS_FALSE_HANDLER;
        this.min = PRIZM_FIRST_DAY;
        this.max = PRIZM_LAST_DAY;
        this.monthClick = new EventEmitter();
        this.hoveredItemChange = new EventEmitter();
        this.yearChange = new EventEmitter();
        this.isYearPickerShown = false;
        this.hoveredItem = null;
        this.pressedItem = null;
        this.testId_ = 'ui_calendar_month';
    }
    get isSingle() {
        return this.value !== null && (this.value instanceof PrizmMonth || this.value.isSingleMonth);
    }
    get previousYearDisabled() {
        return this.year.yearSameOrBefore(this.min);
    }
    get nextYearDisabled() {
        return this.year.yearSameOrAfter(this.max);
    }
    getItemState(item) {
        const { disabledItemHandlerWithMinMax, pressedItem, hoveredItem } = this;
        if (disabledItemHandlerWithMinMax(item)) {
            return PrizmInteractiveState.Disabled;
        }
        // if (pressedItem?.monthSame(item)) {
        //     return PrizmInteractiveState.Active;
        // }
        //
        // if (hoveredItem?.monthSame(item)) {
        //     return PrizmInteractiveState.Hover;
        // }
        return null;
    }
    getItemRange(item) {
        const { value, hoveredItem } = this;
        if (value === null) {
            return null;
        }
        if (value instanceof PrizmMonth) {
            return value.monthSame(item) ? "single" /* PrizmRangeState.Single */ : null;
        }
        const theFirstOfRange = value.from.monthSame(item) && !value.isSingleMonth;
        const hoveredItemAfterFrom = hoveredItem?.monthAfter(value.from) && value.from.monthSame(item) && value.isSingleMonth;
        const hoveredItemIsCandidateToBeFrom = hoveredItem?.monthSame(item) && hoveredItem?.monthBefore(value.from) && value.isSingleMonth;
        if (theFirstOfRange || hoveredItemAfterFrom || hoveredItemIsCandidateToBeFrom) {
            return "start" /* PrizmRangeState.Start */;
        }
        const theLastOfRange = value.to.monthSame(item) && !value.isSingleMonth;
        const hoveredItemBeforeTo = value.to.monthSame(item) && hoveredItem?.monthBefore(value.to) && value.isSingleMonth;
        const hoveredItemIsCandidateToBeTo = hoveredItem?.monthSame(item) && hoveredItem?.monthAfter(value.from) && value.isSingleMonth;
        if (theLastOfRange || hoveredItemBeforeTo || hoveredItemIsCandidateToBeTo) {
            return "end" /* PrizmRangeState.End */;
        }
        return value.isSingleMonth && value.from.monthSame(item) ? "single" /* PrizmRangeState.Single */ : null;
    }
    getPrizmMonth(monthNumber, yearNumber) {
        return new PrizmMonth(yearNumber, monthNumber);
    }
    isItemToday(item) {
        return TODAY.monthSame(item);
    }
    isItemInsideRange(month) {
        const { value, hoveredItem } = this;
        if (value === null || value instanceof PrizmMonth) {
            return false;
        }
        if (!value.isSingleMonth) {
            return value.from.monthSameOrBefore(month) && value.to.monthAfter(month);
        }
        if (hoveredItem === null) {
            return false;
        }
        const range = PrizmMonthRange.sort(value.from, hoveredItem);
        return range.from.monthSameOrBefore(month) && range.to.monthAfter(month);
    }
    onPickerYearClick(year) {
        this.isYearPickerShown = false;
        if (this.year.yearSame(year)) {
            return;
        }
        this.updateActiveYear(year);
    }
    onItemClick(month) {
        if (this.disabledItemHandlerWithMinMax(month)) {
            return;
        }
        this.monthClick.emit(month);
    }
    onYearClick() {
        this.isYearPickerShown = true;
    }
    onNextYear() {
        this.updateActiveYear(this.year.append({ year: 1 }));
    }
    onPreviousYear() {
        this.updateActiveYear(this.year.append({ year: -1 }));
    }
    onItemHovered(hovered, item) {
        this.updateHoveredItem(hovered ? item : null);
    }
    onItemPressed(pressed, item) {
        this.updatePressedItem(pressed ? item : null);
    }
    calculateDisabledItemHandlerWithMinMax(disabledItemHandler, value, min, max) {
        return (item) => item.monthBefore(min) || item.monthAfter(max) || disabledItemHandler(item, { value });
    }
    get disabledItemHandlerWithMinMax() {
        return this.calculateDisabledItemHandlerWithMinMax(this.disabledItemHandler, this.value, this.min, this.max);
    }
    updateHoveredItem(month) {
        if (prizmNullableSame(this.hoveredItem, month, (a, b) => a.monthSame(b))) {
            return;
        }
        this.hoveredItem = month;
        this.hoveredItemChange.emit(month);
    }
    updatePressedItem(item) {
        this.pressedItem = item;
    }
    updateActiveYear(year) {
        this.year = year;
        this.yearChange.emit(year);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmCalendarMonthComponent, deps: [{ token: PRIZM_CALENDAR_MONTHS }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmCalendarMonthComponent, isStandalone: true, selector: "prizm-calendar-month", inputs: { value: "value", year: "year", disabledItemHandler: "disabledItemHandler", min: "min", max: "max" }, outputs: { monthClick: "monthClick", yearChange: "yearChange" }, host: { properties: { "class._single": "this.isSingle" } }, providers: [...prizmI18nInitWithKey(PRIZM_CALENDAR_MONTHS, 'shortCalendarMonths')], usesInheritance: true, ngImport: i0, template: "<prizm-scrollbar class=\"z-scrollbar\" *ngIf=\"isYearPickerShown; else monthSelect\">\n  <prizm-primitive-year-picker\n    [min]=\"min\"\n    [max]=\"max\"\n    [initialItem]=\"year\"\n    [value]=\"value\"\n    (yearClick)=\"onPickerYearClick($event)\"\n  ></prizm-primitive-year-picker>\n</prizm-scrollbar>\n<ng-template #monthSelect>\n  <prizm-primitive-spin-button\n    [focusable]=\"false\"\n    [leftDisabled]=\"previousYearDisabled\"\n    [rightDisabled]=\"nextYearDisabled\"\n    (leftClick)=\"onPreviousYear()\"\n    (rightClick)=\"onNextYear()\"\n    prizmStopPropagation=\"mousedown\"\n  >\n    <button\n      class=\"year-btn\"\n      [prizmFocusable]=\"false\"\n      (click)=\"onYearClick()\"\n      automation-id=\"prizm-calendar-month__active-year\"\n    >\n      {{ year.formattedYear }}\n    </button>\n  </prizm-primitive-spin-button>\n  <div class=\"z-row\">\n    <ng-container *ngFor=\"let month of months$ | async; let index = index\">\n      <div\n        class=\"z-cell\"\n        *prizmLet=\"getPrizmMonth(index, year.year) as item\"\n        [class.z-cell_today]=\"isItemToday(item)\"\n        [class.z-cell_interval]=\"isItemInsideRange(item)\"\n        [attr.data-range]=\"getItemRange(item)\"\n        [attr.data-state]=\"getItemState(item)\"\n        (prizmHoveredChange)=\"onItemHovered($event, item)\"\n        (prizmPressedChange)=\"onItemHovered($event, item)\"\n        (click)=\"onItemClick(item)\"\n      >\n        <div class=\"z-item\">{{ month }}</div>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: [":host{display:block;font:var(--prizm-font-text-m)}.z-row{position:relative;z-index:0;display:flex;justify-content:space-between;height:2.25rem}.z-item{position:relative;flex:1;line-height:2rem;border-radius:2px;color:var(--prizm-v3-text-icon-secondary);font-weight:600}.z-item:before,.z-item:after{content:\"\";position:absolute;inset:0;z-index:-1;border-radius:2px}.z-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.6875rem;text-align:center;outline:none;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.z-cell_today{border-radius:2px}.z-cell_today[data-state=hovered]>.z-item{border-color:var(--prizm-v3-button-primary-solid-hover);color:var(--prizm-v3-button-primary-solid-hover);background-color:var(--prizm-v3-button-ghost-hover)}.z-cell_today .z-item{border:1px solid var(--prizm-v3-button-primary-solid-default);color:var(--prizm-v3-button-primary-solid-default)}.z-cell_today .z-item_unavailable{color:var(--prizm-v3-text-icon-disable)}.z-cell:before{content:\"\";position:absolute;inset:0;z-index:-1;border-radius:2px}.z-cell_interval:before{background:var(--prizm-v3-button-primary-ghost-active)}:host._single .z-cell_interval:before{background-color:var(--prizm-v3-button-primary-ghost-active)}.z-cell_interval:not(:last-child):before{right:-3.6875rem}.z-cell_interval:last-child:first-child:before{right:0}.z-cell_interval:first-child>.z-item{border-top-left-radius:2px;border-bottom-left-radius:2px}.z-cell_interval:last-child>.z-item{border-top-right-radius:2px;border-bottom-right-radius:2px}.z-cell_interval>.z-item{border-radius:0;color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item{color:var(--prizm-v3-text-icon-exception)}.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item:before,.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item:after{background-color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-range][data-state=hovered]>.z-item{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-range][data-state=hovered]>.z-item:before,.z-cell[data-range][data-state=hovered]>.z-item:after{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-range][data-state=pressed]>.z-item:before,.z-cell[data-range][data-state=pressed]>.z-item:after{background-color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-state=disabled]{pointer-events:none;cursor:not-allowed}.z-cell[data-state=disabled]>.z-item{text-decoration:line-through;opacity:.3}.z-cell[data-state=hovered]:not([data-range]):not(.z-cell_today)>.z-item{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-state=pressed]:hover:not([data-range])>.z-item{background-color:var(--prizm-v3-button-primary-solid-default);border-radius:2px;color:var(--prizm-v3-text-icon-exception)}:host{display:block;height:13.625rem;width:15.75rem;padding:1.125rem;box-sizing:content-box}:host .year-btn{border:none;background:none;outline:none;display:flex;gap:4px;padding:8px;text-align:left;cursor:pointer;font-family:Inter;font-size:14px;font-weight:400;color:var(--prizm-v3-text-icon-secondary)}:host .year-btn:hover:not(.active):not(:active){background-color:var(--prizm-v3-button-ghost-hover);border-radius:2px}:host .year-btn:active,:host .year-btn.active{color:var(--prizm-v3-button-primary-solid-active)}.z-row{flex-wrap:wrap;margin-top:1.4375rem}.z-cell{box-sizing:content-box}.z-cell:nth-child(n + 5){margin-top:1.75rem}.z-cell:not([data-range=\"start\"]):not([data-range=\"single\"]):not([data-range=\"end\"]):hover{background-color:var(--prizm-v3-button-ghost-hover)}.z-cell:not([data-range=\"start\"]):not([data-range=\"single\"]):not([data-range=\"end\"]):hover .z-item{color:var(--prizm-v3-button-primary-solid-hover)!important}.z-cell_interval:nth-child(4n):before{right:0}.z-scrollbar{height:inherit;width:inherit}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: PrizmStopPropagationModule }, { kind: "directive", type: i2.PrizmStopPropagationDirective, selector: "[prizmStopPropagation]" }, { kind: "component", type: PrizmPrimitiveYearPickerComponent, selector: "prizm-primitive-year-picker", inputs: ["value", "initialItem", "min", "max", "disabledItemHandler"], outputs: ["yearClick"] }, { kind: "ngmodule", type: PrizmPrimitiveSpinButtonModule }, { kind: "component", type: i3.PrizmPrimitiveSpinButtonComponent, selector: "prizm-primitive-spin-button", inputs: ["disabled", "mode", "leftDisabled", "rightDisabled"], outputs: ["leftClick", "rightClick"] }, { kind: "component", type: PrizmScrollbarComponent, selector: "prizm-scrollbar", inputs: ["visibility"] }, { kind: "directive", type: PrizmLetDirective, selector: "[prizmLet]", inputs: ["prizmLet"], exportAs: ["prizmLet"] }, { kind: "directive", type: PrizmHoveredDirective, selector: "[prizmHoveredChange]", outputs: ["prizmHoveredChange"] }, { kind: "ngmodule", type: PrizmPressedModule }, { kind: "directive", type: i4.PrizmPressedDirective, selector: "[prizmPressedChange]", outputs: ["prizmPressedChange"] }, { kind: "ngmodule", type: PrizmFocusableModule }, { kind: "directive", type: i5.PrizmFocusableDirective, selector: "[prizmFocusable]", inputs: ["prizmFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmCalendarMonthComponent.prototype, "value", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", PrizmYear)
], PrizmCalendarMonthComponent.prototype, "year", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmCalendarMonthComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", PrizmMonth)
], PrizmCalendarMonthComponent.prototype, "min", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", PrizmMonth)
], PrizmCalendarMonthComponent.prototype, "max", void 0);
__decorate([
    prizmPure,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function, Object, PrizmMonth,
        PrizmMonth]),
    __metadata("design:returntype", Function)
], PrizmCalendarMonthComponent.prototype, "calculateDisabledItemHandlerWithMinMax", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmCalendarMonthComponent, decorators: [{
            type: Component,
            args: [{ selector: `prizm-calendar-month`, standalone: true, imports: [
                        CommonModule,
                        PrizmStopPropagationModule,
                        PrizmPrimitiveYearPickerComponent,
                        PrizmPrimitiveSpinButtonModule,
                        PrizmScrollbarComponent,
                        PrizmLetDirective,
                        PrizmHoveredDirective,
                        PrizmPressedModule,
                        PrizmFocusableModule,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, providers: [...prizmI18nInitWithKey(PRIZM_CALENDAR_MONTHS, 'shortCalendarMonths')], template: "<prizm-scrollbar class=\"z-scrollbar\" *ngIf=\"isYearPickerShown; else monthSelect\">\n  <prizm-primitive-year-picker\n    [min]=\"min\"\n    [max]=\"max\"\n    [initialItem]=\"year\"\n    [value]=\"value\"\n    (yearClick)=\"onPickerYearClick($event)\"\n  ></prizm-primitive-year-picker>\n</prizm-scrollbar>\n<ng-template #monthSelect>\n  <prizm-primitive-spin-button\n    [focusable]=\"false\"\n    [leftDisabled]=\"previousYearDisabled\"\n    [rightDisabled]=\"nextYearDisabled\"\n    (leftClick)=\"onPreviousYear()\"\n    (rightClick)=\"onNextYear()\"\n    prizmStopPropagation=\"mousedown\"\n  >\n    <button\n      class=\"year-btn\"\n      [prizmFocusable]=\"false\"\n      (click)=\"onYearClick()\"\n      automation-id=\"prizm-calendar-month__active-year\"\n    >\n      {{ year.formattedYear }}\n    </button>\n  </prizm-primitive-spin-button>\n  <div class=\"z-row\">\n    <ng-container *ngFor=\"let month of months$ | async; let index = index\">\n      <div\n        class=\"z-cell\"\n        *prizmLet=\"getPrizmMonth(index, year.year) as item\"\n        [class.z-cell_today]=\"isItemToday(item)\"\n        [class.z-cell_interval]=\"isItemInsideRange(item)\"\n        [attr.data-range]=\"getItemRange(item)\"\n        [attr.data-state]=\"getItemState(item)\"\n        (prizmHoveredChange)=\"onItemHovered($event, item)\"\n        (prizmPressedChange)=\"onItemHovered($event, item)\"\n        (click)=\"onItemClick(item)\"\n      >\n        <div class=\"z-item\">{{ month }}</div>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", styles: [":host{display:block;font:var(--prizm-font-text-m)}.z-row{position:relative;z-index:0;display:flex;justify-content:space-between;height:2.25rem}.z-item{position:relative;flex:1;line-height:2rem;border-radius:2px;color:var(--prizm-v3-text-icon-secondary);font-weight:600}.z-item:before,.z-item:after{content:\"\";position:absolute;inset:0;z-index:-1;border-radius:2px}.z-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.6875rem;text-align:center;outline:none;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.z-cell_today{border-radius:2px}.z-cell_today[data-state=hovered]>.z-item{border-color:var(--prizm-v3-button-primary-solid-hover);color:var(--prizm-v3-button-primary-solid-hover);background-color:var(--prizm-v3-button-ghost-hover)}.z-cell_today .z-item{border:1px solid var(--prizm-v3-button-primary-solid-default);color:var(--prizm-v3-button-primary-solid-default)}.z-cell_today .z-item_unavailable{color:var(--prizm-v3-text-icon-disable)}.z-cell:before{content:\"\";position:absolute;inset:0;z-index:-1;border-radius:2px}.z-cell_interval:before{background:var(--prizm-v3-button-primary-ghost-active)}:host._single .z-cell_interval:before{background-color:var(--prizm-v3-button-primary-ghost-active)}.z-cell_interval:not(:last-child):before{right:-3.6875rem}.z-cell_interval:last-child:first-child:before{right:0}.z-cell_interval:first-child>.z-item{border-top-left-radius:2px;border-bottom-left-radius:2px}.z-cell_interval:last-child>.z-item{border-top-right-radius:2px;border-bottom-right-radius:2px}.z-cell_interval>.z-item{border-radius:0;color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item{color:var(--prizm-v3-text-icon-exception)}.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item:before,.z-cell[data-range]:not([data-state=\"hovered\"])>.z-item:after{background-color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-range][data-state=hovered]>.z-item{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-range][data-state=hovered]>.z-item:before,.z-cell[data-range][data-state=hovered]>.z-item:after{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-range][data-state=pressed]>.z-item:before,.z-cell[data-range][data-state=pressed]>.z-item:after{background-color:var(--prizm-v3-button-primary-solid-default)}.z-cell[data-state=disabled]{pointer-events:none;cursor:not-allowed}.z-cell[data-state=disabled]>.z-item{text-decoration:line-through;opacity:.3}.z-cell[data-state=hovered]:not([data-range]):not(.z-cell_today)>.z-item{background-color:var(--prizm-v3-button-ghost-hover);color:var(--prizm-v3-button-primary-solid-hover)}.z-cell[data-state=pressed]:hover:not([data-range])>.z-item{background-color:var(--prizm-v3-button-primary-solid-default);border-radius:2px;color:var(--prizm-v3-text-icon-exception)}:host{display:block;height:13.625rem;width:15.75rem;padding:1.125rem;box-sizing:content-box}:host .year-btn{border:none;background:none;outline:none;display:flex;gap:4px;padding:8px;text-align:left;cursor:pointer;font-family:Inter;font-size:14px;font-weight:400;color:var(--prizm-v3-text-icon-secondary)}:host .year-btn:hover:not(.active):not(:active){background-color:var(--prizm-v3-button-ghost-hover);border-radius:2px}:host .year-btn:active,:host .year-btn.active{color:var(--prizm-v3-button-primary-solid-active)}.z-row{flex-wrap:wrap;margin-top:1.4375rem}.z-cell{box-sizing:content-box}.z-cell:nth-child(n + 5){margin-top:1.75rem}.z-cell:not([data-range=\"start\"]):not([data-range=\"single\"]):not([data-range=\"end\"]):hover{background-color:var(--prizm-v3-button-ghost-hover)}.z-cell:not([data-range=\"start\"]):not([data-range=\"single\"]):not([data-range=\"end\"]):hover .z-item{color:var(--prizm-v3-button-primary-solid-hover)!important}.z-cell_interval:nth-child(4n):before{right:0}.z-scrollbar{height:inherit;width:inherit}\n"] }]
        }], ctorParameters: function () { return [{ type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [PRIZM_CALENDAR_MONTHS]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], year: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], monthClick: [{
                type: Output
            }], yearChange: [{
                type: Output
            }], isSingle: [{
                type: HostBinding,
                args: [`class._single`]
            }], calculateDisabledItemHandlerWithMinMax: [] } });
//# sourceMappingURL=data:application/json;base64,