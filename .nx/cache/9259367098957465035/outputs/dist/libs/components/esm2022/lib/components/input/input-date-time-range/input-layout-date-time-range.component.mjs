import { __decorate, __metadata } from "tslib";
import { ChangeDetectorRef, Component, ContentChild, forwardRef, Inject, Injector, Input, Optional, TemplateRef, ViewChild, } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';
import { PrizmDayRange } from '../../../@core/date-time/day-range';
import { PrizmDay } from '../../../@core/date-time/day';
import { prizmDefaultProp } from '@prizm-ui/core';
import { PRIZM_ALWAYS_FALSE_HANDLER } from '../../../constants/always-false-handler';
import { PRIZM_DEFAULT_MARKER_HANDLER } from '../../../constants/default-marker-handler';
import { PrizmMonth } from '../../../@core/date-time/month';
import { PRIZM_FIRST_DAY, PRIZM_LAST_DAY } from '../../../@core/date-time/days.const';
import { PRIZM_DATE_SEPARATOR } from '../../../@core/date-time/date-separator';
import { PrizmDialogService } from '../../dialogs/dialog/dialog.service';
import { PRIZM_DATE_FORMAT } from '../../../@core/date-time/date-format';
import { PRIZM_DATE_TEXTS, PRIZM_TIME_TEXTS } from '../../../tokens/i18n';
import { PRIZM_DATE_RANGE_VALUE_TRANSFORMER } from '../../../tokens/date-inputs-value-transformers';
import { prizmNullableSame } from '../../../util/common/nullable-same';
import { filterTruthy, PrizmDestroyService, PrizmLetDirective } from '@prizm-ui/helpers';
import { PrizmInputControl } from '../common/base/input-control.class';
import { PrizmInputNgControl } from '../common/base/input-ng-control.class';
import { debounceTime, delay, distinctUntilChanged, map, share, takeUntil, tap } from 'rxjs/operators';
import { prizmCreateDateNgxMask, PrizmDateTime, PrizmDateTimeRange, PrizmTime, PrizmTimeRange, } from '../../../@core';
import { PrizmInputZoneDirective, PrizmInputZoneModule } from '../../../directives/input-zone';
import { prizmCreateTimeNgxMask } from '../../../@core/mask/create-time-mask';
import { PRIZM_DATE_RIGHT_BUTTONS } from '../../../tokens';
import { prizmI18nInitWithKeys } from '../../../services';
import { CommonModule } from '@angular/common';
import { PrizmMaskModule } from '../../../modules';
import { PolymorphOutletDirective, PrizmLifecycleModule, PrizmValueAccessorModule, } from '../../../directives';
import { PrizmDataListComponent } from '../../data-list';
import { PrizmInputLayoutTimeModule } from '../input-time';
import { PrizmInputTextModule } from '../input-text';
import { PrizmIconComponent } from '../../icon';
import { PrizmDropdownHostComponent } from '../../dropdowns/dropdown-host';
import { PrizmCalendarRangeComponent } from '../../calendar-range';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "ngx-mask";
import * as i3 from "../../../directives/input-zone/input-zone.directive";
import * as i4 from "../../../directives/input-zone/input-in-zone.directive";
import * as i5 from "../../../directives/lifecycle/lifecycle.directive";
import * as i6 from "../input-time/input-layout-time.component";
import * as i7 from "../common/input-layout/input-layout.component";
import * as i8 from "../common/input-icon-button/input-icon-button.component";
import * as i9 from "../common/input-layout/input-layout-right.directive";
import * as i10 from "../input-text/input-text.component";
import * as i11 from "@angular/forms";
import * as i12 from "../../dialogs/dialog/dialog.service";
import * as i13 from "rxjs";
export class PrizmInputLayoutDateTimeRangeComponent extends PrizmInputNgControl {
    get interactive() {
        return !this.disabled;
    }
    get calendarMinDay() {
        return this.getDayFromMinMax(this.min);
    }
    get calendarMaxDay() {
        return this.getDayFromMinMax(this.max);
    }
    get empty() {
        return this.empty$;
    }
    constructor(changeDetectorRef, injector, dialogService, dateFormat, dateSeparator, dateTexts$, valueTransformer) {
        super(injector);
        this.dialogService = dialogService;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.hasClearButton = true;
        this.nativeElementType = 'input-layout-date-range';
        this.disabledItemHandler = PRIZM_ALWAYS_FALSE_HANDLER;
        this.markerHandler = PRIZM_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonth = PrizmMonth.currentLocal();
        this.items = [];
        this.placeholder = '';
        this.min = PRIZM_FIRST_DAY;
        this.max = PRIZM_LAST_DAY;
        this.timeStrict = false;
        this.minLength = null;
        this.maxLength = null;
        this.open = false;
        // TODO: finish
        // openTimeTemplate = false;
        this.timeMode = 'HH:MM';
        this.timeItems = new Array(24).fill(null).map((_, i) => new PrizmTime(i, 0, 0, 0));
        this.extraButtonInjector = this.injector;
        this.testId_ = 'ui_input_date_time_range';
        this.testRange = new PrizmDayRange(new PrizmDay(2010, 1, 1), new PrizmDay(2010, 2, 2));
        this.nativeValueTimeFrom$$ = new BehaviorSubject('');
        this.nativeValueTimeTo$$ = new BehaviorSubject('');
        this.nativeValueFrom$$ = new BehaviorSubject('');
        this.nativeValueTo$$ = new BehaviorSubject('');
        this.nativeValue$$ = combineLatest([
            this.nativeValueFrom$$.pipe(distinctUntilChanged()),
            this.nativeValueTimeFrom$$.pipe(distinctUntilChanged()),
            this.nativeValueTo$$.pipe(distinctUntilChanged()),
            this.nativeValueTimeTo$$.pipe(distinctUntilChanged()),
        ]).pipe(debounceTime(0), map(([from, fromTime, to, toTime]) => {
            return {
                timeRange: [fromTime, toTime],
                dayRange: [from, to],
            };
        }));
        this.hasNativeValue$ = this.nativeValue$$.pipe(map(value => {
            return hasValueInArray(value?.timeRange) || hasValueInArray(value?.dayRange);
        }), share());
        this.empty$ = combineLatest([this.value$, this.nativeValue$$]).pipe(map(([value, nativeValue]) => {
            return (emptyValue(value?.dayRange) &&
                emptyValue(nativeValue.dayRange) &&
                emptyValue(value?.timeRange) &&
                emptyValue(nativeValue.timeRange));
        }));
        this.closeOnOutsideClick = true;
    }
    get focused() {
        return this.focusableElement?.focused$ ?? of(false);
    }
    get canOpen() {
        return this.interactive;
    }
    get computedTimeMask() {
        return prizmCreateTimeNgxMask(this.timeMode);
    }
    get computedDateMask() {
        return prizmCreateDateNgxMask(this.dateFormat, this.dateSeparator);
    }
    get fromValue() {
        const value = this.value?.dayRange?.from?.toString() ?? '';
        if (!value) {
            return this.nativeValueFrom$$.value || '';
        }
        return value;
    }
    get fromTimeValue() {
        const val = this.timeToString(this.value?.timeRange?.from) ?? '';
        if (!val) {
            return this.nativeValueTimeFrom$$.value || '';
        }
        return val;
    }
    get toValue() {
        const value = this.value?.dayRange?.to?.toString() ?? '';
        if (!value) {
            return this.nativeValueTo$$.value || '';
        }
        return value;
    }
    get toTimeValue() {
        const val = this.timeToString(this.value?.timeRange?.to) ?? '';
        if (!val) {
            return this.nativeValueTimeTo$$.value || '';
        }
        return val;
    }
    onOpenChange(open) {
        this.open = open;
        this.changeDetectorRef.markForCheck();
    }
    completeDateIfAreNotPending() {
        const fromValue = this.nativeValueFrom$$.value;
        const toValue = this.nativeValueTo$$.value;
        const fromTimeValue = this.nativeValueTimeFrom$$.value;
        const toTimeValue = this.nativeValueTimeTo$$.value;
        // stop if empty
        if (!fromValue && !toValue && !fromTimeValue && !toTimeValue)
            return;
        // stop if started value
        if (fromValue && fromValue.length !== this.computedDateMask.length)
            return;
        if (toValue && toValue.length !== this.computedDateMask.length)
            return;
        if (fromTimeValue && fromTimeValue.length !== this.computedTimeMask.length)
            return;
        if (toTimeValue && toTimeValue.length !== this.computedTimeMask.length)
            return;
        const parsedFrom = fromValue
            ? PrizmDay.normalizeParse(fromValue, this.dateFormat)
            : new PrizmDay(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
        const parsedTo = toValue ? PrizmDay.normalizeParse(toValue, this.dateFormat) : parsedFrom.append({});
        const parsedTimeTo = PrizmTime.correctTime(toTimeValue ? PrizmTime.fromString(toTimeValue) : new PrizmTime(23, 59));
        const parsedTimeFrom = PrizmTime.correctTime(fromTimeValue ? PrizmTime.fromString(fromTimeValue) : new PrizmTime(0, 0));
        this.nativeValueTo$$.next(parsedTo.toString(this.dateFormat));
        this.nativeValueFrom$$.next(parsedFrom.toString(this.dateFormat));
        this.nativeValueTimeTo$$.next(parsedTimeTo.toString(this.timeMode));
        this.nativeValueTimeFrom$$.next(parsedTimeFrom.toString(this.timeMode));
    }
    ngAfterViewInit() {
        this.focusableElement?.blur$
            .pipe(debounceTime(0), filterTruthy(), tap(() => this.completeDateIfAreNotPending()), takeUntil(this.destroy$))
            .subscribe();
    }
    ngOnInit() {
        super.ngOnInit();
        this.rightButtons$ = this.extraButtonInjector.get(PRIZM_DATE_RIGHT_BUTTONS);
        this.nativeValue$$
            .pipe(tap(({ dayRange, timeRange }) => {
            const fromValue = dayRange[0];
            const toValue = dayRange[1];
            const fromTimeValue = timeRange[0];
            const toTimeValue = timeRange[1];
            if (!fromValue || fromValue.length !== this.computedDateMask.length)
                return;
            if (!toValue || toValue.length !== this.computedDateMask.length)
                return;
            if (!fromTimeValue || fromTimeValue.length !== this.computedTimeMask.length)
                return;
            if (!toTimeValue || toTimeValue.length !== this.computedTimeMask.length)
                return;
            if (fromValue === this.value?.dayRange?.from.toString() &&
                fromTimeValue === this.value?.timeRange?.from.toString(this.timeMode) &&
                toValue === this.value?.dayRange?.to.toString() &&
                toTimeValue === this.value?.timeRange?.to.toString(this.timeMode)) {
                return;
            }
            this.updateWithCorrectDateAndTime(
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            fromValue && fromValue.length === this.computedDateMask.length && fromValue, toValue && toValue.length === this.computedDateMask.length && toValue, fromTimeValue && fromTimeValue.length === this.computedTimeMask.length && fromTimeValue, toTimeValue && toTimeValue.length === this.computedTimeMask.length && toTimeValue);
        }), takeUntil(this.destroy$))
            .subscribe();
    }
    timeToString(value) {
        return value instanceof PrizmTime ? value.toString(this.timeMode) : null;
    }
    onDateValueChange(value, isFormValue) {
        if (isFormValue && value === this.fromValue)
            return;
        if (!isFormValue && value === this.toValue)
            return;
        if (isFormValue)
            this.nativeValueFrom$$.next(value);
        else
            this.nativeValueTo$$.next(value);
        if (value == null) {
            this.onOpenChange(true);
        }
    }
    onTimeValueChange(value, isFormValue) {
        if (isFormValue && value === this.fromTimeValue)
            return;
        if (!isFormValue && value === this.toTimeValue)
            return;
        if (isFormValue)
            this.nativeValueTimeFrom$$.next(value);
        else
            this.nativeValueTimeTo$$.next(value);
        if (value == null) {
            this.onOpenChange(true);
        }
    }
    onRangeChange(range) {
        this.focusInput();
        if (!range) {
            this.nativeValueTo$$.next('');
            this.nativeValueFrom$$.next('');
        }
        if (!prizmNullableSame(this.value?.dayRange, range, (a, b) => a?.daySame(b))) {
            const newValue = new PrizmDateTimeRange(range, (this.value?.timeRange ?? null));
            this.updateValue(newValue);
            this.open = false;
        }
        this.nativeValueTo$$.next(range?.to?.toString() ?? '');
        this.nativeValueFrom$$.next(range?.from?.toString() ?? '');
        this.changeDetectorRef.markForCheck();
    }
    updateWithCorrectDateAndTime(from, to, fromTime, toTime) {
        let parsedFrom = from ? PrizmDay.normalizeParse(from, this.dateFormat) : this.value?.dayRange?.from;
        let parsedTo = to ? PrizmDay.normalizeParse(to, this.dateFormat) : this.value?.dayRange?.to;
        if (parsedFrom)
            parsedFrom = this.dayLimit(parsedFrom);
        if (parsedTo)
            parsedTo = this.dayLimit(parsedTo);
        let parsedTimeFrom = fromTime && PrizmTime.correctTime(PrizmTime.fromString(fromTime));
        let parsedTimeTo = toTime && PrizmTime.correctTime(PrizmTime.fromString(toTime));
        if (parsedTimeFrom)
            parsedTimeFrom = this.timeLimit([parsedFrom, parsedTimeFrom]);
        if (parsedTimeTo)
            parsedTimeTo = this.timeLimit([parsedTo, parsedTimeTo]);
        if (parsedTimeTo || parsedTimeFrom) {
            if (!parsedFrom) {
                parsedFrom = PrizmDay.fromLocalNativeDate(new Date());
            }
            if (!parsedTo) {
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                parsedTo = PrizmDay.fromLocalNativeDate(tomorrow);
            }
        }
        this.updateValue(new PrizmDateTimeRange((parsedFrom && parsedTo ? new PrizmDayRange(parsedFrom, parsedTo) : null), (parsedTimeFrom && parsedTimeTo ? new PrizmTimeRange(parsedTimeFrom, parsedTimeTo) : null)));
    }
    timeLimit(value) {
        if (!value)
            return null;
        let [, parsedTime] = value;
        if (parsedTime)
            parsedTime = parsedTime.timeLimit(this.getTimeFromMinMax(this.min), this.getTimeFromMinMax(this.max));
        return parsedTime;
    }
    getDayFromMinMax(value) {
        return Array.isArray(value) ? value[0] : value instanceof PrizmDateTime ? value.day : value;
    }
    getTimeFromMinMax(value) {
        return Array.isArray(value) ? value[1] : value instanceof PrizmDateTime ? value.time : null;
    }
    dayLimit(value) {
        return value.dayLimit(this.getDayFromMinMax(this.min), this.getDayFromMinMax(this.max));
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValueTimeFrom$$.next(value?.timeRange?.from?.toString(this.timeMode) ?? '');
        this.nativeValueTimeTo$$.next(value?.timeRange?.to?.toString(this.timeMode) ?? '');
        this.nativeValueFrom$$.next(value?.dayRange?.from?.toString() ?? '');
        this.nativeValueTo$$.next(value?.dayRange?.to?.toString() ?? '');
    }
    toggle() {
        this.open = !this.open;
    }
    focusInput() {
        this.focusableElement?.focus(0);
    }
    clear(ev) {
        ev.stopImmediatePropagation();
        super.clear(ev);
        this.nativeValueTo$$.next('');
        this.nativeValueFrom$$.next('');
        this.nativeValueTimeFrom$$.next('');
        this.nativeValueTimeTo$$.next('');
        this.layoutComponent?.cdr.markForCheck();
    }
    updateTimeTo(value) {
        // TODO: #mz add min max
        if (value &&
            this.value?.timeRange?.to instanceof PrizmTime &&
            this.value?.timeRange?.to?.isSameTime(value))
            return;
        const range = PrizmDateTimeRange.safeUpdateTimeTo(this.value, value);
        this.updateValue(range?.copy());
    }
    updateTimeFrom(value) {
        // TODO: #mz add min max
        if (value &&
            this.value?.timeRange?.from instanceof PrizmTime &&
            this.value?.timeRange?.from?.isSameTime(value))
            return;
        // const range = PrizmDateTimeRange.safeUpdateTimeFrom(this.value, value);
        // this.updateValue(range?.copy());
        this.nativeValueTimeFrom$$.next(value.toString(this.timeMode));
    }
    referFocusToMain(referFocus = true) {
        if (!referFocus)
            return;
        // TODO create operator and rxjs functin to run sequence in event loop
        of(null)
            .pipe(delay(0), tap(() => {
            this.focusableElement?.selectionToStart();
        }))
            .subscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmInputLayoutDateTimeRangeComponent, deps: [{ token: ChangeDetectorRef }, { token: Injector }, { token: PrizmDialogService }, { token: PRIZM_DATE_FORMAT, optional: true }, { token: PRIZM_DATE_SEPARATOR }, { token: PRIZM_DATE_TEXTS }, { token: PRIZM_DATE_RANGE_VALUE_TRANSFORMER, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: PrizmInputLayoutDateTimeRangeComponent, isStandalone: true, selector: "prizm-input-layout-date-time-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonth: "defaultViewedMonth", items: "items", placeholder: "placeholder", min: "min", max: "max", timeStrict: "timeStrict", minLength: "minLength", maxLength: "maxLength", timeMode: "timeMode", timeItems: "timeItems", extraButtonInjector: "extraButtonInjector" }, providers: [
            ...prizmI18nInitWithKeys({
                time: PRIZM_TIME_TEXTS,
                dateTexts: PRIZM_DATE_TEXTS,
            }),
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PrizmInputLayoutDateTimeRangeComponent),
                multi: true,
            },
            PrizmDestroyService,
            { provide: PrizmInputControl, useExisting: PrizmInputLayoutDateTimeRangeComponent },
        ], queries: [{ propertyName: "footerFromTemplate", first: true, predicate: ["footerFrom"], descendants: true, read: TemplateRef }, { propertyName: "footerToTemplate", first: true, predicate: ["footerTo"], descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElementRef"], descendants: true, read: PrizmInputZoneDirective }], usesInheritance: true, ngImport: i0, template: "<prizm-dropdown-host\n  class=\"z-hosted\"\n  [canOpen]=\"canOpen\"\n  [content]=\"dropdown\"\n  [closeByEsc]=\"true\"\n  [closeOnOutsideClick]=\"closeOnOutsideClick\"\n  [prizmDropdownHostWidth]=\"'auto'\"\n  [isOpen]=\"canOpen && !disabled && open\"\n  [prizmDropdownHost]=\"layoutComponent?.el?.nativeElement\"\n  (isOpenChange)=\"onOpenChange($event)\"\n  prizmDropdownHostWidth=\"auto\"\n>\n  <div\n    class=\"multiple-input-box\"\n    #focusableElementRef=\"prizmInputZone\"\n    [attr.data-placeholder]=\"placeholder\"\n    prizmInputZone\n  >\n    <input\n      class=\"input-main\"\n      [class.show-placeholder]=\"\n        (empty | async) && (disabled || (focusableElementRef.focused$ | async) !== true)\n      \"\n      [placeholder]=\"placeholder\"\n      [mask]=\"computedDateMask\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [dropSpecialCharacters]=\"false\"\n      [disabled]=\"disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"fromValue\"\n      [size]=\"computedDateMask.length\"\n      [maxLength]=\"computedDateMask.length + 1\"\n      [maxSize]=\"computedDateMask.length\"\n      (click)=\"referFocusToMain(!fromValue)\"\n      (ngModelChange)=\"onDateValueChange($event || '', true)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <input\n      class=\"input-time\"\n      [mask]=\"computedTimeMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"fromTimeValue\"\n      [size]=\"computedTimeMask.length\"\n      [maxLength]=\"computedTimeMask.length + 1\"\n      [maxSize]=\"computedTimeMask.length\"\n      (ngModelChange)=\"onTimeValueChange($event, true)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <span class=\"delimiter\">-</span>\n    <input\n      class=\"input-time\"\n      [mask]=\"computedDateMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"!!disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"toValue\"\n      [size]=\"computedDateMask.length\"\n      [maxLength]=\"computedDateMask.length + 1\"\n      [maxSize]=\"computedDateMask.length\"\n      (ngModelChange)=\"onDateValueChange($event || '', false)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <input\n      class=\"input-time\"\n      [mask]=\"computedTimeMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"!!disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"toTimeValue\"\n      [size]=\"computedTimeMask.length\"\n      [maxLength]=\"computedTimeMask.length + 1\"\n      [maxSize]=\"computedTimeMask.length\"\n      (ngModelChange)=\"onTimeValueChange($event, false)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n  </div>\n\n  <!--  TODO add after create time range component -->\n  <!--  <ng-template #dropdownTimeTemplate>-->\n  <!--    <prizm-data-list-->\n  <!--      class=\"block\"-->\n  <!--      *ngIf=\"timeItems.length\"-->\n  <!--      [style.&#45;&#45;prizm-data-list-border]=\"0\"-->\n  <!--      (prizmAfterViewInit)=\"markAsTouched(); prizmDropdownHostComponent.reCalculatePositions()\"-->\n  <!--      (prizmOnDestroy)=\"openTimeTemplate = false\"-->\n  <!--      prizmLifecycle-->\n  <!--    >-->\n  <!--      <ng-container>-->\n  <!--        <div-->\n  <!--          class=\"time-item\"-->\n  <!--          *ngFor=\"let item of timeItems; let idx = index\"-->\n  <!--          (click)=\"$event.stopPropagation(); onTimeMenuClick(item, $event)\"-->\n  <!--        >-->\n  <!--        <span class=\"text\">-->\n  <!--          {{ item }}-->\n  <!--        </span>-->\n  <!--        </div>-->\n  <!--      </ng-container>-->\n  <!--    </prizm-data-list>-->\n  <!--  </ng-template>-->\n  <!--  -->\n  <ng-template #dropdown>\n    <prizm-calendar-range\n      [style.--prizm-input-layout-width]=\"'100%'\"\n      [style.--prizm-dropdown-host-width]=\"'100%'\"\n      [defaultViewedMonth]=\"defaultViewedMonth\"\n      [disabledItemHandler]=\"disabledItemHandler\"\n      [items]=\"items\"\n      [min]=\"calendarMinDay\"\n      [max]=\"calendarMaxDay\"\n      [markerHandler]=\"markerHandler\"\n      [minLength]=\"minLength\"\n      [maxLength]=\"maxLength\"\n      [value]=\"$any(value?.dayRange)\"\n      (prizmAfterViewInit)=\"markAsTouched()\"\n      (valueChange)=\"onRangeChange($event)\"\n    >\n      <ng-container footerFrom>\n        <prizm-input-layout label=\"\u0412\u0440\u0435\u043C\u044F\">\n          <prizm-input-layout-time\n            [style.--prizm-dropdown-host-width]=\"'100%'\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"value?.timeRange?.from\"\n            [items]=\"timeItems\"\n            [strict]=\"timeStrict\"\n            [mode]=\"timeMode\"\n            (ngModelChange)=\"updateTimeFrom($event)\"\n          >\n          </prizm-input-layout-time>\n        </prizm-input-layout>\n      </ng-container>\n      <ng-container footerTo>\n        <prizm-input-layout label=\"\u0412\u0440\u0435\u043C\u044F\">\n          <prizm-input-layout-time\n            [style.--prizm-dropdown-host-width]=\"'100%'\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"value?.timeRange?.to\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [strict]=\"timeStrict\"\n            [items]=\"timeItems\"\n            [mode]=\"timeMode\"\n            (ngModelChange)=\"updateTimeTo($event)\"\n          >\n          </prizm-input-layout-time>\n        </prizm-input-layout>\n      </ng-container>\n    </prizm-calendar-range>\n  </ng-template>\n</prizm-dropdown-host>\n\n<ng-container *prizmInputLayoutRight>\n  <button\n    [interactive]=\"true\"\n    [style.--prizm-input-icon-button-width]=\"'24px'\"\n    [disabled]=\"!!disabled\"\n    (click)=\"focusableElementRef.focus(); onOpenChange(!open)\"\n    prizmInputIconButton=\"date-calendar-range\"\n  ></button>\n  <!--  TODO add after create time-range modal -->\n  <!--  <button-->\n  <!--    [interactive]=\"true\"-->\n  <!--    [disabled]=\"disabled\"-->\n  <!--    (click)=\"onOpen(!open)\"-->\n  <!--    prizmInputIconButton=\"date-clock\"-->\n  <!--  ></button>-->\n  <ng-container *ngFor=\"let button of rightButtons$ | async\" [ngTemplateOutlet]=\"button.template\">\n  </ng-container>\n</ng-container>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.z-hosted{display:block;border-radius:inherit}.z-textfield{border-radius:inherit;text-align:inherit}.z-icon{pointer-events:auto}input{width:calc(var(--prizm-input-in-zone-max-size) * 1cm)}\n", ":host{display:block}:host::placeholder{color:var(--prizm-v3-text-icon-disable)}.multiple-input-box{display:flex;gap:2px;padding:22px 8px 4px 0}.multiple-input-box input{width:calc(var(--prizm-input-in-zone-max-size) * .9ch)}.multiple-input-box .input-main.show-placeholder{width:100%}.multiple-input-box .input-main.show-placeholder~input,.multiple-input-box .input-main.show-placeholder~.delimiter{display:none}:host-context(.prizm-input-form-outer) .multiple-input-box{padding:7px 0}:host-context(.prizm-input-form-outer[data-size=\"l\"]) .multiple-input-box{padding:11px 0}:host-context(.prizm-input-form-outer[data-size=\"m\"]) .multiple-input-box{padding:7px 0}:host-context(.prizm-input-form-outer[data-size=\"s\"]) .multiple-input-box{font-size:12px;padding:4px 0}:host-context(.prizm-input-form-inner) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:4px}:host-context(.prizm-input-form-inner) :host-context(.prizm-input-empty-label) .multiple-input-box :host::placeholder{opacity:1}:host-context(.prizm-input-form-inner) .multiple-input-box{padding:22px 8px 4px 0}:host-context(.prizm-input-form-inner) .multiple-input-box :host::placeholder{opacity:0}:host-context(.prizm-input-form-inner) .multiple-input-box :host:focus::placeholder{opacity:1;transition:opacity .2s ease 0s}:host-context(.prizm-input-form-center){text-align:center}:host-context(.prizm-input-form-inner[data-size=\"l\"]) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:4px}:host-context(.prizm-input-form-inner[data-size=\"l\"]) .multiple-input-box{padding:22px 8px 4px 0}:host-context(.prizm-input-form-inner[data-size=\"m\"]) .multiple-input-box{padding:16px 8px 2px 0}:host-context(.prizm-input-form-inner[data-size=\"m\"]) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:2px}.placeholder-input-search.hidden{position:absolute;top:-10000px;left:-10000px;opacity:0}.placeholder-input-search:not(.hidden)~input,.placeholder-input-search:not(.hidden)~.delimiter{display:none}.delimiter{line-height:16px;height:16px;margin:0 .25ch}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }, { kind: "ngmodule", type: PrizmMaskModule }, { kind: "directive", type: i2.NgxMaskDirective, selector: "input[mask], textarea[mask]", inputs: ["mask", "specialCharacters", "patterns", "prefix", "suffix", "thousandSeparator", "decimalMarker", "dropSpecialCharacters", "hiddenInput", "showMaskTyped", "placeHolderCharacter", "shownMaskExpression", "showTemplate", "clearIfNotMatch", "validation", "separatorLimit", "allowNegativeNumbers", "leadZeroDateTime", "leadZero", "triggerOnMaskChange", "apm"], outputs: ["maskFilled"], exportAs: ["mask", "ngxMask"] }, { kind: "ngmodule", type: PrizmInputZoneModule }, { kind: "directive", type: i3.PrizmInputZoneDirective, selector: "[prizmInputZone]", outputs: ["focused$", "blur$"], exportAs: ["prizmInputZone"] }, { kind: "directive", type: i4.PrizmInputInZoneDirective, selector: "input[prizmInputInZone]", inputs: ["idx", "maxSize"], outputs: ["updateNativeValue", "focused$", "blured$"], exportAs: ["prizmInputInZone"] }, { kind: "ngmodule", type: PrizmLifecycleModule }, { kind: "directive", type: i5.PrizmLifecycleDirective, selector: "[prizmLifecycle], [prizmAfterViewInit], [prizmAfterContentInit], [prizmOnInit], [prizmOnDestroy]", outputs: ["prizmAfterViewInit", "prizmOnInit", "prizmAfterContentInit", "prizmOnDestroy"], exportAs: ["prizmLifecycle"] }, { kind: "ngmodule", type: PrizmInputLayoutTimeModule }, { kind: "component", type: i6.PrizmInputLayoutTimeComponent, selector: "prizm-input-layout-time", inputs: ["placeholder", "disabledItemHandler", "items", "itemSize", "strict", "mode", "extraButtonInjector"] }, { kind: "component", type: i7.PrizmInputLayoutComponent, selector: "prizm-input-layout", inputs: ["label", "size", "status", "outer", "clearButton", "border", "position", "forceClear"], outputs: ["clear"] }, { kind: "component", type: i8.PrizmInputIconButtonComponent, selector: "button[prizmInputIconButton]", inputs: ["size", "prizmInputIconButton", "interactive", "disabled", "type"] }, { kind: "directive", type: i9.PrizmInputLayoutRightDirective, selector: "ng-template[prizmInputLayoutRight]" }, { kind: "component", type: i10.PrizmInputTextComponent, selector: "input[prizmInput]:not([type=number]), textarea[prizmInput], input[prizmInputPassword]", inputs: ["disabled", "placeholder", "required", "value"], outputs: ["enter", "onClear", "valueChanged"], exportAs: ["prizmInput"] }, { kind: "ngmodule", type: PrizmInputTextModule }, { kind: "component", type: PrizmDropdownHostComponent, selector: "prizm-dropdown-host", inputs: ["content", "prizmDropdownHostId", "prizmDropdownCustomContext", "delay", "canOpen", "closeByEsc", "closeOnOutsideClick", "prizmDropdownHost", "prizmDropdownHostWidth", "autoReposition", "placement", "isOpen", "dropdownStyles", "dropdownClasses"], outputs: ["isOpenChange"], exportAs: ["prizm-dropdown-host"] }, { kind: "component", type: PrizmCalendarRangeComponent, selector: "prizm-calendar-range", inputs: ["defaultViewedMonth", "disabledItemHandler", "markerHandler", "items", "min", "max", "minLength", "maxLength", "value"], outputs: ["valueChange", "rangeChange"] }, { kind: "ngmodule", type: PrizmValueAccessorModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i11.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i11.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i11.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] }); }
}
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Function)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "markerHandler", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "defaultViewedMonth", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Array)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "items", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "placeholder", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "min", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "max", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "timeStrict", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "minLength", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Object)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "maxLength", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", String)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "timeMode", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Array)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "timeItems", void 0);
__decorate([
    prizmDefaultProp(),
    __metadata("design:type", Injector)
], PrizmInputLayoutDateTimeRangeComponent.prototype, "extraButtonInjector", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: PrizmInputLayoutDateTimeRangeComponent, decorators: [{
            type: Component,
            args: [{ selector: `prizm-input-layout-date-time-range`, providers: [
                        ...prizmI18nInitWithKeys({
                            time: PRIZM_TIME_TEXTS,
                            dateTexts: PRIZM_DATE_TEXTS,
                        }),
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => PrizmInputLayoutDateTimeRangeComponent),
                            multi: true,
                        },
                        PrizmDestroyService,
                        { provide: PrizmInputControl, useExisting: PrizmInputLayoutDateTimeRangeComponent },
                    ], standalone: true, imports: [
                        CommonModule,
                        PrizmInputLayoutDateTimeRangeComponent,
                        PrizmMaskModule,
                        PrizmInputZoneModule,
                        PrizmLifecycleModule,
                        PrizmLetDirective,
                        PrizmDataListComponent,
                        PrizmInputLayoutTimeModule,
                        PolymorphOutletDirective,
                        PrizmInputTextModule,
                        PrizmIconComponent,
                        PrizmDropdownHostComponent,
                        PrizmCalendarRangeComponent,
                        PrizmValueAccessorModule,
                        FormsModule,
                    ], template: "<prizm-dropdown-host\n  class=\"z-hosted\"\n  [canOpen]=\"canOpen\"\n  [content]=\"dropdown\"\n  [closeByEsc]=\"true\"\n  [closeOnOutsideClick]=\"closeOnOutsideClick\"\n  [prizmDropdownHostWidth]=\"'auto'\"\n  [isOpen]=\"canOpen && !disabled && open\"\n  [prizmDropdownHost]=\"layoutComponent?.el?.nativeElement\"\n  (isOpenChange)=\"onOpenChange($event)\"\n  prizmDropdownHostWidth=\"auto\"\n>\n  <div\n    class=\"multiple-input-box\"\n    #focusableElementRef=\"prizmInputZone\"\n    [attr.data-placeholder]=\"placeholder\"\n    prizmInputZone\n  >\n    <input\n      class=\"input-main\"\n      [class.show-placeholder]=\"\n        (empty | async) && (disabled || (focusableElementRef.focused$ | async) !== true)\n      \"\n      [placeholder]=\"placeholder\"\n      [mask]=\"computedDateMask\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [dropSpecialCharacters]=\"false\"\n      [disabled]=\"disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"fromValue\"\n      [size]=\"computedDateMask.length\"\n      [maxLength]=\"computedDateMask.length + 1\"\n      [maxSize]=\"computedDateMask.length\"\n      (click)=\"referFocusToMain(!fromValue)\"\n      (ngModelChange)=\"onDateValueChange($event || '', true)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <input\n      class=\"input-time\"\n      [mask]=\"computedTimeMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"fromTimeValue\"\n      [size]=\"computedTimeMask.length\"\n      [maxLength]=\"computedTimeMask.length + 1\"\n      [maxSize]=\"computedTimeMask.length\"\n      (ngModelChange)=\"onTimeValueChange($event, true)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <span class=\"delimiter\">-</span>\n    <input\n      class=\"input-time\"\n      [mask]=\"computedDateMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"!!disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"toValue\"\n      [size]=\"computedDateMask.length\"\n      [maxLength]=\"computedDateMask.length + 1\"\n      [maxSize]=\"computedDateMask.length\"\n      (ngModelChange)=\"onDateValueChange($event || '', false)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n    <input\n      class=\"input-time\"\n      [mask]=\"computedTimeMask\"\n      [dropSpecialCharacters]=\"false\"\n      [clearIfNotMatch]=\"false\"\n      [showMaskTyped]=\"(focusableElementRef.focused$ | async) || (hasNativeValue$ | async)\"\n      [disabled]=\"!!disabled\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      [ngModel]=\"toTimeValue\"\n      [size]=\"computedTimeMask.length\"\n      [maxLength]=\"computedTimeMask.length + 1\"\n      [maxSize]=\"computedTimeMask.length\"\n      (ngModelChange)=\"onTimeValueChange($event, false)\"\n      style=\"padding: 0\"\n      prizmInput\n      prizmInputInZone\n    />\n  </div>\n\n  <!--  TODO add after create time range component -->\n  <!--  <ng-template #dropdownTimeTemplate>-->\n  <!--    <prizm-data-list-->\n  <!--      class=\"block\"-->\n  <!--      *ngIf=\"timeItems.length\"-->\n  <!--      [style.&#45;&#45;prizm-data-list-border]=\"0\"-->\n  <!--      (prizmAfterViewInit)=\"markAsTouched(); prizmDropdownHostComponent.reCalculatePositions()\"-->\n  <!--      (prizmOnDestroy)=\"openTimeTemplate = false\"-->\n  <!--      prizmLifecycle-->\n  <!--    >-->\n  <!--      <ng-container>-->\n  <!--        <div-->\n  <!--          class=\"time-item\"-->\n  <!--          *ngFor=\"let item of timeItems; let idx = index\"-->\n  <!--          (click)=\"$event.stopPropagation(); onTimeMenuClick(item, $event)\"-->\n  <!--        >-->\n  <!--        <span class=\"text\">-->\n  <!--          {{ item }}-->\n  <!--        </span>-->\n  <!--        </div>-->\n  <!--      </ng-container>-->\n  <!--    </prizm-data-list>-->\n  <!--  </ng-template>-->\n  <!--  -->\n  <ng-template #dropdown>\n    <prizm-calendar-range\n      [style.--prizm-input-layout-width]=\"'100%'\"\n      [style.--prizm-dropdown-host-width]=\"'100%'\"\n      [defaultViewedMonth]=\"defaultViewedMonth\"\n      [disabledItemHandler]=\"disabledItemHandler\"\n      [items]=\"items\"\n      [min]=\"calendarMinDay\"\n      [max]=\"calendarMaxDay\"\n      [markerHandler]=\"markerHandler\"\n      [minLength]=\"minLength\"\n      [maxLength]=\"maxLength\"\n      [value]=\"$any(value?.dayRange)\"\n      (prizmAfterViewInit)=\"markAsTouched()\"\n      (valueChange)=\"onRangeChange($event)\"\n    >\n      <ng-container footerFrom>\n        <prizm-input-layout label=\"\u0412\u0440\u0435\u043C\u044F\">\n          <prizm-input-layout-time\n            [style.--prizm-dropdown-host-width]=\"'100%'\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"value?.timeRange?.from\"\n            [items]=\"timeItems\"\n            [strict]=\"timeStrict\"\n            [mode]=\"timeMode\"\n            (ngModelChange)=\"updateTimeFrom($event)\"\n          >\n          </prizm-input-layout-time>\n        </prizm-input-layout>\n      </ng-container>\n      <ng-container footerTo>\n        <prizm-input-layout label=\"\u0412\u0440\u0435\u043C\u044F\">\n          <prizm-input-layout-time\n            [style.--prizm-dropdown-host-width]=\"'100%'\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [ngModel]=\"value?.timeRange?.to\"\n            [ngModelOptions]=\"{ standalone: true }\"\n            [strict]=\"timeStrict\"\n            [items]=\"timeItems\"\n            [mode]=\"timeMode\"\n            (ngModelChange)=\"updateTimeTo($event)\"\n          >\n          </prizm-input-layout-time>\n        </prizm-input-layout>\n      </ng-container>\n    </prizm-calendar-range>\n  </ng-template>\n</prizm-dropdown-host>\n\n<ng-container *prizmInputLayoutRight>\n  <button\n    [interactive]=\"true\"\n    [style.--prizm-input-icon-button-width]=\"'24px'\"\n    [disabled]=\"!!disabled\"\n    (click)=\"focusableElementRef.focus(); onOpenChange(!open)\"\n    prizmInputIconButton=\"date-calendar-range\"\n  ></button>\n  <!--  TODO add after create time-range modal -->\n  <!--  <button-->\n  <!--    [interactive]=\"true\"-->\n  <!--    [disabled]=\"disabled\"-->\n  <!--    (click)=\"onOpen(!open)\"-->\n  <!--    prizmInputIconButton=\"date-clock\"-->\n  <!--  ></button>-->\n  <ng-container *ngFor=\"let button of rightButtons$ | async\" [ngTemplateOutlet]=\"button.template\">\n  </ng-container>\n</ng-container>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.z-hosted{display:block;border-radius:inherit}.z-textfield{border-radius:inherit;text-align:inherit}.z-icon{pointer-events:auto}input{width:calc(var(--prizm-input-in-zone-max-size) * 1cm)}\n", ":host{display:block}:host::placeholder{color:var(--prizm-v3-text-icon-disable)}.multiple-input-box{display:flex;gap:2px;padding:22px 8px 4px 0}.multiple-input-box input{width:calc(var(--prizm-input-in-zone-max-size) * .9ch)}.multiple-input-box .input-main.show-placeholder{width:100%}.multiple-input-box .input-main.show-placeholder~input,.multiple-input-box .input-main.show-placeholder~.delimiter{display:none}:host-context(.prizm-input-form-outer) .multiple-input-box{padding:7px 0}:host-context(.prizm-input-form-outer[data-size=\"l\"]) .multiple-input-box{padding:11px 0}:host-context(.prizm-input-form-outer[data-size=\"m\"]) .multiple-input-box{padding:7px 0}:host-context(.prizm-input-form-outer[data-size=\"s\"]) .multiple-input-box{font-size:12px;padding:4px 0}:host-context(.prizm-input-form-inner) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:4px}:host-context(.prizm-input-form-inner) :host-context(.prizm-input-empty-label) .multiple-input-box :host::placeholder{opacity:1}:host-context(.prizm-input-form-inner) .multiple-input-box{padding:22px 8px 4px 0}:host-context(.prizm-input-form-inner) .multiple-input-box :host::placeholder{opacity:0}:host-context(.prizm-input-form-inner) .multiple-input-box :host:focus::placeholder{opacity:1;transition:opacity .2s ease 0s}:host-context(.prizm-input-form-center){text-align:center}:host-context(.prizm-input-form-inner[data-size=\"l\"]) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:4px}:host-context(.prizm-input-form-inner[data-size=\"l\"]) .multiple-input-box{padding:22px 8px 4px 0}:host-context(.prizm-input-form-inner[data-size=\"m\"]) .multiple-input-box{padding:16px 8px 2px 0}:host-context(.prizm-input-form-inner[data-size=\"m\"]) :host-context(.prizm-input-empty-label) .multiple-input-box{padding-top:2px}.placeholder-input-search.hidden{position:absolute;top:-10000px;left:-10000px;opacity:0}.placeholder-input-search:not(.hidden)~input,.placeholder-input-search:not(.hidden)~.delimiter{display:none}.delimiter{line-height:16px;height:16px;margin:0 .25ch}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }, { type: i12.PrizmDialogService, decorators: [{
                    type: Inject,
                    args: [PrizmDialogService]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRIZM_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PRIZM_DATE_SEPARATOR]
                }] }, { type: i13.Observable, decorators: [{
                    type: Inject,
                    args: [PRIZM_DATE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PRIZM_DATE_RANGE_VALUE_TRANSFORMER]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElementRef', { read: PrizmInputZoneDirective }]
            }], footerFromTemplate: [{
                type: ContentChild,
                args: ['footerFrom', { read: TemplateRef }]
            }], footerToTemplate: [{
                type: ContentChild,
                args: ['footerTo', { read: TemplateRef }]
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonth: [{
                type: Input
            }], items: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], timeStrict: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], timeMode: [{
                type: Input
            }], timeItems: [{
                type: Input
            }], extraButtonInjector: [{
                type: Input
            }] } });
// TODO refactotor and move to utils
function hasValueInArray(values) {
    return !!values.find(i => Boolean(i));
}
function emptyValue(values) {
    return !values || (Array.isArray(values) && !hasValueInArray(values));
}
//# sourceMappingURL=data:application/json;base64,