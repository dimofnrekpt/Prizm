import { PRIZM_RANGE_SEPARATOR_CHAR } from './date-time';
import { PrizmDayRange } from './day-range';
import { PrizmTimeRange } from './time-range';
import { PrizmTime } from './time';
export class PrizmDateTimeRange {
    constructor(dayRange, timeRange = new PrizmTimeRange(new PrizmTime(0, 0), new PrizmTime(0, 0))) {
        this.dayRange = dayRange;
        this.timeRange = timeRange;
    }
    static safeUpdateTimeFrom(origin, time) {
        origin = PrizmDateTimeRange.createIfNotExist(origin);
        if (!origin.timeRange)
            origin.timeRange = new PrizmTimeRange(new PrizmTime(0, 0), new PrizmTime(0, 0));
        origin.timeRange.from = time;
        return origin;
    }
    static safeUpdateTimeTo(origin, time) {
        origin = PrizmDateTimeRange.createIfNotExist(origin);
        if (!origin.timeRange)
            origin.timeRange = new PrizmTimeRange(new PrizmTime(0, 0), new PrizmTime(23, 59));
        origin.timeRange.to = time;
        return origin;
    }
    static createIfNotExist(origin) {
        if (!origin || !(origin instanceof PrizmDateTimeRange))
            origin = new PrizmDateTimeRange(PrizmDayRange.fromLocalNativeDate(new Date(), new Date()), new PrizmTimeRange(new PrizmTime(0, 0), new PrizmTime(0, 0)));
        return origin;
    }
    copy() {
        return new PrizmDateTimeRange(this.dayRange, this.timeRange);
    }
    toString(dateFormat = `DMY`, timeFormat = `HH:MM`, dateSeparator = `.`) {
        if (!this.dayRange?.from || !this.dayRange?.to || !this.timeRange?.from || !this.timeRange?.to)
            return '';
        const from = this.dayRange.from.getFormattedDay(dateFormat, dateSeparator);
        const fromTime = this.timeRange.from.toString(timeFormat);
        const to = this.dayRange.to.getFormattedDay(dateFormat, dateSeparator);
        const toTime = this.timeRange.to.toString(timeFormat);
        return `${from} ${fromTime}${PRIZM_RANGE_SEPARATOR_CHAR}${to} ${toTime}`;
    }
    updateDayRange(dayRange) {
        this.dayRange = dayRange;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LXRpbWUtcmFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbXBvbmVudHMvc3JjL2xpYi9AY29yZS9kYXRlLXRpbWUvZGF5LXRpbWUtcmFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRW5DLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFDUyxRQUF1QixFQUN2QixZQUFtQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRC9GLGFBQVEsR0FBUixRQUFRLENBQWU7UUFDdkIsY0FBUyxHQUFULFNBQVMsQ0FBc0Y7SUFDckcsQ0FBQztJQUVHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFpQyxFQUFFLElBQWU7UUFDakYsTUFBTSxHQUFHLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUztZQUFFLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUM3QixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQWlDLEVBQUUsSUFBZTtRQUMvRSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTO1lBQUUsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzNCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBaUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxZQUFZLGtCQUFrQixDQUFDO1lBQ3BELE1BQU0sR0FBRyxJQUFJLGtCQUFrQixDQUM3QixhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLEVBQ3pELElBQUksY0FBYyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDN0QsQ0FBQztRQUVKLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxJQUFJO1FBQ1QsT0FBTyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFTSxRQUFRLENBQ2IsYUFBNEIsS0FBSyxFQUNqQyxhQUE0QixPQUFPLEVBQ25DLGFBQWEsR0FBRyxHQUFHO1FBRW5CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUUxRyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzNFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RCxPQUFPLEdBQUcsSUFBSSxJQUFJLFFBQVEsR0FBRywwQkFBMEIsR0FBRyxFQUFFLElBQUksTUFBTSxFQUFFLENBQUM7SUFDM0UsQ0FBQztJQUVNLGNBQWMsQ0FBQyxRQUF1QjtRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQUklaTV9SQU5HRV9TRVBBUkFUT1JfQ0hBUiB9IGZyb20gJy4vZGF0ZS10aW1lJztcbmltcG9ydCB7IFByaXptRGF5UmFuZ2UgfSBmcm9tICcuL2RheS1yYW5nZSc7XG5pbXBvcnQgeyBQcml6bURhdGVNb2RlLCBQcml6bVRpbWVNb2RlIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgUHJpem1UaW1lUmFuZ2UgfSBmcm9tICcuL3RpbWUtcmFuZ2UnO1xuaW1wb3J0IHsgUHJpem1UaW1lIH0gZnJvbSAnLi90aW1lJztcblxuZXhwb3J0IGNsYXNzIFByaXptRGF0ZVRpbWVSYW5nZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkYXlSYW5nZTogUHJpem1EYXlSYW5nZSxcbiAgICBwdWJsaWMgdGltZVJhbmdlOiBQcml6bVRpbWVSYW5nZSB8IG51bGwgPSBuZXcgUHJpem1UaW1lUmFuZ2UobmV3IFByaXptVGltZSgwLCAwKSwgbmV3IFByaXptVGltZSgwLCAwKSlcbiAgKSB7fVxuXG4gIHB1YmxpYyBzdGF0aWMgc2FmZVVwZGF0ZVRpbWVGcm9tKG9yaWdpbjogUHJpem1EYXRlVGltZVJhbmdlIHwgbnVsbCwgdGltZTogUHJpem1UaW1lKTogUHJpem1EYXRlVGltZVJhbmdlIHtcbiAgICBvcmlnaW4gPSBQcml6bURhdGVUaW1lUmFuZ2UuY3JlYXRlSWZOb3RFeGlzdChvcmlnaW4pO1xuICAgIGlmICghb3JpZ2luLnRpbWVSYW5nZSkgb3JpZ2luLnRpbWVSYW5nZSA9IG5ldyBQcml6bVRpbWVSYW5nZShuZXcgUHJpem1UaW1lKDAsIDApLCBuZXcgUHJpem1UaW1lKDAsIDApKTtcbiAgICBvcmlnaW4udGltZVJhbmdlLmZyb20gPSB0aW1lO1xuICAgIHJldHVybiBvcmlnaW47XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHNhZmVVcGRhdGVUaW1lVG8ob3JpZ2luOiBQcml6bURhdGVUaW1lUmFuZ2UgfCBudWxsLCB0aW1lOiBQcml6bVRpbWUpOiBQcml6bURhdGVUaW1lUmFuZ2Uge1xuICAgIG9yaWdpbiA9IFByaXptRGF0ZVRpbWVSYW5nZS5jcmVhdGVJZk5vdEV4aXN0KG9yaWdpbik7XG4gICAgaWYgKCFvcmlnaW4udGltZVJhbmdlKSBvcmlnaW4udGltZVJhbmdlID0gbmV3IFByaXptVGltZVJhbmdlKG5ldyBQcml6bVRpbWUoMCwgMCksIG5ldyBQcml6bVRpbWUoMjMsIDU5KSk7XG4gICAgb3JpZ2luLnRpbWVSYW5nZS50byA9IHRpbWU7XG4gICAgcmV0dXJuIG9yaWdpbjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlSWZOb3RFeGlzdChvcmlnaW46IFByaXptRGF0ZVRpbWVSYW5nZSB8IG51bGwpOiBQcml6bURhdGVUaW1lUmFuZ2Uge1xuICAgIGlmICghb3JpZ2luIHx8ICEob3JpZ2luIGluc3RhbmNlb2YgUHJpem1EYXRlVGltZVJhbmdlKSlcbiAgICAgIG9yaWdpbiA9IG5ldyBQcml6bURhdGVUaW1lUmFuZ2UoXG4gICAgICAgIFByaXptRGF5UmFuZ2UuZnJvbUxvY2FsTmF0aXZlRGF0ZShuZXcgRGF0ZSgpLCBuZXcgRGF0ZSgpKSxcbiAgICAgICAgbmV3IFByaXptVGltZVJhbmdlKG5ldyBQcml6bVRpbWUoMCwgMCksIG5ldyBQcml6bVRpbWUoMCwgMCkpXG4gICAgICApO1xuXG4gICAgcmV0dXJuIG9yaWdpbjtcbiAgfVxuXG4gIHB1YmxpYyBjb3B5KCk6IFByaXptRGF0ZVRpbWVSYW5nZSB7XG4gICAgcmV0dXJuIG5ldyBQcml6bURhdGVUaW1lUmFuZ2UodGhpcy5kYXlSYW5nZSwgdGhpcy50aW1lUmFuZ2UpO1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKFxuICAgIGRhdGVGb3JtYXQ6IFByaXptRGF0ZU1vZGUgPSBgRE1ZYCxcbiAgICB0aW1lRm9ybWF0OiBQcml6bVRpbWVNb2RlID0gYEhIOk1NYCxcbiAgICBkYXRlU2VwYXJhdG9yID0gYC5gXG4gICk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmRheVJhbmdlPy5mcm9tIHx8ICF0aGlzLmRheVJhbmdlPy50byB8fCAhdGhpcy50aW1lUmFuZ2U/LmZyb20gfHwgIXRoaXMudGltZVJhbmdlPy50bykgcmV0dXJuICcnO1xuXG4gICAgY29uc3QgZnJvbSA9IHRoaXMuZGF5UmFuZ2UuZnJvbS5nZXRGb3JtYXR0ZWREYXkoZGF0ZUZvcm1hdCwgZGF0ZVNlcGFyYXRvcik7XG4gICAgY29uc3QgZnJvbVRpbWUgPSB0aGlzLnRpbWVSYW5nZS5mcm9tLnRvU3RyaW5nKHRpbWVGb3JtYXQpO1xuICAgIGNvbnN0IHRvID0gdGhpcy5kYXlSYW5nZS50by5nZXRGb3JtYXR0ZWREYXkoZGF0ZUZvcm1hdCwgZGF0ZVNlcGFyYXRvcik7XG4gICAgY29uc3QgdG9UaW1lID0gdGhpcy50aW1lUmFuZ2UudG8udG9TdHJpbmcodGltZUZvcm1hdCk7XG4gICAgcmV0dXJuIGAke2Zyb219ICR7ZnJvbVRpbWV9JHtQUklaTV9SQU5HRV9TRVBBUkFUT1JfQ0hBUn0ke3RvfSAke3RvVGltZX1gO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZURheVJhbmdlKGRheVJhbmdlOiBQcml6bURheVJhbmdlKTogdm9pZCB7XG4gICAgdGhpcy5kYXlSYW5nZSA9IGRheVJhbmdlO1xuICB9XG59XG4iXX0=