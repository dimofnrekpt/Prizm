"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[5897],{5897:e=>{e.exports="import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ITableProduct } from '../table-basic-example/table-basic-example.component';\nimport { TABLE_EXAMPLE_DATA_2 } from '../../table-example.const';\n\n@Component({\n  selector: 'prizm-table-selectable-meta-example',\n  templateUrl: './table-selectable-meta-example.component.html',\n  styleUrls: ['./table-selectable-meta-example.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableSelectableMetaExampleComponent {\n  public selected = new Set<ITableProduct>();\n\n  active: { product: ITableProduct; index: number } | null = null;\n\n  public columns: string[] = ['checkbox', 'code', 'name', 'category', 'count'];\n\n  public products: ITableProduct[] = TABLE_EXAMPLE_DATA_2;\n\n  rowClickWithShift = false;\n\n  public onSelectStart(event: Event): void {\n    event.preventDefault();\n  }\n  public rowClick(e: MouseEvent, product: ITableProduct, index: number): void {\n    e.preventDefault();\n\n    if (e.shiftKey) {\n      this.rowClickWithShift = true;\n\n      if (!this.active) {\n        this.active = { product, index };\n        this.addToSelection(product);\n        return;\n      }\n\n      const [from, to] = [this.active.index, index].sort((a, b) => a - b);\n      this.products.forEach((product, productIndex) => {\n        if (productIndex >= from && productIndex <= to) {\n          this.addToSelection(product);\n        } else {\n          this.removeFromSelection(product);\n        }\n      });\n      return;\n    }\n\n    if (e.ctrlKey || e.metaKey) {\n      this.changeSelectionState(product);\n      this.active = { product, index };\n      return;\n    }\n\n    if (this.rowClickWithShift) {\n      this.selected.clear();\n      this.rowClickWithShift = false;\n    }\n\n    this.active = { product, index };\n  }\n\n  public productIsSelected(product: ITableProduct): boolean {\n    return this.selected.has(product);\n  }\n\n  public selectAllChanged(value: boolean): void {\n    if (value === true) {\n      this.selected = new Set([...this.products]);\n    } else {\n      this.selected = new Set([]);\n    }\n  }\n\n  public productCheckboxChange(product: ITableProduct, index: number): void {\n    this.active = { product, index };\n    this.changeSelectionState(product);\n  }\n\n  public trackBy(index: number, item: ITableProduct): string {\n    return item.code;\n  }\n\n  private changeSelectionState(product: ITableProduct): void {\n    if (this.selected.has(product)) {\n      this.removeFromSelection(product);\n    } else {\n      this.addToSelection(product);\n    }\n  }\n\n  private addToSelection(product: ITableProduct): void {\n    this.selected.add(product);\n  }\n\n  private removeFromSelection(product: ITableProduct): void {\n    this.selected.delete(product);\n  }\n}\n"}}]);