"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[15203],{15203:n=>{n.exports="import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { PrizmTableCellStatus } from '@prizm-ui/components';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface ITableProduct {\n  id?: number | string;\n  status?: PrizmTableCellStatus;\n  code: string;\n  name: string;\n  category: string;\n  count: number;\n  children?: ITableProduct[];\n}\n\n@Component({\n  selector: 'prizm-table-tree-pagination-example',\n  templateUrl: './table-tree-pagination-example.component.html',\n  styleUrls: ['./table-tree-pagination-example.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableTreePaginationExampleComponent {\n  public activeFirstPage$ = new BehaviorSubject(true);\n\n  public entities$ = this.activeFirstPage$.pipe(\n    map(activeFirstPage => {\n      console.log('activeFirstPage', activeFirstPage);\n      if (activeFirstPage) {\n        return [\n          { id: '1', name: 'test1' },\n          {\n            id: '2',\n            name: 'test2',\n            children: [\n              {\n                id: '4',\n                name: 'test4',\n              },\n              {\n                id: '5',\n                name: 'test5',\n                children: [\n                  {\n                    id: '7',\n                    name: 'test7',\n                  },\n                  {\n                    id: '8',\n                    name: 'test8',\n                  },\n                  {\n                    id: '9',\n                    name: 'test9',\n                  },\n                ],\n              },\n              {\n                id: '6',\n                name: 'test6',\n              },\n            ],\n          },\n          { id: '3', name: 'test3' },\n        ];\n      } else {\n        return [\n          { id: '10', name: 'test10' },\n          {\n            id: '11',\n            name: 'test11',\n            children: [\n              {\n                id: '13',\n                name: 'test13',\n              },\n              {\n                id: '14',\n                name: 'test14',\n                children: [\n                  {\n                    id: '16',\n                    name: 'test16',\n                  },\n                  {\n                    id: '17',\n                    name: 'test17',\n                  },\n                  {\n                    id: '18',\n                    name: 'test18',\n                  },\n                ],\n              },\n              {\n                id: '15',\n                name: 'test15',\n              },\n            ],\n          },\n          { id: '12', name: 'test12' },\n        ];\n      }\n    })\n  );\n\n  public readonly getTableChildren = (item: any): Observable<any[]> => {\n    return of(item.children ?? []);\n  };\n\n  public toggleActiveFirstPage(): void {\n    this.activeFirstPage$.next(!this.activeFirstPage$.value);\n  }\n\n  public getRowId(i: any): any {\n    return i.id;\n  }\n\n  public trackBy(idx: any, item: any): any {\n    return item.id;\n  }\n}\n"}}]);