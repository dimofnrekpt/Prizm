"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[72551],{72551:e=>{e.exports="import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  IBreadcrumb,\n  PrizmNavigationMenuToolbarConfig,\n  findItem,\n  traverseAllDeep,\n} from '@prizm-ui/components';\nimport { PrizmDestroyService } from '@prizm-ui/helpers';\nimport { PrizmIconsSvgRegistry, PRIZM_ICONS_SVG_SET } from '@prizm-ui/icons';\nimport { BehaviorSubject, combineLatest, merge, Observable } from 'rxjs';\nimport { map, switchMap, takeUntil } from 'rxjs/operators';\nimport { ExpandedItemsService } from './example-data/expanded-items.service';\nimport { CustomGroupConfig, CustomItem, PersistentExpandedValue } from './example-data/interfaces';\nimport { ItemGroupsService } from './example-data/item-groups.service';\n\n@Component({\n  selector: 'prizm-navigation-menu-groups-example',\n  templateUrl: './navigation-menu-groups-example.component.html',\n  styleUrls: ['./navigation-menu-groups-example.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [PrizmDestroyService, ExpandedItemsService, ItemGroupsService],\n})\nexport class NavigationMenuGroupsExampleComponent {\n  private activeItemId$$ = new BehaviorSubject<string | null>(null);\n\n  menuToolbarConfig: PrizmNavigationMenuToolbarConfig = {\n    search: true,\n    rubricatorMode: true,\n    folderMode: true, // temporary unavailable\n    closeAll: true,\n  };\n\n  expandedGroupsMap: Map<string, boolean> = new Map();\n  expandedItemsMap: Map<CustomItem, boolean> = new Map();\n\n  fruitsGroup$: Observable<CustomGroupConfig> = this.itemGroupsService.fruits$;\n  noGroupAppearanceGroup$: Observable<CustomGroupConfig> = this.itemGroupsService.noGroupAppearance$;\n  musicalInstrumentsGroup$: Observable<CustomGroupConfig> = this.itemGroupsService.musicalInstruments$;\n  longNamesGroup$: Observable<CustomGroupConfig> = this.itemGroupsService.longNames$;\n\n  activeItem$: Observable<CustomItem | null> = this.activeItemId$$.pipe(\n    switchMap(activeItemId => {\n      return combineLatest([\n        this.fruitsGroup$,\n        this.noGroupAppearanceGroup$,\n        this.musicalInstrumentsGroup$,\n        this.longNamesGroup$,\n      ]).pipe(\n        map(([a, b, c, d]) => [...a.items, ...b.items, ...c.items, ...d.items]),\n        map(allItems => findItem(allItems, i => i.id === activeItemId))\n      );\n    })\n  );\n\n  homeBreadcrumb: IBreadcrumb = {\n    name: '',\n    icon: 'social-home-breadcrumbs',\n  };\n\n  breadcrumbs: IBreadcrumb[] = [this.homeBreadcrumb];\n\n  constructor(\n    private iconRegistry: PrizmIconsSvgRegistry,\n    private expandedItemsService: ExpandedItemsService,\n    private itemGroupsService: ItemGroupsService,\n    private destroy$: PrizmDestroyService\n  ) {\n    this.iconRegistry.registerIcons(PRIZM_ICONS_SVG_SET);\n    this.configureExpandedItemsMap();\n    this.configureExpandedGroupsMap();\n  }\n\n  public activeItemChanged(item: CustomItem | null): void {\n    this.logMenuEvent('activeItemChanged', item);\n    this.activeItemId$$.next(item?.id as any);\n  }\n\n  public breadcrumbChange(breadcrumb: IBreadcrumb): void {\n    this.activeItemId$$.next(breadcrumb.link as any);\n  }\n\n  public menuBreadcrumbsChanged(breadcrumbs: CustomItem[]): void {\n    this.logMenuEvent('breadcrumbs', breadcrumbs);\n\n    const currentBreadcrumbs: IBreadcrumb[] = breadcrumbs.map(i => ({ name: i.text, link: i.id }));\n    this.breadcrumbs = [this.homeBreadcrumb, ...currentBreadcrumbs];\n  }\n\n  public expandedItemsMapChanged(expandedItemsMap: Map<CustomItem, boolean>): void {\n    this.logMenuEvent('expandedItemsMapChanged', expandedItemsMap);\n    this.expandedItemsService.setItemsExpandedKeys(expandedItemsMap);\n  }\n\n  public expandedGroupsMapChangedEvent(expandedGroupsMap: Map<string, boolean>): void {\n    this.logMenuEvent('expandedGroupsMapChangedEvent', expandedGroupsMap);\n    this.expandedItemsService.setGroupsExpandedKeys(expandedGroupsMap);\n  }\n\n  public logMenuEvent(eventName: string, event: unknown): void {\n    console.groupCollapsed(`%c ${eventName} `, 'background: #222; color: plum');\n    console.log(event);\n    console.groupEnd();\n  }\n\n  private configureExpandedItemsMap(): void {\n    const persistent: PersistentExpandedValue = this.expandedItemsService.getItemsExpandedKeys() ?? {};\n\n    const allItems$: Observable<CustomItem[]> = merge(\n      this.itemGroupsService.fruits$.pipe(map(g => g.items)),\n      this.itemGroupsService.longNames$.pipe(map(g => g.items)),\n      this.itemGroupsService.musicalInstruments$.pipe(map(g => g.items)),\n      this.itemGroupsService.noGroupAppearance$.pipe(map(g => g.items))\n    );\n\n    allItems$.pipe(takeUntil(this.destroy$)).subscribe(allItems => {\n      traverseAllDeep(allItems, item => {\n        if (persistent[item.id] !== undefined) {\n          this.expandedItemsMap.set(item, persistent[item.id]);\n        }\n      });\n    });\n  }\n\n  private configureExpandedGroupsMap(): void {\n    const persistent: PersistentExpandedValue = this.expandedItemsService.getGroupsExpandedKeys() ?? {};\n\n    for (const [groupId, isExpanded] of Object.entries(persistent)) {\n      this.expandedGroupsMap.set(groupId, isExpanded);\n    }\n  }\n}\n"}}]);