'use strict';
(self.webpackChunkdoc = self.webpackChunkdoc || []).push([
  [17925],
  {
    17925: e => {
      e.exports =
        "import { ChangeDetectorRef, Component, Injector } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\nimport { PrizmDateTime, PrizmDay, PrizmTime } from '@prizm-ui/components';\nimport { formatRelative, addDays, addHours, addMonths } from 'date-fns';\n\ntype DateRangeItem = [PrizmDay, PrizmTime];\n\ntype DateItem = {\n  range: [DateRangeItem | null, DateRangeItem | null];\n};\n\n@Component({\n  selector: 'prizm-dropdown-host-date-list-edit-example',\n  templateUrl: './date-list-edit.component.html',\n  styleUrls: ['./date-list-edit.component.less'],\n})\nexport class PrizmDropdownHostDateListEditExampleComponent {\n  open = false;\n  selection!: DateItem | null;\n  addItem!: DateItem | null;\n  data: DateItem[] = [\n    {\n      range: [\n        [\n          PrizmDay.fromLocalNativeDate(new Date()),\n          new PrizmTime(new Date().getHours() - 1, new Date().getMinutes(), 0),\n        ],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n    {\n      range: [\n        [PrizmDay.fromLocalNativeDate(addDays(new Date(), -1)), PrizmTime.fromLocalNativeDate(new Date())],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n    {\n      range: [\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(addHours(new Date(), -2))],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n    {\n      range: [\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(addHours(new Date(), -4))],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n    {\n      range: [\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(addHours(new Date(), -8))],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n    {\n      range: [\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(addHours(new Date(), -12))],\n        [PrizmDay.fromLocalNativeDate(new Date()), PrizmTime.fromLocalNativeDate(new Date())],\n      ],\n    },\n  ];\n\n  readonly startControl = new UntypedFormControl();\n  readonly endControl = new UntypedFormControl();\n\n  constructor(public readonly cdRef: ChangeDetectorRef, public readonly injector: Injector) {}\n\n  public select(item: DateItem | null): void {\n    if (!item) {\n      this.startControl.enable();\n      this.endControl.enable();\n      return;\n    }\n    this.startControl.disable();\n    this.endControl.disable();\n\n    this.startControl.setValue(item.range[0]);\n    this.endControl.setValue(item.range[1]);\n  }\n\n  public convertDate([start, end]: DateItem['range']): [Date, Date] | null {\n    if (!start?.[0] || !end?.[0]) return [new Date(), new Date()];\n    return [\n      new PrizmDateTime(start[0], start[1] ?? new PrizmTime(0, 0)).toLocalNativeDate(),\n      new PrizmDateTime(end[0], end[1] ?? new PrizmTime(0, 0)).toLocalNativeDate(),\n    ];\n  }\n\n  public remove(idx: number): void {\n    const [removedItem] = this.data.splice(idx, 1);\n    if (this.selection === removedItem) {\n      this.selection = null;\n    }\n  }\n  public removeNew(): void {\n    this.selection = this.addItem = null;\n  }\n\n  public editCurrent(item: DateItem, idx: number): void {\n    if (this.selection === item) {\n      this.data[idx].range = this.selection.range;\n      this.selection = null;\n      return;\n    }\n    this.selection = item;\n  }\n\n  public editNew(item: DateItem): void {\n    if (this.selection === item) {\n      this.data.push(this.selection);\n      this.selection = this.addItem = null;\n      return;\n    }\n    this.selection = item;\n  }\n\n  public changeDate(from: DateRangeItem, to: DateRangeItem): void {\n    if (this.selection) this.selection.range = [from, to];\n  }\n\n  public add(): void {\n    this.addItem = {\n      range: [null, null],\n    };\n    this.selection = this.addItem;\n  }\n\n  public trackBy(i: number): number {\n    return i;\n  }\n}\n";
    },
  },
]);
