'use strict';
(self.webpackChunkdoc = self.webpackChunkdoc || []).push([
  [39668],
  {
    39668: e => {
      e.exports =
        "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ITableProduct } from '../table-basic-example/table-basic-example.component';\nimport { TABLE_EXAMPLE_DATA_1 } from '../../table-example.const';\n\n@Component({\n  selector: 'prizm-table-editable-row-example',\n  templateUrl: './table-editable-row-example.component.html',\n  styleUrls: ['./table-editable-row-example.component.less'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableEditableRowExampleComponent {\n  public selectedItemsCodes: string[] = [];\n  public columns: string[] = ['code', 'name', 'category', 'count', 'actions'];\n  public products: ITableProduct[] = TABLE_EXAMPLE_DATA_1;\n  public categories: string[] = [...new Set(this.products.map(i => i.category))];\n  public updatedRow: ITableProduct | null = null;\n  public currentEditableRow: ITableProduct | null = null;\n\n  public onRowEditInit(item: ITableProduct): void {\n    this.currentEditableRow = item;\n    this.updatedRow = { ...item };\n  }\n\n  public onRowEditSave(): void {\n    this.products =\n      (this.products?.map(item => (item === this.currentEditableRow ? this.updatedRow : item)) as any) ?? [];\n    this.currentEditableRow = null;\n    this.updatedRow = null;\n  }\n\n  public onRowEditCancel(product: ITableProduct): void {\n    this.products = this.products.map(item =>\n      item === this.currentEditableRow ? { ...this.currentEditableRow } : item\n    );\n    this.currentEditableRow = null;\n    this.updatedRow = null;\n  }\n\n  public onRowDelete(product: ITableProduct): void {\n    this.products = this.products.filter(item => item !== product);\n  }\n\n  public changeItemName<T extends keyof ITableProduct>(e: FocusEvent, key: T): void {\n    const val = (e.target as HTMLInputElement).value;\n    this.changeByValue(val, key);\n  }\n\n  public changeByValue<T extends keyof ITableProduct>(val: string, key: T): void {\n    this.updatedRow = { ...this.updatedRow, [key]: val } as any;\n  }\n\n  public selectRow(e: MouseEvent, clickedProductCode: string, disabled = false): void {\n    if (disabled) return;\n    if (this.selectedItemsCodes.includes(clickedProductCode)) {\n      this.selectedItemsCodes = this.selectedItemsCodes.filter(code => code !== clickedProductCode);\n    } else {\n      this.selectedItemsCodes.push(clickedProductCode);\n    }\n  }\n}\n";
    },
  },
]);
