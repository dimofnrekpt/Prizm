"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PRIZM_CB3_TO_PRIZM_TEMPLATE_TASKS = void 0;
const accordion_task_1 = require("./accordion.task");
const breadcrumb_task_1 = require("./breadcrumb.task");
const button_task_1 = require("./button.task");
const checkbox_task_1 = require("./checkbox.task");
const chips_task_1 = require("./chips.task");
const dropdown_task_1 = require("./dropdown.task");
const toggle_button_task_1 = require("./toggle-button.task");
const tabs_task_1 = require("./tabs.task");
const split_button_task_1 = require("./split-button.task");
const spinner_task_1 = require("./spinner.task");
const radio_task_1 = require("./radio.task");
const multi_select_task_1 = require("./multi-select.task");
const input_switch_task_1 = require("./input-switch.task");
const input_task_1 = require("./input.task");
const input_number_task_1 = require("./input-number.task");
const tooltip_task_1 = require("./tooltip.task");
const textarea_task_1 = require("./textarea.task");
exports.PRIZM_CB3_TO_PRIZM_TEMPLATE_TASKS = [
    ...textarea_task_1.ZyfraTextareaTemplateTasks,
    ...tooltip_task_1.ZyfraTooltipTemplateTasks,
    ...accordion_task_1.ZyfraAccordionTemplateTasks,
    ...breadcrumb_task_1.ZyfraBreadcrumbTemplateTasks,
    ...button_task_1.ZyfraButtonTemplateTasks,
    ...checkbox_task_1.ZyfraCheckboxTemplateTasks,
    ...chips_task_1.ZyfraChipsTasks,
    ...dropdown_task_1.ZyfraDropdownTemplateTasks,
    ...toggle_button_task_1.ZyfraToggleButtonTemplateTasks,
    ...tabs_task_1.ZyfraTabsTemplateTasks,
    ...split_button_task_1.ZyfraSplitButtonTemplateTasks,
    ...spinner_task_1.ZyfraSpinnerTemplateTasks,
    ...radio_task_1.ZyfraRadioTemplateTasks,
    ...multi_select_task_1.ZyfraMultiSelectTemplateTasks,
    ...input_switch_task_1.ZyfraInputSwitchTemplateTasks,
    ...input_task_1.ZyfraInputTemplateTasks,
    ...input_number_task_1.ZyfraInputNumberTemplateTasks,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hc3QvY2IzLXRlbXBsYXRlLWV4YW1wbGVzL3NyYy9saWIvdGFza3MvYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFEQUErRDtBQUMvRCx1REFBaUU7QUFDakUsK0NBQXlEO0FBQ3pELG1EQUE2RDtBQUM3RCw2Q0FBK0M7QUFDL0MsbURBQTZEO0FBQzdELDZEQUFzRTtBQUN0RSwyQ0FBcUQ7QUFDckQsMkRBQW9FO0FBQ3BFLGlEQUEyRDtBQUMzRCw2Q0FBdUQ7QUFDdkQsMkRBQW9FO0FBQ3BFLDJEQUFvRTtBQUNwRSw2Q0FBdUQ7QUFDdkQsMkRBQW9FO0FBQ3BFLGlEQUEyRDtBQUMzRCxtREFBNkQ7QUFFaEQsUUFBQSxpQ0FBaUMsR0FBd0I7SUFDcEUsR0FBRywwQ0FBMEI7SUFDN0IsR0FBRyx3Q0FBeUI7SUFDNUIsR0FBRyw0Q0FBMkI7SUFDOUIsR0FBRyw4Q0FBNEI7SUFDL0IsR0FBRyxzQ0FBd0I7SUFDM0IsR0FBRywwQ0FBMEI7SUFDN0IsR0FBRyw0QkFBZTtJQUNsQixHQUFHLDBDQUEwQjtJQUM3QixHQUFHLG1EQUE4QjtJQUNqQyxHQUFHLGtDQUFzQjtJQUN6QixHQUFHLGlEQUE2QjtJQUNoQyxHQUFHLHdDQUF5QjtJQUM1QixHQUFHLG9DQUF1QjtJQUMxQixHQUFHLGlEQUE2QjtJQUNoQyxHQUFHLGlEQUE2QjtJQUNoQyxHQUFHLG9DQUF1QjtJQUMxQixHQUFHLGlEQUE2QjtDQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJpem1UZW1wbGF0ZVRhc2sgfSBmcm9tICdAcHJpem0tdWkvYXN0JztcbmltcG9ydCB7IFp5ZnJhQWNjb3JkaW9uVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vYWNjb3JkaW9uLnRhc2snO1xuaW1wb3J0IHsgWnlmcmFCcmVhZGNydW1iVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vYnJlYWRjcnVtYi50YXNrJztcbmltcG9ydCB7IFp5ZnJhQnV0dG9uVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vYnV0dG9uLnRhc2snO1xuaW1wb3J0IHsgWnlmcmFDaGVja2JveFRlbXBsYXRlVGFza3MgfSBmcm9tICcuL2NoZWNrYm94LnRhc2snO1xuaW1wb3J0IHsgWnlmcmFDaGlwc1Rhc2tzIH0gZnJvbSAnLi9jaGlwcy50YXNrJztcbmltcG9ydCB7IFp5ZnJhRHJvcGRvd25UZW1wbGF0ZVRhc2tzIH0gZnJvbSAnLi9kcm9wZG93bi50YXNrJztcbmltcG9ydCB7IFp5ZnJhVG9nZ2xlQnV0dG9uVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vdG9nZ2xlLWJ1dHRvbi50YXNrJztcbmltcG9ydCB7IFp5ZnJhVGFic1RlbXBsYXRlVGFza3MgfSBmcm9tICcuL3RhYnMudGFzayc7XG5pbXBvcnQgeyBaeWZyYVNwbGl0QnV0dG9uVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vc3BsaXQtYnV0dG9uLnRhc2snO1xuaW1wb3J0IHsgWnlmcmFTcGlubmVyVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vc3Bpbm5lci50YXNrJztcbmltcG9ydCB7IFp5ZnJhUmFkaW9UZW1wbGF0ZVRhc2tzIH0gZnJvbSAnLi9yYWRpby50YXNrJztcbmltcG9ydCB7IFp5ZnJhTXVsdGlTZWxlY3RUZW1wbGF0ZVRhc2tzIH0gZnJvbSAnLi9tdWx0aS1zZWxlY3QudGFzayc7XG5pbXBvcnQgeyBaeWZyYUlucHV0U3dpdGNoVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vaW5wdXQtc3dpdGNoLnRhc2snO1xuaW1wb3J0IHsgWnlmcmFJbnB1dFRlbXBsYXRlVGFza3MgfSBmcm9tICcuL2lucHV0LnRhc2snO1xuaW1wb3J0IHsgWnlmcmFJbnB1dE51bWJlclRlbXBsYXRlVGFza3MgfSBmcm9tICcuL2lucHV0LW51bWJlci50YXNrJztcbmltcG9ydCB7IFp5ZnJhVG9vbHRpcFRlbXBsYXRlVGFza3MgfSBmcm9tICcuL3Rvb2x0aXAudGFzayc7XG5pbXBvcnQgeyBaeWZyYVRleHRhcmVhVGVtcGxhdGVUYXNrcyB9IGZyb20gJy4vdGV4dGFyZWEudGFzayc7XG5cbmV4cG9ydCBjb25zdCBQUklaTV9DQjNfVE9fUFJJWk1fVEVNUExBVEVfVEFTS1M6IFByaXptVGVtcGxhdGVUYXNrW10gPSBbXG4gIC4uLlp5ZnJhVGV4dGFyZWFUZW1wbGF0ZVRhc2tzLFxuICAuLi5aeWZyYVRvb2x0aXBUZW1wbGF0ZVRhc2tzLFxuICAuLi5aeWZyYUFjY29yZGlvblRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhQnJlYWRjcnVtYlRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhQnV0dG9uVGVtcGxhdGVUYXNrcyxcbiAgLi4uWnlmcmFDaGVja2JveFRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhQ2hpcHNUYXNrcyxcbiAgLi4uWnlmcmFEcm9wZG93blRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhVG9nZ2xlQnV0dG9uVGVtcGxhdGVUYXNrcyxcbiAgLi4uWnlmcmFUYWJzVGVtcGxhdGVUYXNrcyxcbiAgLi4uWnlmcmFTcGxpdEJ1dHRvblRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhU3Bpbm5lclRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhUmFkaW9UZW1wbGF0ZVRhc2tzLFxuICAuLi5aeWZyYU11bHRpU2VsZWN0VGVtcGxhdGVUYXNrcyxcbiAgLi4uWnlmcmFJbnB1dFN3aXRjaFRlbXBsYXRlVGFza3MsXG4gIC4uLlp5ZnJhSW5wdXRUZW1wbGF0ZVRhc2tzLFxuICAuLi5aeWZyYUlucHV0TnVtYmVyVGVtcGxhdGVUYXNrcyxcbl07XG4iXX0=