"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrizmAstAddImportsToNgModuleCodeTask = void 0;
const abstract_1 = require("../abstract");
const util_1 = require("./util");
/**
 * @class PrizmAstAddImportsToNgModuleCodeTask
 * @extends {PrizmAstCodeTask<IPrizmAddImportsToNgModuleCodeTask>}
 *
 * @description
 * A class that represents a task for adding imports to an Angular NgModule.
 * It checks if the required import(s) already exist and adds them if they don't.
 * It utilizes the prizmAstAddImportToNgModule utility function to perform the actual transformation.
 */
class PrizmAstAddImportsToNgModuleCodeTask extends abstract_1.PrizmAstCodeTask {
    constructor() {
        super(...arguments);
        // Task type identifier
        this.type = 'add-imports-to-ng-module';
    }
    /**
     * @function run
     * @description
     * Runs the task to add imports to an Angular NgModule.
     *
     * @param {ts.TransformationContext} context - The transformation context.
     * @param {ts.SourceFile} sourceFile - The source file to be transformed.
     * @param {IPrizmAddImportsToNgModuleCodeTask['payload']} payload - The payload that contains the information about the imports.
     *
     * @returns {ts.SourceFile} - The transformed source file.
     */
    run(context, sourceFile, payload) {
        // Call the utility function to add the import to the NgModule and return the result
        return (0, util_1.prizmAstAddImportToNgModule)(context, sourceFile, payload.newModule, payload.comment, payload.moduleToFind);
    }
}
exports.PrizmAstAddImportsToNgModuleCodeTask = PrizmAstAddImportsToNgModuleCodeTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWltcG9ydHMtdG8tbmctbW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hc3QvY29kZS9zcmMvbGliL3RzL2FkZC1pbXBvcnRzLXRvLW5nLW1vZHVsZS9hZGQtaW1wb3J0cy10by1uZy1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMENBQStDO0FBRS9DLGlDQUFxRDtBQUVyRDs7Ozs7Ozs7R0FRRztBQUNILE1BQWEsb0NBQXFDLFNBQVEsMkJBQW9EO0lBQTlHOztRQUNFLHVCQUF1QjtRQUNkLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQTJCN0MsQ0FBQztJQXpCQzs7Ozs7Ozs7OztPQVVHO0lBQ0ksR0FBRyxDQUNSLE9BQWlDLEVBQ2pDLFVBQXlCLEVBQ3pCLE9BQXNEO1FBRXRELG9GQUFvRjtRQUNwRixPQUFPLElBQUEsa0NBQTJCLEVBQ2hDLE9BQU8sRUFDUCxVQUFVLEVBQ1YsT0FBTyxDQUFDLFNBQVMsRUFDakIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsWUFBWSxDQUNyQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBN0JELG9GQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgUHJpem1Bc3RDb2RlVGFzayB9IGZyb20gJy4uL2Fic3RyYWN0JztcbmltcG9ydCB7IElQcml6bUFkZEltcG9ydHNUb05nTW9kdWxlQ29kZVRhc2sgfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7IHByaXptQXN0QWRkSW1wb3J0VG9OZ01vZHVsZSB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQGNsYXNzIFByaXptQXN0QWRkSW1wb3J0c1RvTmdNb2R1bGVDb2RlVGFza1xuICogQGV4dGVuZHMge1ByaXptQXN0Q29kZVRhc2s8SVByaXptQWRkSW1wb3J0c1RvTmdNb2R1bGVDb2RlVGFzaz59XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHRhc2sgZm9yIGFkZGluZyBpbXBvcnRzIHRvIGFuIEFuZ3VsYXIgTmdNb2R1bGUuXG4gKiBJdCBjaGVja3MgaWYgdGhlIHJlcXVpcmVkIGltcG9ydChzKSBhbHJlYWR5IGV4aXN0IGFuZCBhZGRzIHRoZW0gaWYgdGhleSBkb24ndC5cbiAqIEl0IHV0aWxpemVzIHRoZSBwcml6bUFzdEFkZEltcG9ydFRvTmdNb2R1bGUgdXRpbGl0eSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBhY3R1YWwgdHJhbnNmb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBQcml6bUFzdEFkZEltcG9ydHNUb05nTW9kdWxlQ29kZVRhc2sgZXh0ZW5kcyBQcml6bUFzdENvZGVUYXNrPElQcml6bUFkZEltcG9ydHNUb05nTW9kdWxlQ29kZVRhc2s+IHtcbiAgLy8gVGFzayB0eXBlIGlkZW50aWZpZXJcbiAgcmVhZG9ubHkgdHlwZSA9ICdhZGQtaW1wb3J0cy10by1uZy1tb2R1bGUnO1xuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb24gcnVuXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSdW5zIHRoZSB0YXNrIHRvIGFkZCBpbXBvcnRzIHRvIGFuIEFuZ3VsYXIgTmdNb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSB7dHMuVHJhbnNmb3JtYXRpb25Db250ZXh0fSBjb250ZXh0IC0gVGhlIHRyYW5zZm9ybWF0aW9uIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7dHMuU291cmNlRmlsZX0gc291cmNlRmlsZSAtIFRoZSBzb3VyY2UgZmlsZSB0byBiZSB0cmFuc2Zvcm1lZC5cbiAgICogQHBhcmFtIHtJUHJpem1BZGRJbXBvcnRzVG9OZ01vZHVsZUNvZGVUYXNrWydwYXlsb2FkJ119IHBheWxvYWQgLSBUaGUgcGF5bG9hZCB0aGF0IGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW1wb3J0cy5cbiAgICpcbiAgICogQHJldHVybnMge3RzLlNvdXJjZUZpbGV9IC0gVGhlIHRyYW5zZm9ybWVkIHNvdXJjZSBmaWxlLlxuICAgKi9cbiAgcHVibGljIHJ1bihcbiAgICBjb250ZXh0OiB0cy5UcmFuc2Zvcm1hdGlvbkNvbnRleHQsXG4gICAgc291cmNlRmlsZTogdHMuU291cmNlRmlsZSxcbiAgICBwYXlsb2FkOiBJUHJpem1BZGRJbXBvcnRzVG9OZ01vZHVsZUNvZGVUYXNrWydwYXlsb2FkJ11cbiAgKTogdHMuU291cmNlRmlsZSB7XG4gICAgLy8gQ2FsbCB0aGUgdXRpbGl0eSBmdW5jdGlvbiB0byBhZGQgdGhlIGltcG9ydCB0byB0aGUgTmdNb2R1bGUgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gICAgcmV0dXJuIHByaXptQXN0QWRkSW1wb3J0VG9OZ01vZHVsZShcbiAgICAgIGNvbnRleHQsXG4gICAgICBzb3VyY2VGaWxlLFxuICAgICAgcGF5bG9hZC5uZXdNb2R1bGUsXG4gICAgICBwYXlsb2FkLmNvbW1lbnQsXG4gICAgICBwYXlsb2FkLm1vZHVsZVRvRmluZFxuICAgICk7XG4gIH1cbn1cbiJdfQ==