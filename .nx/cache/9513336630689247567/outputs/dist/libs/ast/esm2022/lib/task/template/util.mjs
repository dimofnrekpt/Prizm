"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prizmAstGetTypeOfActionBy = exports.prizmAstCreateActionBy = exports.prizmAstGetAttrName = exports.prizmAstConvertAttrNameToOutputInput = exports.prizmAstConvertAttrNameToInputOutput = exports.prizmAstHasAttribute = exports.prizmAstFindAttributeWithType = exports.prizmAstConvertAttrNameToOutputVar = exports.prizmAstConvertAttrNameToInputVar = exports.prizmAstConvertAttrNameByType = exports.prizmAstGetOutputBytAttrForTemplate = exports.prizmAstRemoveByAttrName = exports.prizmAstGetTypeOfAttribute = void 0;
const model_1 = require("./model");
function prizmAstGetTypeOfAttribute(attribute) {
    attribute = attribute.trim();
    if (attribute.startsWith('['))
        return model_1.PrizmAstTemplateAttributeType.inputVar;
    else if (attribute.startsWith('([') || attribute.startsWith('[('))
        return model_1.PrizmAstTemplateAttributeType.inputOutput;
    else if (attribute.startsWith('('))
        return model_1.PrizmAstTemplateAttributeType.output;
    return model_1.PrizmAstTemplateAttributeType.input;
}
exports.prizmAstGetTypeOfAttribute = prizmAstGetTypeOfAttribute;
// export function prizmAstGetOutputBytAttrForTemplate (
//   attrName: string,
//   attributes: Record<string, unknown>
// ) {
//   const name = prizmAstCheckAndGetAttrName(
//     attributes,
//     attrName
//   )
//   if (!name) return null;
//
//   const type = prizmAstGetTypeOfAttribute(
//     name
//   );
//
//   if (type === PrizmAstTemplateAttributeType.input) return name;
//   if (type === PrizmAstTemplateAttributeType.inputVar) return `{{${attrName}}`;
//   if (type === PrizmAstTemplateAttributeType.inputOutput) return `{{${attrName}}`;
//
//   return null;
// }
function prizmAstRemoveByAttrName(attributes, attrName) {
    attrName = prizmAstGetAttrName(attrName);
    const inputName = prizmAstConvertAttrNameToInputVar(attrName);
    const outputName = prizmAstConvertAttrNameToOutputVar(attrName);
    const inputOutputName = prizmAstConvertAttrNameToInputOutput(attrName);
    const outputInputName = prizmAstConvertAttrNameToOutputInput(attrName);
    delete attributes[attrName];
    delete attributes[inputName];
    delete attributes[outputName];
    delete attributes[inputOutputName];
    delete attributes[outputInputName];
    return attributes;
}
exports.prizmAstRemoveByAttrName = prizmAstRemoveByAttrName;
function prizmAstGetOutputBytAttrForTemplate(attributes, attrName) {
    attrName = prizmAstGetAttrName(attrName);
    const data = prizmAstFindAttributeWithType(attrName, attributes);
    const type = data?.type;
    const value = data?.value;
    switch (type) {
        case model_1.PrizmAstTemplateAttributeType.input:
            return value;
        case model_1.PrizmAstTemplateAttributeType.inputVar:
        case model_1.PrizmAstTemplateAttributeType.inputOutput:
            return `{{${value}}}`;
        default:
            return null;
    }
}
exports.prizmAstGetOutputBytAttrForTemplate = prizmAstGetOutputBytAttrForTemplate;
function prizmAstConvertAttrNameByType(attrName, type) {
    switch (type) {
        case model_1.PrizmAstTemplateAttributeType.inputOutput:
            return prizmAstConvertAttrNameToInputOutput(attrName);
        case model_1.PrizmAstTemplateAttributeType.output:
            return prizmAstConvertAttrNameToOutputVar(attrName);
        case model_1.PrizmAstTemplateAttributeType.inputVar:
            return prizmAstConvertAttrNameToInputVar(attrName);
        default:
        case model_1.PrizmAstTemplateAttributeType.input:
            return attrName;
    }
}
exports.prizmAstConvertAttrNameByType = prizmAstConvertAttrNameByType;
function prizmAstConvertAttrNameToInputVar(attrName) {
    return `[${attrName}]`;
}
exports.prizmAstConvertAttrNameToInputVar = prizmAstConvertAttrNameToInputVar;
function prizmAstConvertAttrNameToOutputVar(attrName) {
    return `(${attrName})`;
}
exports.prizmAstConvertAttrNameToOutputVar = prizmAstConvertAttrNameToOutputVar;
function prizmAstFindAttributeWithType(attrName, attributes, check = [
    model_1.PrizmAstTemplateAttributeType.inputOutput,
    model_1.PrizmAstTemplateAttributeType.input,
    model_1.PrizmAstTemplateAttributeType.output,
    model_1.PrizmAstTemplateAttributeType.inputVar,
]) {
    if (!attributes || !attrName)
        return null;
    const originAttrName = prizmAstGetAttrName(attrName);
    const searchAttribute = (name, type) => {
        if (name in attributes) {
            return {
                attrName: name,
                value: attributes[name],
                type: type,
            };
        }
        return null;
    };
    const searchInputOutputAttribute = (name) => {
        const attrNameInputOutput = prizmAstConvertAttrNameToInputOutput(name);
        const attrNameOutputInput = prizmAstConvertAttrNameToOutputInput(name);
        return (searchAttribute(attrNameInputOutput, model_1.PrizmAstTemplateAttributeType.inputOutput) ??
            searchAttribute(attrNameOutputInput, model_1.PrizmAstTemplateAttributeType.inputOutput));
    };
    if (check.includes(model_1.PrizmAstTemplateAttributeType.input)) {
        const result = searchAttribute(originAttrName, model_1.PrizmAstTemplateAttributeType.input);
        if (result)
            return result;
    }
    if (check.includes(model_1.PrizmAstTemplateAttributeType.inputVar)) {
        const result = searchAttribute(prizmAstConvertAttrNameToInputVar(originAttrName), 
        // originAttrName,
        model_1.PrizmAstTemplateAttributeType.inputVar);
        if (result)
            return result;
    }
    if (check.includes(model_1.PrizmAstTemplateAttributeType.output)) {
        const result = searchAttribute(prizmAstConvertAttrNameToOutputVar(originAttrName), 
        // originAttrName,
        model_1.PrizmAstTemplateAttributeType.output);
        if (result)
            return result;
    }
    return searchInputOutputAttribute(originAttrName);
}
exports.prizmAstFindAttributeWithType = prizmAstFindAttributeWithType;
// export function prizmAstFindAttributeWithType(
//   attrName: string,
//   attributes: Record<string, unknown>,
//   check: PrizmAstTemplateAttributeType[] = [
//     PrizmAstTemplateAttributeType.inputOutput,
//     PrizmAstTemplateAttributeType.input,
//     PrizmAstTemplateAttributeType.output,
//     PrizmAstTemplateAttributeType.inputVar,
//   ]
// ): {
//   attrName: string;
//   value: any;
//   type: PrizmAstTemplateAttributeType;
// } | null {
//   if (!attributes) return null;
//   const originAttrName = attrName;
//   if (
//     check.includes(PrizmAstTemplateAttributeType.input) ||
//     check.includes(PrizmAstTemplateAttributeType.inputOutput)
//   ) {
//     if (attrName in attributes)
//       return {
//         attrName: attrName,
//         value: attributes[attrName],
//         type: PrizmAstTemplateAttributeType.input,
//       };
//
//     attrName = prizmAstConvertAttrNameToInputOutput(originAttrName);
//     const attrNameOutputInput = prizmAstConvertAttrNameToOutputInput(originAttrName);
//     if (attrName in attributes || attrNameOutputInput in attributes)
//       return {
//         attrName: attrName ?? attrNameOutputInput,
//         value: attributes[attrName] ?? attributes[attrNameOutputInput],
//         type: PrizmAstTemplateAttributeType.inputOutput,
//       };
//   }
//
//   if (
//     check.includes(PrizmAstTemplateAttributeType.inputVar) ||
//     check.includes(PrizmAstTemplateAttributeType.inputOutput)
//   ) {
//     attrName = prizmAstConvertAttrNameToInputOutput(originAttrName);
//     const attrNameOutputInput = prizmAstConvertAttrNameToOutputInput(originAttrName);
//     if (attrName in attributes || attrNameOutputInput in attributes)
//       return {
//         attrName: attrName ?? attrNameOutputInput,
//         value: attributes[attrName] ?? attributes[attrNameOutputInput],
//         type: PrizmAstTemplateAttributeType.inputOutput,
//       };
//
//     attrName = prizmAstConvertAttrNameToInputVar(originAttrName);
//     if (attrName in attributes)
//       return {
//         attrName: attrName,
//         value: attributes[attrName],
//         type: PrizmAstTemplateAttributeType.inputVar,
//       };
//   }
//
//   if (
//     check.includes(PrizmAstTemplateAttributeType.output) ||
//     check.includes(PrizmAstTemplateAttributeType.inputOutput)
//   ) {
//     attrName = prizmAstConvertAttrNameToOutputVar(originAttrName);
//     if (attrName in attributes)
//       return {
//         attrName: attrName,
//         value: attributes[attrName],
//         type: PrizmAstTemplateAttributeType.output,
//       };
//   }
//
//   return null;
// }
function prizmAstHasAttribute(attrName, attributes, check = [
    model_1.PrizmAstTemplateAttributeType.inputOutput,
    model_1.PrizmAstTemplateAttributeType.input,
    model_1.PrizmAstTemplateAttributeType.output,
    model_1.PrizmAstTemplateAttributeType.inputVar,
]) {
    if (!attributes)
        return false;
    if ((check.includes(model_1.PrizmAstTemplateAttributeType.input) ||
        check.includes(model_1.PrizmAstTemplateAttributeType.inputOutput)) &&
        (attrName in attributes ||
            prizmAstConvertAttrNameToInputOutput(attrName) in attributes ||
            prizmAstConvertAttrNameToOutputInput(attrName) in attributes))
        return true;
    if ((check.includes(model_1.PrizmAstTemplateAttributeType.inputVar) ||
        check.includes(model_1.PrizmAstTemplateAttributeType.inputOutput)) &&
        (prizmAstConvertAttrNameToInputVar(attrName) in attributes ||
            prizmAstConvertAttrNameToInputOutput(attrName) in attributes ||
            prizmAstConvertAttrNameToOutputInput(attrName) in attributes))
        return true;
    if ((check.includes(model_1.PrizmAstTemplateAttributeType.output) ||
        check.includes(model_1.PrizmAstTemplateAttributeType.inputOutput)) &&
        (prizmAstConvertAttrNameToOutputVar(attrName) in attributes ||
            prizmAstConvertAttrNameToInputOutput(attrName) in attributes ||
            prizmAstConvertAttrNameToOutputInput(attrName) in attributes))
        return true;
    return false;
}
exports.prizmAstHasAttribute = prizmAstHasAttribute;
function prizmAstConvertAttrNameToInputOutput(attrName) {
    return `[(${attrName})]`;
}
exports.prizmAstConvertAttrNameToInputOutput = prizmAstConvertAttrNameToInputOutput;
function prizmAstConvertAttrNameToOutputInput(attrName) {
    return `([${attrName}])`;
}
exports.prizmAstConvertAttrNameToOutputInput = prizmAstConvertAttrNameToOutputInput;
function prizmAstGetAttrName(attrName) {
    return attrName.replace(/[[(\]) ]/g, '');
}
exports.prizmAstGetAttrName = prizmAstGetAttrName;
function prizmAstCreateActionBy(objClass, payload) {
    return new objClass().create(payload);
}
exports.prizmAstCreateActionBy = prizmAstCreateActionBy;
function prizmAstGetTypeOfActionBy(objClass) {
    return new objClass().type;
}
exports.prizmAstGetTypeOfActionBy = prizmAstGetTypeOfActionBy;
//# sourceMappingURL=data:application/json;base64,