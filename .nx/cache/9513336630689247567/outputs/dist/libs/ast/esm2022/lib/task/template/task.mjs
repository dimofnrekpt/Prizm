"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrizmTemplateTaskProcessor = void 0;
const not_supported_1 = require("./not-supported");
const move_to_content_1 = require("./move-to-content");
const change_name_1 = require("./change-name");
const add_comment_1 = require("./add-comment");
const util_1 = require("./util");
const add_attribute_1 = require("./add-attribute");
const model_1 = require("./model");
const rename_1 = require("./rename");
const move_children_to_component_1 = require("./move-children-to-component");
const remove_attribute_1 = require("./remove-attribute");
const add_children_1 = require("./add-children");
const comment_content_1 = require("./comment-content");
const task_storage_1 = require("./task-storage");
const save_to_call_on_demand_1 = require("./save-to-call-on-demand");
const call_with_new_source_1 = require("./call-with-new-source");
const run_tasks_on_node_1 = require("./run-tasks-on-node");
/**
 * Класс для обработки узлов PrizmTemplateNode в соответствии с задачами PrizmTask.
 */
class PrizmTemplateTaskProcessor {
    /**
     * @param {PrizmTemplateTask[]} tasks - Массив задач PrizmTemplateTask для обработки узлов.
     */
    constructor(tasks) {
        this.tasks = tasks;
        this.storage = new task_storage_1.PrizmTemplateTaskStorage();
        this.defaultTasks = [
            new call_with_new_source_1.PrizmCallWithNewSourceTemplateTask(),
            new run_tasks_on_node_1.PrizmRunTasksOnNodeTemplateTask(),
            new add_attribute_1.PrizmAddAttributeTemplateTask(),
            new add_children_1.PrizmAddChildrenTemplateTask(),
            new not_supported_1.PrizmNotSupportedTemplateTask(),
            new move_to_content_1.PrizmMoveToContentTemplateTask(),
            new comment_content_1.PrizmCommentContentTemplateTask(),
            new remove_attribute_1.PrizmRemoveAttributeTemplateTask(),
            new save_to_call_on_demand_1.PrizmSaveToCallOnDemandTemplateTask(),
            new rename_1.PrizmRenameTemplateTask(),
            new add_comment_1.PrizmAddCommentTemplateTask(),
            new change_name_1.PrizmChangeNameTemplateTask(),
            new move_children_to_component_1.PrizmMoveContentToComponentTemplateTask(),
        ];
    }
    nodeNeedToChange(node, task) {
        if (typeof task.selector === 'string') {
            return node.name === task.selector;
        }
        if (Array.isArray(task.selector)) {
            return Boolean(task.selector.find(item => {
                if (item.type === 'byAttr') {
                    const result = Object.entries(item.attrs).map(([key, value]) => {
                        const attrWithType = (0, util_1.prizmAstFindAttributeWithType)(key, node.attrs);
                        if (attrWithType && (value === undefined || attrWithType.value === value))
                            return true;
                        return false;
                    });
                    return !result.includes(false);
                }
                return false;
            }) && true);
        }
        return false;
    }
    runAction(node, action, getCtx) {
        try {
            const task = this.defaultTasks.find(task => task.type === action.type);
            if (task)
                node = task.run(node, action.payload, getCtx({ task: task, sourceNode: node }));
        }
        catch (e) {
            console.error('Warning:prizm-template-task:runAction', e);
        }
        return node;
    }
    needToChange(obj, tasks = this.tasks) {
        if (!obj || !Array.isArray(obj)) {
            return false;
        }
        return !!obj.find(node => {
            // Обработка действий задачи для узла
            for (const task of this.tasks) {
                if (this.nodeNeedToChange(node, task))
                    return true;
            }
            return false;
        });
    }
    clear() {
        this.storage.clear();
    }
    processAction(node, task, newContext) {
        let newNode;
        if (this.nodeNeedToChange(node, task)) {
            newNode = { ...node };
            task.tasks.forEach(action => {
                newNode = this.runAction(newNode, action, ({ task, sourceNode }) => this.generateContext(null, 'tasks', sourceNode, task, newContext));
            });
            if (task.defaultInputs) {
                Object.entries(task.defaultInputs).forEach(([key, value]) => {
                    if (node.attrs[key] ||
                        node.attrs[`[${key}]`] ||
                        node.attrs[`[(${key})]`] ||
                        node.attrs[`([${key}])`])
                        return;
                    // if value is not string wrap key for template value
                    if (typeof value !== 'string') {
                        key = `[${key}]`;
                    }
                    node.attrs[key] = value;
                });
            }
            if (task.inputs)
                Object.entries(task.inputs).forEach(([key, actions]) => {
                    if (!(0, util_1.prizmAstHasAttribute)(key, node.attrs, [
                        model_1.PrizmAstTemplateAttributeType.input,
                        model_1.PrizmAstTemplateAttributeType.inputVar,
                        model_1.PrizmAstTemplateAttributeType.inputOutput,
                    ]))
                        return;
                    actions.forEach(action => {
                        newNode = this.runAction(newNode, action, ({ task, sourceNode }) => this.generateContext(key, 'inputs', sourceNode, task, newContext));
                    });
                });
            if (task.outputs)
                Object.entries(task.outputs).forEach(([key, actions]) => {
                    if (!(0, util_1.prizmAstHasAttribute)(key, node.attrs, [
                        model_1.PrizmAstTemplateAttributeType.output,
                        model_1.PrizmAstTemplateAttributeType.inputOutput,
                    ]))
                        return;
                    actions.forEach(action => {
                        newNode = this.runAction(newNode, action, ({ task, sourceNode }) => this.generateContext(key, 'outputs', sourceNode, task, newContext));
                    });
                });
            node = newNode;
        }
        node.children = node.children?.map(childNode => this.processAction(childNode, task, newContext)) ?? [];
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        if (newNode)
            task.finishTasks?.forEach(action => {
                newNode = this.runAction(newNode, action, ({ task, sourceNode }) => this.generateContext(null, 'tasks', sourceNode, task, newContext));
            });
        return node;
    }
    /**
     * Обрабатывает массив узлов в соответствии с задачами.
     *
     * @param {any[]} obj - Массив узлов для обработки.
     * @returns {PrizmTemplateNode[]} Массив обработанных узлов.
     */
    processTasks(obj) {
        return obj.map(node => {
            // Обработка действий задачи для узла
            for (const task of this.tasks) {
                node = this.processAction(node, task, {});
            }
            return node;
        });
    }
    generateContext(key, runIn, sourceNode, task, newContext) {
        return {
            attrName: key && (0, util_1.prizmAstGetAttrName)(key),
            originName: key,
            runIn,
            sourceNode,
            storage: this.storage,
            task,
            processor: this,
            type: key && (0, util_1.prizmAstGetTypeOfAttribute)(key),
            ...(newContext ?? {}),
        };
    }
}
exports.PrizmTemplateTaskProcessor = PrizmTemplateTaskProcessor;
//# sourceMappingURL=data:application/json;base64,