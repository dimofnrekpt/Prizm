"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrizmRemoveAttributeTemplateTask = void 0;
const model_1 = require("../model");
const abstract_1 = require("../abstract");
const util_1 = require("../util");
class PrizmRemoveAttributeTemplateTask extends abstract_1.PrizmAstTaskTemplate {
    constructor() {
        super(...arguments);
        this.type = 'remove-attribute';
    }
    run(node, payload, context) {
        const attr = payload.attr ?? context?.originName;
        if (!attr)
            return node;
        const attrTypes = [];
        if (context.runIn === 'tasks') {
            attrTypes.push(model_1.PrizmAstTemplateAttributeType.input, model_1.PrizmAstTemplateAttributeType.inputOutput, model_1.PrizmAstTemplateAttributeType.inputVar, model_1.PrizmAstTemplateAttributeType.output);
        }
        else if (context.runIn === 'inputs') {
            attrTypes.push(model_1.PrizmAstTemplateAttributeType.input, model_1.PrizmAstTemplateAttributeType.inputOutput, model_1.PrizmAstTemplateAttributeType.inputVar);
        }
        else if (context.runIn === 'outputs') {
            attrTypes.push(model_1.PrizmAstTemplateAttributeType.output, model_1.PrizmAstTemplateAttributeType.inputOutput);
        }
        const data = (0, util_1.prizmAstFindAttributeWithType)(attr, node.attrs, attrTypes);
        if (data) {
            // Remove the not supported attribute from the node's attrs object
            delete node.attrs[data.attrName];
        }
        return { ...node };
    }
}
exports.PrizmRemoveAttributeTemplateTask = PrizmRemoveAttributeTemplateTask;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLWF0dHJpYnV0ZS50YXNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hc3Qvc3JjL2xpYi90YXNrL3RlbXBsYXRlL3JlbW92ZS1hdHRyaWJ1dGUvcmVtb3ZlLWF0dHJpYnV0ZS50YXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9DQUFrRjtBQUNsRiwwQ0FBbUQ7QUFFbkQsa0NBQXdEO0FBRXhELE1BQWEsZ0NBQWlDLFNBQVEsK0JBQXVEO0lBQTdHOztRQUNXLFNBQUksR0FBRyxrQkFBa0IsQ0FBQztJQXNDckMsQ0FBQztJQXBDUSxHQUFHLENBQ1IsSUFBdUIsRUFDdkIsT0FBaUQsRUFDakQsT0FBZ0M7UUFFaEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLEVBQUUsVUFBVSxDQUFDO1FBRWpELElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFdkIsTUFBTSxTQUFTLEdBQW9DLEVBQUUsQ0FBQztRQUN0RCxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFO1lBQzdCLFNBQVMsQ0FBQyxJQUFJLENBQ1oscUNBQTZCLENBQUMsS0FBSyxFQUNuQyxxQ0FBNkIsQ0FBQyxXQUFXLEVBQ3pDLHFDQUE2QixDQUFDLFFBQVEsRUFDdEMscUNBQTZCLENBQUMsTUFBTSxDQUNyQyxDQUFDO1NBQ0g7YUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ3JDLFNBQVMsQ0FBQyxJQUFJLENBQ1oscUNBQTZCLENBQUMsS0FBSyxFQUNuQyxxQ0FBNkIsQ0FBQyxXQUFXLEVBQ3pDLHFDQUE2QixDQUFDLFFBQVEsQ0FDdkMsQ0FBQztTQUNIO2FBQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN0QyxTQUFTLENBQUMsSUFBSSxDQUFDLHFDQUE2QixDQUFDLE1BQU0sRUFBRSxxQ0FBNkIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNqRztRQUVELE1BQU0sSUFBSSxHQUFHLElBQUEsb0NBQTZCLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFeEUsSUFBSSxJQUFJLEVBQUU7WUFDUixrRUFBa0U7WUFDbEUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNsQztRQUVELE9BQU8sRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQXZDRCw0RUF1Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUHJpem1SZW1vdmVBdHRyaWJ1dGVUZW1wbGF0ZVRhc2ssIElQcml6bVJlbW92ZUF0dHJpYnV0ZVRlbXBsYXRlVGFza1BheWxvYWQgfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7IFByaXptQXN0VGVtcGxhdGVBdHRyaWJ1dGVUeXBlLCBQcml6bUFzdFRlbXBsYXRlQ29udGV4dCB9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7IFByaXptQXN0VGFza1RlbXBsYXRlIH0gZnJvbSAnLi4vYWJzdHJhY3QnO1xuaW1wb3J0IHsgUHJpem1UZW1wbGF0ZU5vZGUgfSBmcm9tICcuLi90YXNrJztcbmltcG9ydCB7IHByaXptQXN0RmluZEF0dHJpYnV0ZVdpdGhUeXBlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBQcml6bVJlbW92ZUF0dHJpYnV0ZVRlbXBsYXRlVGFzayBleHRlbmRzIFByaXptQXN0VGFza1RlbXBsYXRlPElQcml6bVJlbW92ZUF0dHJpYnV0ZVRlbXBsYXRlVGFzaz4ge1xuICByZWFkb25seSB0eXBlID0gJ3JlbW92ZS1hdHRyaWJ1dGUnO1xuXG4gIHB1YmxpYyBydW4oXG4gICAgbm9kZTogUHJpem1UZW1wbGF0ZU5vZGUsXG4gICAgcGF5bG9hZDogSVByaXptUmVtb3ZlQXR0cmlidXRlVGVtcGxhdGVUYXNrUGF5bG9hZCxcbiAgICBjb250ZXh0OiBQcml6bUFzdFRlbXBsYXRlQ29udGV4dFxuICApOiBQcml6bVRlbXBsYXRlTm9kZSB7XG4gICAgY29uc3QgYXR0ciA9IHBheWxvYWQuYXR0ciA/PyBjb250ZXh0Py5vcmlnaW5OYW1lO1xuXG4gICAgaWYgKCFhdHRyKSByZXR1cm4gbm9kZTtcblxuICAgIGNvbnN0IGF0dHJUeXBlczogUHJpem1Bc3RUZW1wbGF0ZUF0dHJpYnV0ZVR5cGVbXSA9IFtdO1xuICAgIGlmIChjb250ZXh0LnJ1bkluID09PSAndGFza3MnKSB7XG4gICAgICBhdHRyVHlwZXMucHVzaChcbiAgICAgICAgUHJpem1Bc3RUZW1wbGF0ZUF0dHJpYnV0ZVR5cGUuaW5wdXQsXG4gICAgICAgIFByaXptQXN0VGVtcGxhdGVBdHRyaWJ1dGVUeXBlLmlucHV0T3V0cHV0LFxuICAgICAgICBQcml6bUFzdFRlbXBsYXRlQXR0cmlidXRlVHlwZS5pbnB1dFZhcixcbiAgICAgICAgUHJpem1Bc3RUZW1wbGF0ZUF0dHJpYnV0ZVR5cGUub3V0cHV0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5ydW5JbiA9PT0gJ2lucHV0cycpIHtcbiAgICAgIGF0dHJUeXBlcy5wdXNoKFxuICAgICAgICBQcml6bUFzdFRlbXBsYXRlQXR0cmlidXRlVHlwZS5pbnB1dCxcbiAgICAgICAgUHJpem1Bc3RUZW1wbGF0ZUF0dHJpYnV0ZVR5cGUuaW5wdXRPdXRwdXQsXG4gICAgICAgIFByaXptQXN0VGVtcGxhdGVBdHRyaWJ1dGVUeXBlLmlucHV0VmFyXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5ydW5JbiA9PT0gJ291dHB1dHMnKSB7XG4gICAgICBhdHRyVHlwZXMucHVzaChQcml6bUFzdFRlbXBsYXRlQXR0cmlidXRlVHlwZS5vdXRwdXQsIFByaXptQXN0VGVtcGxhdGVBdHRyaWJ1dGVUeXBlLmlucHV0T3V0cHV0KTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gcHJpem1Bc3RGaW5kQXR0cmlidXRlV2l0aFR5cGUoYXR0ciwgbm9kZS5hdHRycywgYXR0clR5cGVzKTtcblxuICAgIGlmIChkYXRhKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIG5vdCBzdXBwb3J0ZWQgYXR0cmlidXRlIGZyb20gdGhlIG5vZGUncyBhdHRycyBvYmplY3RcbiAgICAgIGRlbGV0ZSBub2RlLmF0dHJzW2RhdGEuYXR0ck5hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiB7IC4uLm5vZGUgfTtcbiAgfVxufVxuIl19