import { InjectionToken } from '@angular/core';
import { PRIZM_ICONS_LAZY_SET } from './lazy-icon-set';
import { PRIZM_ICONS_16_LAZY_SET } from './lazy-icon-set-16';
import { from, map, of } from 'rxjs';
/**
 * Creates an icon loader function from a given lazy set of icons.
 * The loader function will attempt to load an icon and return an Observable of the icon data.
 *
 * @param {PrizmIconsLazySet} lazySet - The set of lazy-loaded icons.
 * @returns {PrizmIconsLoader} - The icon loader function.
 */
export function prizmCreateIconsLoader(lazySet) {
    return (name) => {
        const lazyIcon = lazySet[name];
        // Check if the icon loader function exists and load the icon, otherwise return null.
        return typeof lazyIcon === 'function' ? from(lazyIcon()).pipe(map(icon => icon.data)) : of(null);
    };
}
// Create an InjectionToken for the standard size icons loader.
// It uses the `createIconLoader` function with the standard size lazy icon set.
export const PRIZM_ICONS_LOADER = new InjectionToken('PRIZM_ICONS_LOADER', {
    factory: () => prizmCreateIconsLoader(PRIZM_ICONS_LAZY_SET),
});
// Create an InjectionToken for the 16px size icons loader.
// It uses the `createIconLoader` function with the 16px size lazy icon set.
export const PRIZM_ICONS_16_LOADER = new InjectionToken('PRIZM_ICONS_16_LOADER', {
    factory: () => prizmCreateIconsLoader(PRIZM_ICONS_16_LAZY_SET),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2ljb25zL2Jhc2Uvc3JjL2xpYi9pY29ucy90b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdELE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVFqRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsT0FBMEI7SUFDL0QsT0FBTyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ3RCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixxRkFBcUY7UUFDckYsT0FBTyxPQUFPLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25HLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCwrREFBK0Q7QUFDL0QsZ0ZBQWdGO0FBQ2hGLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksY0FBYyxDQUFtQixvQkFBb0IsRUFBRTtJQUMzRixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLENBQUM7Q0FDNUQsQ0FBQyxDQUFDO0FBRUgsMkRBQTJEO0FBQzNELDRFQUE0RTtBQUM1RSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLGNBQWMsQ0FBbUIsdUJBQXVCLEVBQUU7SUFDakcsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLHVCQUF1QixDQUFDO0NBQy9ELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQUklaTV9JQ09OU19MQVpZX1NFVCB9IGZyb20gJy4vbGF6eS1pY29uLXNldCc7XG5pbXBvcnQgeyBQUklaTV9JQ09OU18xNl9MQVpZX1NFVCB9IGZyb20gJy4vbGF6eS1pY29uLXNldC0xNic7XG5pbXBvcnQgeyBmcm9tLCBtYXAsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbi8vIERlZmluZSBhIHR5cGUgZm9yIHRoZSBsYXp5IGljb24gc2V0IHdoaWNoIG1hcHMgaWNvbiBuYW1lcyB0byBsYXp5IGxvYWRlciBmdW5jdGlvbnMuXG5leHBvcnQgdHlwZSBQcml6bUljb25zTGF6eVNldCA9IHsgW2ljb25OYW1lOiBzdHJpbmddOiAoKSA9PiBQcm9taXNlPHsgZGF0YTogc3RyaW5nIH0+IH07XG5cbi8vIERlZmluZSBhIHR5cGUgZm9yIHRoZSBpY29uIGxvYWRlciBmdW5jdGlvbiB3aGljaCB0YWtlcyBhbiBpY29uIG5hbWUgYW5kIHJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbmV4cG9ydCB0eXBlIFByaXptSWNvbnNMb2FkZXIgPSAobmFtZTogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gaWNvbiBsb2FkZXIgZnVuY3Rpb24gZnJvbSBhIGdpdmVuIGxhenkgc2V0IG9mIGljb25zLlxuICogVGhlIGxvYWRlciBmdW5jdGlvbiB3aWxsIGF0dGVtcHQgdG8gbG9hZCBhbiBpY29uIGFuZCByZXR1cm4gYW4gT2JzZXJ2YWJsZSBvZiB0aGUgaWNvbiBkYXRhLlxuICpcbiAqIEBwYXJhbSB7UHJpem1JY29uc0xhenlTZXR9IGxhenlTZXQgLSBUaGUgc2V0IG9mIGxhenktbG9hZGVkIGljb25zLlxuICogQHJldHVybnMge1ByaXptSWNvbnNMb2FkZXJ9IC0gVGhlIGljb24gbG9hZGVyIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpem1DcmVhdGVJY29uc0xvYWRlcihsYXp5U2V0OiBQcml6bUljb25zTGF6eVNldCk6IFByaXptSWNvbnNMb2FkZXIge1xuICByZXR1cm4gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGxhenlJY29uID0gbGF6eVNldFtuYW1lXTtcbiAgICAvLyBDaGVjayBpZiB0aGUgaWNvbiBsb2FkZXIgZnVuY3Rpb24gZXhpc3RzIGFuZCBsb2FkIHRoZSBpY29uLCBvdGhlcndpc2UgcmV0dXJuIG51bGwuXG4gICAgcmV0dXJuIHR5cGVvZiBsYXp5SWNvbiA9PT0gJ2Z1bmN0aW9uJyA/IGZyb20obGF6eUljb24oKSkucGlwZShtYXAoaWNvbiA9PiBpY29uLmRhdGEpKSA6IG9mKG51bGwpO1xuICB9O1xufVxuXG4vLyBDcmVhdGUgYW4gSW5qZWN0aW9uVG9rZW4gZm9yIHRoZSBzdGFuZGFyZCBzaXplIGljb25zIGxvYWRlci5cbi8vIEl0IHVzZXMgdGhlIGBjcmVhdGVJY29uTG9hZGVyYCBmdW5jdGlvbiB3aXRoIHRoZSBzdGFuZGFyZCBzaXplIGxhenkgaWNvbiBzZXQuXG5leHBvcnQgY29uc3QgUFJJWk1fSUNPTlNfTE9BREVSID0gbmV3IEluamVjdGlvblRva2VuPFByaXptSWNvbnNMb2FkZXI+KCdQUklaTV9JQ09OU19MT0FERVInLCB7XG4gIGZhY3Rvcnk6ICgpID0+IHByaXptQ3JlYXRlSWNvbnNMb2FkZXIoUFJJWk1fSUNPTlNfTEFaWV9TRVQpLFxufSk7XG5cbi8vIENyZWF0ZSBhbiBJbmplY3Rpb25Ub2tlbiBmb3IgdGhlIDE2cHggc2l6ZSBpY29ucyBsb2FkZXIuXG4vLyBJdCB1c2VzIHRoZSBgY3JlYXRlSWNvbkxvYWRlcmAgZnVuY3Rpb24gd2l0aCB0aGUgMTZweCBzaXplIGxhenkgaWNvbiBzZXQuXG5leHBvcnQgY29uc3QgUFJJWk1fSUNPTlNfMTZfTE9BREVSID0gbmV3IEluamVjdGlvblRva2VuPFByaXptSWNvbnNMb2FkZXI+KCdQUklaTV9JQ09OU18xNl9MT0FERVInLCB7XG4gIGZhY3Rvcnk6ICgpID0+IHByaXptQ3JlYXRlSWNvbnNMb2FkZXIoUFJJWk1fSUNPTlNfMTZfTEFaWV9TRVQpLFxufSk7XG4iXX0=